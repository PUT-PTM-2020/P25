
Projekt_PTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003abc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa0  08003c44  08003c44  00013c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046e4  080046e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080046e4  080046e4  000146e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046ec  080046ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046ec  080046ec  000146ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046f0  080046f0  000146f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080046f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000000c  08004700  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08004700  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b97e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ccf  00000000  00000000  0002b9ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f8  00000000  00000000  0002d690  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000808  00000000  00000000  0002df88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000217c7  00000000  00000000  0002e790  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e7f  00000000  00000000  0004ff57  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c747d  00000000  00000000  00058dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120253  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002380  00000000  00000000  001202d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c2c 	.word	0x08003c2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003c2c 	.word	0x08003c2c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 ffe5 	bl	80014c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f003 f9b4 	bl	8003868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 fffd 	bl	800152a <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 ffc5 	bl	80014d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	20000034 	.word	0x20000034

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000034 	.word	0x20000034

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004

080005f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d101      	bne.n	8000606 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	e033      	b.n	800066e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060a:	2b00      	cmp	r3, #0
 800060c:	d109      	bne.n	8000622 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f003 f952 	bl	80038b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000626:	f003 0310 	and.w	r3, r3, #16
 800062a:	2b00      	cmp	r3, #0
 800062c:	d118      	bne.n	8000660 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000632:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000636:	f023 0302 	bic.w	r3, r3, #2
 800063a:	f043 0202 	orr.w	r2, r3, #2
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 fce4 	bl	8001010 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2200      	movs	r2, #0
 800064c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000652:	f023 0303 	bic.w	r3, r3, #3
 8000656:	f043 0201 	orr.w	r2, r3, #1
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	641a      	str	r2, [r3, #64]	; 0x40
 800065e:	e001      	b.n	8000664 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000660:	2301      	movs	r3, #1
 8000662:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2200      	movs	r2, #0
 8000668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800066c:	7bfb      	ldrb	r3, [r7, #15]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800068a:	2b01      	cmp	r3, #1
 800068c:	d101      	bne.n	8000692 <HAL_ADC_Start+0x1a>
 800068e:	2302      	movs	r3, #2
 8000690:	e0a5      	b.n	80007de <HAL_ADC_Start+0x166>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2201      	movs	r2, #1
 8000696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d018      	beq.n	80006da <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	689a      	ldr	r2, [r3, #8]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f042 0201 	orr.w	r2, r2, #1
 80006b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006b8:	4b4c      	ldr	r3, [pc, #304]	; (80007ec <HAL_ADC_Start+0x174>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a4c      	ldr	r2, [pc, #304]	; (80007f0 <HAL_ADC_Start+0x178>)
 80006be:	fba2 2303 	umull	r2, r3, r2, r3
 80006c2:	0c9a      	lsrs	r2, r3, #18
 80006c4:	4613      	mov	r3, r2
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	4413      	add	r3, r2
 80006ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80006cc:	e002      	b.n	80006d4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1f9      	bne.n	80006ce <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d179      	bne.n	80007dc <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006f0:	f023 0301 	bic.w	r3, r3, #1
 80006f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000706:	2b00      	cmp	r3, #0
 8000708:	d007      	beq.n	800071a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000712:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000726:	d106      	bne.n	8000736 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072c:	f023 0206 	bic.w	r2, r3, #6
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	645a      	str	r2, [r3, #68]	; 0x44
 8000734:	e002      	b.n	800073c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2200      	movs	r2, #0
 8000740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000744:	4b2b      	ldr	r3, [pc, #172]	; (80007f4 <HAL_ADC_Start+0x17c>)
 8000746:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000750:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	f003 031f 	and.w	r3, r3, #31
 800075a:	2b00      	cmp	r3, #0
 800075c:	d12a      	bne.n	80007b4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a25      	ldr	r2, [pc, #148]	; (80007f8 <HAL_ADC_Start+0x180>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d015      	beq.n	8000794 <HAL_ADC_Start+0x11c>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a23      	ldr	r2, [pc, #140]	; (80007fc <HAL_ADC_Start+0x184>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d105      	bne.n	800077e <HAL_ADC_Start+0x106>
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <HAL_ADC_Start+0x17c>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f003 031f 	and.w	r3, r3, #31
 800077a:	2b00      	cmp	r3, #0
 800077c:	d00a      	beq.n	8000794 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a1f      	ldr	r2, [pc, #124]	; (8000800 <HAL_ADC_Start+0x188>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d129      	bne.n	80007dc <HAL_ADC_Start+0x164>
 8000788:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <HAL_ADC_Start+0x17c>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f003 031f 	and.w	r3, r3, #31
 8000790:	2b0f      	cmp	r3, #15
 8000792:	d823      	bhi.n	80007dc <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d11c      	bne.n	80007dc <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	689a      	ldr	r2, [r3, #8]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	e013      	b.n	80007dc <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <HAL_ADC_Start+0x180>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d10e      	bne.n	80007dc <HAL_ADC_Start+0x164>
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d107      	bne.n	80007dc <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	689a      	ldr	r2, [r3, #8]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007da:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	20000008 	.word	0x20000008
 80007f0:	431bde83 	.word	0x431bde83
 80007f4:	40012300 	.word	0x40012300
 80007f8:	40012000 	.word	0x40012000
 80007fc:	40012100 	.word	0x40012100
 8000800:	40012200 	.word	0x40012200

08000804 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800081c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000820:	d113      	bne.n	800084a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800082c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000830:	d10b      	bne.n	800084a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f043 0220 	orr.w	r2, r3, #32
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2200      	movs	r2, #0
 8000842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	e05c      	b.n	8000904 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800084a:	f7ff fea3 	bl	8000594 <HAL_GetTick>
 800084e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000850:	e01a      	b.n	8000888 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000858:	d016      	beq.n	8000888 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d007      	beq.n	8000870 <HAL_ADC_PollForConversion+0x6c>
 8000860:	f7ff fe98 	bl	8000594 <HAL_GetTick>
 8000864:	4602      	mov	r2, r0
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	683a      	ldr	r2, [r7, #0]
 800086c:	429a      	cmp	r2, r3
 800086e:	d20b      	bcs.n	8000888 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	f043 0204 	orr.w	r2, r3, #4
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2200      	movs	r2, #0
 8000880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8000884:	2303      	movs	r3, #3
 8000886:	e03d      	b.n	8000904 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	2b02      	cmp	r3, #2
 8000894:	d1dd      	bne.n	8000852 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f06f 0212 	mvn.w	r2, #18
 800089e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d123      	bne.n	8000902 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d11f      	bne.n	8000902 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d006      	beq.n	80008de <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d111      	bne.n	8000902 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d105      	bne.n	8000902 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f043 0201 	orr.w	r2, r3, #1
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000902:	2300      	movs	r3, #0
}
 8000904:	4618      	mov	r0, r3
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	2b02      	cmp	r3, #2
 8000928:	bf0c      	ite	eq
 800092a:	2301      	moveq	r3, #1
 800092c:	2300      	movne	r3, #0
 800092e:	b2db      	uxtb	r3, r3
 8000930:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f003 0320 	and.w	r3, r3, #32
 800093c:	2b20      	cmp	r3, #32
 800093e:	bf0c      	ite	eq
 8000940:	2301      	moveq	r3, #1
 8000942:	2300      	movne	r3, #0
 8000944:	b2db      	uxtb	r3, r3
 8000946:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d049      	beq.n	80009e2 <HAL_ADC_IRQHandler+0xd6>
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d046      	beq.n	80009e2 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	f003 0310 	and.w	r3, r3, #16
 800095c:	2b00      	cmp	r3, #0
 800095e:	d105      	bne.n	800096c <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000976:	2b00      	cmp	r3, #0
 8000978:	d12b      	bne.n	80009d2 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800097e:	2b00      	cmp	r3, #0
 8000980:	d127      	bne.n	80009d2 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000988:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800098c:	2b00      	cmp	r3, #0
 800098e:	d006      	beq.n	800099e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800099a:	2b00      	cmp	r3, #0
 800099c:	d119      	bne.n	80009d2 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	685a      	ldr	r2, [r3, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f022 0220 	bic.w	r2, r2, #32
 80009ac:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d105      	bne.n	80009d2 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f043 0201 	orr.w	r2, r3, #1
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f002 fc06 	bl	80031e4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f06f 0212 	mvn.w	r2, #18
 80009e0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	2b04      	cmp	r3, #4
 80009ee:	bf0c      	ite	eq
 80009f0:	2301      	moveq	r3, #1
 80009f2:	2300      	movne	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a02:	2b80      	cmp	r3, #128	; 0x80
 8000a04:	bf0c      	ite	eq
 8000a06:	2301      	moveq	r3, #1
 8000a08:	2300      	movne	r3, #0
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d057      	beq.n	8000ac4 <HAL_ADC_IRQHandler+0x1b8>
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d054      	beq.n	8000ac4 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 0310 	and.w	r3, r3, #16
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d105      	bne.n	8000a32 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d139      	bne.n	8000ab4 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a46:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d006      	beq.n	8000a5c <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d12b      	bne.n	8000ab4 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d124      	bne.n	8000ab4 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d11d      	bne.n	8000ab4 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d119      	bne.n	8000ab4 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	685a      	ldr	r2, [r3, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a8e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d105      	bne.n	8000ab4 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	f043 0201 	orr.w	r2, r3, #1
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f000 fc29 	bl	800130c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f06f 020c 	mvn.w	r2, #12
 8000ac2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2301      	moveq	r3, #1
 8000ad4:	2300      	movne	r3, #0
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae4:	2b40      	cmp	r3, #64	; 0x40
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d017      	beq.n	8000b26 <HAL_ADC_IRQHandler+0x21a>
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d014      	beq.n	8000b26 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d10d      	bne.n	8000b26 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f000 f943 	bl	8000da2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f06f 0201 	mvn.w	r2, #1
 8000b24:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f003 0320 	and.w	r3, r3, #32
 8000b30:	2b20      	cmp	r3, #32
 8000b32:	bf0c      	ite	eq
 8000b34:	2301      	moveq	r3, #1
 8000b36:	2300      	movne	r3, #0
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000b4a:	bf0c      	ite	eq
 8000b4c:	2301      	moveq	r3, #1
 8000b4e:	2300      	movne	r3, #0
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d015      	beq.n	8000b86 <HAL_ADC_IRQHandler+0x27a>
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d012      	beq.n	8000b86 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b64:	f043 0202 	orr.w	r2, r3, #2
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f06f 0220 	mvn.w	r2, #32
 8000b74:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 f91d 	bl	8000db6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f06f 0220 	mvn.w	r2, #32
 8000b84:	601a      	str	r2, [r3, #0]
  }
}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d101      	bne.n	8000bae <HAL_ADC_Start_DMA+0x1e>
 8000baa:	2302      	movs	r3, #2
 8000bac:	e0cc      	b.n	8000d48 <HAL_ADC_Start_DMA+0x1b8>
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d018      	beq.n	8000bf6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f042 0201 	orr.w	r2, r2, #1
 8000bd2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000bd4:	4b5e      	ldr	r3, [pc, #376]	; (8000d50 <HAL_ADC_Start_DMA+0x1c0>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a5e      	ldr	r2, [pc, #376]	; (8000d54 <HAL_ADC_Start_DMA+0x1c4>)
 8000bda:	fba2 2303 	umull	r2, r3, r2, r3
 8000bde:	0c9a      	lsrs	r2, r3, #18
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000be8:	e002      	b.n	8000bf0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1f9      	bne.n	8000bea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	f040 80a0 	bne.w	8000d46 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c0e:	f023 0301 	bic.w	r3, r3, #1
 8000c12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d007      	beq.n	8000c38 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c44:	d106      	bne.n	8000c54 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f023 0206 	bic.w	r2, r3, #6
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	645a      	str	r2, [r3, #68]	; 0x44
 8000c52:	e002      	b.n	8000c5a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2200      	movs	r2, #0
 8000c58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c62:	4b3d      	ldr	r3, [pc, #244]	; (8000d58 <HAL_ADC_Start_DMA+0x1c8>)
 8000c64:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c6a:	4a3c      	ldr	r2, [pc, #240]	; (8000d5c <HAL_ADC_Start_DMA+0x1cc>)
 8000c6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c72:	4a3b      	ldr	r2, [pc, #236]	; (8000d60 <HAL_ADC_Start_DMA+0x1d0>)
 8000c74:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c7a:	4a3a      	ldr	r2, [pc, #232]	; (8000d64 <HAL_ADC_Start_DMA+0x1d4>)
 8000c7c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000c86:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000c96:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ca6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	334c      	adds	r3, #76	; 0x4c
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	68ba      	ldr	r2, [r7, #8]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f000 fcf2 	bl	80016a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 031f 	and.w	r3, r3, #31
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d12a      	bne.n	8000d1e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a26      	ldr	r2, [pc, #152]	; (8000d68 <HAL_ADC_Start_DMA+0x1d8>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d015      	beq.n	8000cfe <HAL_ADC_Start_DMA+0x16e>
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a25      	ldr	r2, [pc, #148]	; (8000d6c <HAL_ADC_Start_DMA+0x1dc>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d105      	bne.n	8000ce8 <HAL_ADC_Start_DMA+0x158>
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <HAL_ADC_Start_DMA+0x1c8>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 031f 	and.w	r3, r3, #31
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00a      	beq.n	8000cfe <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a20      	ldr	r2, [pc, #128]	; (8000d70 <HAL_ADC_Start_DMA+0x1e0>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d129      	bne.n	8000d46 <HAL_ADC_Start_DMA+0x1b6>
 8000cf2:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <HAL_ADC_Start_DMA+0x1c8>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 031f 	and.w	r3, r3, #31
 8000cfa:	2b0f      	cmp	r3, #15
 8000cfc:	d823      	bhi.n	8000d46 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d11c      	bne.n	8000d46 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	689a      	ldr	r2, [r3, #8]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	e013      	b.n	8000d46 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <HAL_ADC_Start_DMA+0x1d8>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d10e      	bne.n	8000d46 <HAL_ADC_Start_DMA+0x1b6>
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d107      	bne.n	8000d46 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d44:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000008 	.word	0x20000008
 8000d54:	431bde83 	.word	0x431bde83
 8000d58:	40012300 	.word	0x40012300
 8000d5c:	08001209 	.word	0x08001209
 8000d60:	080012c3 	.word	0x080012c3
 8000d64:	080012df 	.word	0x080012df
 8000d68:	40012000 	.word	0x40012000
 8000d6c:	40012100 	.word	0x40012100
 8000d70:	40012200 	.word	0x40012200

08000d74 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d101      	bne.n	8000de8 <HAL_ADC_ConfigChannel+0x1c>
 8000de4:	2302      	movs	r3, #2
 8000de6:	e105      	b.n	8000ff4 <HAL_ADC_ConfigChannel+0x228>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2201      	movs	r2, #1
 8000dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b09      	cmp	r3, #9
 8000df6:	d925      	bls.n	8000e44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	68d9      	ldr	r1, [r3, #12]
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	461a      	mov	r2, r3
 8000e06:	4613      	mov	r3, r2
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	4413      	add	r3, r2
 8000e0c:	3b1e      	subs	r3, #30
 8000e0e:	2207      	movs	r2, #7
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43da      	mvns	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	400a      	ands	r2, r1
 8000e1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68d9      	ldr	r1, [r3, #12]
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	4603      	mov	r3, r0
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4403      	add	r3, r0
 8000e36:	3b1e      	subs	r3, #30
 8000e38:	409a      	lsls	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	e022      	b.n	8000e8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6919      	ldr	r1, [r3, #16]
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	461a      	mov	r2, r3
 8000e52:	4613      	mov	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	4413      	add	r3, r2
 8000e58:	2207      	movs	r2, #7
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	400a      	ands	r2, r1
 8000e66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6919      	ldr	r1, [r3, #16]
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	689a      	ldr	r2, [r3, #8]
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	4618      	mov	r0, r3
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	4403      	add	r3, r0
 8000e80:	409a      	lsls	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	430a      	orrs	r2, r1
 8000e88:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d824      	bhi.n	8000edc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4413      	add	r3, r2
 8000ea2:	3b05      	subs	r3, #5
 8000ea4:	221f      	movs	r2, #31
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	400a      	ands	r2, r1
 8000eb2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	3b05      	subs	r3, #5
 8000ece:	fa00 f203 	lsl.w	r2, r0, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	635a      	str	r2, [r3, #52]	; 0x34
 8000eda:	e04c      	b.n	8000f76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b0c      	cmp	r3, #12
 8000ee2:	d824      	bhi.n	8000f2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3b23      	subs	r3, #35	; 0x23
 8000ef6:	221f      	movs	r2, #31
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43da      	mvns	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	400a      	ands	r2, r1
 8000f04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	3b23      	subs	r3, #35	; 0x23
 8000f20:	fa00 f203 	lsl.w	r2, r0, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f2c:	e023      	b.n	8000f76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	3b41      	subs	r3, #65	; 0x41
 8000f40:	221f      	movs	r2, #31
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43da      	mvns	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	400a      	ands	r2, r1
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	3b41      	subs	r3, #65	; 0x41
 8000f6a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	430a      	orrs	r2, r1
 8000f74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f76:	4b22      	ldr	r3, [pc, #136]	; (8001000 <HAL_ADC_ConfigChannel+0x234>)
 8000f78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a21      	ldr	r2, [pc, #132]	; (8001004 <HAL_ADC_ConfigChannel+0x238>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d109      	bne.n	8000f98 <HAL_ADC_ConfigChannel+0x1cc>
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b12      	cmp	r3, #18
 8000f8a:	d105      	bne.n	8000f98 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a19      	ldr	r2, [pc, #100]	; (8001004 <HAL_ADC_ConfigChannel+0x238>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d123      	bne.n	8000fea <HAL_ADC_ConfigChannel+0x21e>
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b10      	cmp	r3, #16
 8000fa8:	d003      	beq.n	8000fb2 <HAL_ADC_ConfigChannel+0x1e6>
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b11      	cmp	r3, #17
 8000fb0:	d11b      	bne.n	8000fea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b10      	cmp	r3, #16
 8000fc4:	d111      	bne.n	8000fea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <HAL_ADC_ConfigChannel+0x23c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a10      	ldr	r2, [pc, #64]	; (800100c <HAL_ADC_ConfigChannel+0x240>)
 8000fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd0:	0c9a      	lsrs	r2, r3, #18
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000fdc:	e002      	b.n	8000fe4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f9      	bne.n	8000fde <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	40012300 	.word	0x40012300
 8001004:	40012000 	.word	0x40012000
 8001008:	20000008 	.word	0x20000008
 800100c:	431bde83 	.word	0x431bde83

08001010 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001018:	4b79      	ldr	r3, [pc, #484]	; (8001200 <ADC_Init+0x1f0>)
 800101a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	431a      	orrs	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001044:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6859      	ldr	r1, [r3, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	021a      	lsls	r2, r3, #8
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	430a      	orrs	r2, r1
 8001058:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001068:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6859      	ldr	r1, [r3, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	430a      	orrs	r2, r1
 800107a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800108a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6899      	ldr	r1, [r3, #8]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	430a      	orrs	r2, r1
 800109c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a2:	4a58      	ldr	r2, [pc, #352]	; (8001204 <ADC_Init+0x1f4>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d022      	beq.n	80010ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6899      	ldr	r1, [r3, #8]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	430a      	orrs	r2, r1
 80010c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80010d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6899      	ldr	r1, [r3, #8]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	e00f      	b.n	800110e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800110c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 0202 	bic.w	r2, r2, #2
 800111c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6899      	ldr	r1, [r3, #8]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7e1b      	ldrb	r3, [r3, #24]
 8001128:	005a      	lsls	r2, r3, #1
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	430a      	orrs	r2, r1
 8001130:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d01b      	beq.n	8001174 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800114a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800115a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6859      	ldr	r1, [r3, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001166:	3b01      	subs	r3, #1
 8001168:	035a      	lsls	r2, r3, #13
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	430a      	orrs	r2, r1
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	e007      	b.n	8001184 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001182:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	3b01      	subs	r3, #1
 80011a0:	051a      	lsls	r2, r3, #20
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80011b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6899      	ldr	r1, [r3, #8]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011c6:	025a      	lsls	r2, r3, #9
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6899      	ldr	r1, [r3, #8]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	029a      	lsls	r2, r3, #10
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	609a      	str	r2, [r3, #8]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	40012300 	.word	0x40012300
 8001204:	0f000001 	.word	0x0f000001

08001208 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001214:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800121e:	2b00      	cmp	r3, #0
 8001220:	d13c      	bne.n	800129c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d12b      	bne.n	8001294 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001240:	2b00      	cmp	r3, #0
 8001242:	d127      	bne.n	8001294 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800124e:	2b00      	cmp	r3, #0
 8001250:	d006      	beq.n	8001260 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800125c:	2b00      	cmp	r3, #0
 800125e:	d119      	bne.n	8001294 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0220 	bic.w	r2, r2, #32
 800126e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d105      	bne.n	8001294 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f043 0201 	orr.w	r2, r3, #1
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f001 ffa5 	bl	80031e4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800129a:	e00e      	b.n	80012ba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f003 0310 	and.w	r3, r3, #16
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f7ff fd84 	bl	8000db6 <HAL_ADC_ErrorCallback>
}
 80012ae:	e004      	b.n	80012ba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	4798      	blx	r3
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b084      	sub	sp, #16
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ce:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f7ff fd5c 	bl	8000d8e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b084      	sub	sp, #16
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2240      	movs	r2, #64	; 0x40
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	f043 0204 	orr.w	r2, r3, #4
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f7ff fd59 	bl	8000db6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <__NVIC_GetPriorityGrouping+0x18>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	f003 0307 	and.w	r3, r3, #7
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	2b00      	cmp	r3, #0
 8001394:	db0b      	blt.n	80013ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	f003 021f 	and.w	r2, r3, #31
 800139c:	4907      	ldr	r1, [pc, #28]	; (80013bc <__NVIC_EnableIRQ+0x38>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	2001      	movs	r0, #1
 80013a6:	fa00 f202 	lsl.w	r2, r0, r2
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000e100 	.word	0xe000e100

080013c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db0a      	blt.n	80013ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	490c      	ldr	r1, [pc, #48]	; (800140c <__NVIC_SetPriority+0x4c>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e8:	e00a      	b.n	8001400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4908      	ldr	r1, [pc, #32]	; (8001410 <__NVIC_SetPriority+0x50>)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	3b04      	subs	r3, #4
 80013f8:	0112      	lsls	r2, r2, #4
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	440b      	add	r3, r1
 80013fe:	761a      	strb	r2, [r3, #24]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000e100 	.word	0xe000e100
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	; 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f1c3 0307 	rsb	r3, r3, #7
 800142e:	2b04      	cmp	r3, #4
 8001430:	bf28      	it	cs
 8001432:	2304      	movcs	r3, #4
 8001434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3304      	adds	r3, #4
 800143a:	2b06      	cmp	r3, #6
 800143c:	d902      	bls.n	8001444 <NVIC_EncodePriority+0x30>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3b03      	subs	r3, #3
 8001442:	e000      	b.n	8001446 <NVIC_EncodePriority+0x32>
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	f04f 32ff 	mov.w	r2, #4294967295
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	401a      	ands	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800145c:	f04f 31ff 	mov.w	r1, #4294967295
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43d9      	mvns	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	4313      	orrs	r3, r2
         );
}
 800146e:	4618      	mov	r0, r3
 8001470:	3724      	adds	r7, #36	; 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800148c:	d301      	bcc.n	8001492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148e:	2301      	movs	r3, #1
 8001490:	e00f      	b.n	80014b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <SysTick_Config+0x40>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149a:	210f      	movs	r1, #15
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	f7ff ff8e 	bl	80013c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <SysTick_Config+0x40>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014aa:	4b04      	ldr	r3, [pc, #16]	; (80014bc <SysTick_Config+0x40>)
 80014ac:	2207      	movs	r2, #7
 80014ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	e000e010 	.word	0xe000e010

080014c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff29 	bl	8001320 <__NVIC_SetPriorityGrouping>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e8:	f7ff ff3e 	bl	8001368 <__NVIC_GetPriorityGrouping>
 80014ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	6978      	ldr	r0, [r7, #20]
 80014f4:	f7ff ff8e 	bl	8001414 <NVIC_EncodePriority>
 80014f8:	4602      	mov	r2, r0
 80014fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff5d 	bl	80013c0 <__NVIC_SetPriority>
}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff31 	bl	8001384 <__NVIC_EnableIRQ>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ffa2 	bl	800147c <SysTick_Config>
 8001538:	4603      	mov	r3, r0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff f820 	bl	8000594 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e099      	b.n	8001694 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2202      	movs	r2, #2
 800156c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0201 	bic.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001580:	e00f      	b.n	80015a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001582:	f7ff f807 	bl	8000594 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b05      	cmp	r3, #5
 800158e:	d908      	bls.n	80015a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2220      	movs	r2, #32
 8001594:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2203      	movs	r2, #3
 800159a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e078      	b.n	8001694 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1e8      	bne.n	8001582 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	4b38      	ldr	r3, [pc, #224]	; (800169c <HAL_DMA_Init+0x158>)
 80015bc:	4013      	ands	r3, r2
 80015be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d107      	bne.n	800160c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	4313      	orrs	r3, r2
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	4313      	orrs	r3, r2
 800160a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f023 0307 	bic.w	r3, r3, #7
 8001622:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	4313      	orrs	r3, r2
 800162c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	2b04      	cmp	r3, #4
 8001634:	d117      	bne.n	8001666 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	4313      	orrs	r3, r2
 800163e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00e      	beq.n	8001666 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 fa6f 	bl	8001b2c <DMA_CheckFifoParam>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d008      	beq.n	8001666 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2240      	movs	r2, #64	; 0x40
 8001658:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001662:	2301      	movs	r3, #1
 8001664:	e016      	b.n	8001694 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 fa26 	bl	8001ac0 <DMA_CalcBaseAndBitshift>
 8001674:	4603      	mov	r3, r0
 8001676:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167c:	223f      	movs	r2, #63	; 0x3f
 800167e:	409a      	lsls	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	f010803f 	.word	0xf010803f

080016a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_DMA_Start_IT+0x26>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e040      	b.n	8001748 <HAL_DMA_Start_IT+0xa8>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d12f      	bne.n	800173a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2202      	movs	r2, #2
 80016de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f000 f9b8 	bl	8001a64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f8:	223f      	movs	r2, #63	; 0x3f
 80016fa:	409a      	lsls	r2, r3
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0216 	orr.w	r2, r2, #22
 800170e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	2b00      	cmp	r3, #0
 8001716:	d007      	beq.n	8001728 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0208 	orr.w	r2, r2, #8
 8001726:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0201 	orr.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	e005      	b.n	8001746 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001742:	2302      	movs	r3, #2
 8001744:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001746:	7dfb      	ldrb	r3, [r7, #23]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800175c:	4b92      	ldr	r3, [pc, #584]	; (80019a8 <HAL_DMA_IRQHandler+0x258>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a92      	ldr	r2, [pc, #584]	; (80019ac <HAL_DMA_IRQHandler+0x25c>)
 8001762:	fba2 2303 	umull	r2, r3, r2, r3
 8001766:	0a9b      	lsrs	r3, r3, #10
 8001768:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177a:	2208      	movs	r2, #8
 800177c:	409a      	lsls	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4013      	ands	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d01a      	beq.n	80017bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d013      	beq.n	80017bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0204 	bic.w	r2, r2, #4
 80017a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a8:	2208      	movs	r2, #8
 80017aa:	409a      	lsls	r2, r3
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b4:	f043 0201 	orr.w	r2, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c0:	2201      	movs	r2, #1
 80017c2:	409a      	lsls	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d012      	beq.n	80017f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00b      	beq.n	80017f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017de:	2201      	movs	r2, #1
 80017e0:	409a      	lsls	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ea:	f043 0202 	orr.w	r2, r3, #2
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f6:	2204      	movs	r2, #4
 80017f8:	409a      	lsls	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d012      	beq.n	8001828 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00b      	beq.n	8001828 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001814:	2204      	movs	r2, #4
 8001816:	409a      	lsls	r2, r3
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001820:	f043 0204 	orr.w	r2, r3, #4
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182c:	2210      	movs	r2, #16
 800182e:	409a      	lsls	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4013      	ands	r3, r2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d043      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b00      	cmp	r3, #0
 8001844:	d03c      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184a:	2210      	movs	r2, #16
 800184c:	409a      	lsls	r2, r3
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d018      	beq.n	8001892 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d108      	bne.n	8001880 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	2b00      	cmp	r3, #0
 8001874:	d024      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	4798      	blx	r3
 800187e:	e01f      	b.n	80018c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001884:	2b00      	cmp	r3, #0
 8001886:	d01b      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	4798      	blx	r3
 8001890:	e016      	b.n	80018c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189c:	2b00      	cmp	r3, #0
 800189e:	d107      	bne.n	80018b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0208 	bic.w	r2, r2, #8
 80018ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c4:	2220      	movs	r2, #32
 80018c6:	409a      	lsls	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 808e 	beq.w	80019ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 8086 	beq.w	80019ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e6:	2220      	movs	r2, #32
 80018e8:	409a      	lsls	r2, r3
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b05      	cmp	r3, #5
 80018f8:	d136      	bne.n	8001968 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0216 	bic.w	r2, r2, #22
 8001908:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001918:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	2b00      	cmp	r3, #0
 8001920:	d103      	bne.n	800192a <HAL_DMA_IRQHandler+0x1da>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001926:	2b00      	cmp	r3, #0
 8001928:	d007      	beq.n	800193a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0208 	bic.w	r2, r2, #8
 8001938:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193e:	223f      	movs	r2, #63	; 0x3f
 8001940:	409a      	lsls	r2, r3
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800195a:	2b00      	cmp	r3, #0
 800195c:	d07d      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	4798      	blx	r3
        }
        return;
 8001966:	e078      	b.n	8001a5a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d01c      	beq.n	80019b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d108      	bne.n	8001996 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001988:	2b00      	cmp	r3, #0
 800198a:	d030      	beq.n	80019ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	4798      	blx	r3
 8001994:	e02b      	b.n	80019ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199a:	2b00      	cmp	r3, #0
 800199c:	d027      	beq.n	80019ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	4798      	blx	r3
 80019a6:	e022      	b.n	80019ee <HAL_DMA_IRQHandler+0x29e>
 80019a8:	20000008 	.word	0x20000008
 80019ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10f      	bne.n	80019de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0210 	bic.w	r2, r2, #16
 80019cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d032      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d022      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2205      	movs	r2, #5
 8001a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0201 	bic.w	r2, r2, #1
 8001a18:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d307      	bcc.n	8001a36 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f2      	bne.n	8001a1a <HAL_DMA_IRQHandler+0x2ca>
 8001a34:	e000      	b.n	8001a38 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a36:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	4798      	blx	r3
 8001a58:	e000      	b.n	8001a5c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001a5a:	bf00      	nop
    }
  }
}
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop

08001a64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b40      	cmp	r3, #64	; 0x40
 8001a90:	d108      	bne.n	8001aa4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001aa2:	e007      	b.n	8001ab4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	60da      	str	r2, [r3, #12]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	3b10      	subs	r3, #16
 8001ad0:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <DMA_CalcBaseAndBitshift+0x64>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	091b      	lsrs	r3, r3, #4
 8001ad8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ada:	4a13      	ldr	r2, [pc, #76]	; (8001b28 <DMA_CalcBaseAndBitshift+0x68>)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	d909      	bls.n	8001b02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001af6:	f023 0303 	bic.w	r3, r3, #3
 8001afa:	1d1a      	adds	r2, r3, #4
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	659a      	str	r2, [r3, #88]	; 0x58
 8001b00:	e007      	b.n	8001b12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b0a:	f023 0303 	bic.w	r3, r3, #3
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	aaaaaaab 	.word	0xaaaaaaab
 8001b28:	08003c68 	.word	0x08003c68

08001b2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d11f      	bne.n	8001b86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d855      	bhi.n	8001bf8 <DMA_CheckFifoParam+0xcc>
 8001b4c:	a201      	add	r2, pc, #4	; (adr r2, 8001b54 <DMA_CheckFifoParam+0x28>)
 8001b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b52:	bf00      	nop
 8001b54:	08001b65 	.word	0x08001b65
 8001b58:	08001b77 	.word	0x08001b77
 8001b5c:	08001b65 	.word	0x08001b65
 8001b60:	08001bf9 	.word	0x08001bf9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d045      	beq.n	8001bfc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b74:	e042      	b.n	8001bfc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b7e:	d13f      	bne.n	8001c00 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b84:	e03c      	b.n	8001c00 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b8e:	d121      	bne.n	8001bd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d836      	bhi.n	8001c04 <DMA_CheckFifoParam+0xd8>
 8001b96:	a201      	add	r2, pc, #4	; (adr r2, 8001b9c <DMA_CheckFifoParam+0x70>)
 8001b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9c:	08001bad 	.word	0x08001bad
 8001ba0:	08001bb3 	.word	0x08001bb3
 8001ba4:	08001bad 	.word	0x08001bad
 8001ba8:	08001bc5 	.word	0x08001bc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
      break;
 8001bb0:	e02f      	b.n	8001c12 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d024      	beq.n	8001c08 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bc2:	e021      	b.n	8001c08 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bcc:	d11e      	bne.n	8001c0c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bd2:	e01b      	b.n	8001c0c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d902      	bls.n	8001be0 <DMA_CheckFifoParam+0xb4>
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d003      	beq.n	8001be6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bde:	e018      	b.n	8001c12 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
      break;
 8001be4:	e015      	b.n	8001c12 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00e      	beq.n	8001c10 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	73fb      	strb	r3, [r7, #15]
      break;
 8001bf6:	e00b      	b.n	8001c10 <DMA_CheckFifoParam+0xe4>
      break;
 8001bf8:	bf00      	nop
 8001bfa:	e00a      	b.n	8001c12 <DMA_CheckFifoParam+0xe6>
      break;
 8001bfc:	bf00      	nop
 8001bfe:	e008      	b.n	8001c12 <DMA_CheckFifoParam+0xe6>
      break;
 8001c00:	bf00      	nop
 8001c02:	e006      	b.n	8001c12 <DMA_CheckFifoParam+0xe6>
      break;
 8001c04:	bf00      	nop
 8001c06:	e004      	b.n	8001c12 <DMA_CheckFifoParam+0xe6>
      break;
 8001c08:	bf00      	nop
 8001c0a:	e002      	b.n	8001c12 <DMA_CheckFifoParam+0xe6>
      break;   
 8001c0c:	bf00      	nop
 8001c0e:	e000      	b.n	8001c12 <DMA_CheckFifoParam+0xe6>
      break;
 8001c10:	bf00      	nop
    }
  } 
  
  return status; 
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	; 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
 8001c3a:	e16b      	b.n	8001f14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	f040 815a 	bne.w	8001f0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d00b      	beq.n	8001c7a <HAL_GPIO_Init+0x5a>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d007      	beq.n	8001c7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c6e:	2b11      	cmp	r3, #17
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b12      	cmp	r3, #18
 8001c78:	d130      	bne.n	8001cdc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2203      	movs	r2, #3
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 0201 	and.w	r2, r3, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0xfc>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b12      	cmp	r3, #18
 8001d1a:	d123      	bne.n	8001d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	08da      	lsrs	r2, r3, #3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3208      	adds	r2, #8
 8001d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	220f      	movs	r2, #15
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	08da      	lsrs	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3208      	adds	r2, #8
 8001d5e:	69b9      	ldr	r1, [r7, #24]
 8001d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	2203      	movs	r2, #3
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0203 	and.w	r2, r3, #3
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80b4 	beq.w	8001f0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b5f      	ldr	r3, [pc, #380]	; (8001f28 <HAL_GPIO_Init+0x308>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	4a5e      	ldr	r2, [pc, #376]	; (8001f28 <HAL_GPIO_Init+0x308>)
 8001db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db4:	6453      	str	r3, [r2, #68]	; 0x44
 8001db6:	4b5c      	ldr	r3, [pc, #368]	; (8001f28 <HAL_GPIO_Init+0x308>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dc2:	4a5a      	ldr	r2, [pc, #360]	; (8001f2c <HAL_GPIO_Init+0x30c>)
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	089b      	lsrs	r3, r3, #2
 8001dc8:	3302      	adds	r3, #2
 8001dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	220f      	movs	r2, #15
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a51      	ldr	r2, [pc, #324]	; (8001f30 <HAL_GPIO_Init+0x310>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d02b      	beq.n	8001e46 <HAL_GPIO_Init+0x226>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a50      	ldr	r2, [pc, #320]	; (8001f34 <HAL_GPIO_Init+0x314>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d025      	beq.n	8001e42 <HAL_GPIO_Init+0x222>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4f      	ldr	r2, [pc, #316]	; (8001f38 <HAL_GPIO_Init+0x318>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d01f      	beq.n	8001e3e <HAL_GPIO_Init+0x21e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a4e      	ldr	r2, [pc, #312]	; (8001f3c <HAL_GPIO_Init+0x31c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d019      	beq.n	8001e3a <HAL_GPIO_Init+0x21a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4d      	ldr	r2, [pc, #308]	; (8001f40 <HAL_GPIO_Init+0x320>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d013      	beq.n	8001e36 <HAL_GPIO_Init+0x216>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4c      	ldr	r2, [pc, #304]	; (8001f44 <HAL_GPIO_Init+0x324>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00d      	beq.n	8001e32 <HAL_GPIO_Init+0x212>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4b      	ldr	r2, [pc, #300]	; (8001f48 <HAL_GPIO_Init+0x328>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d007      	beq.n	8001e2e <HAL_GPIO_Init+0x20e>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a4a      	ldr	r2, [pc, #296]	; (8001f4c <HAL_GPIO_Init+0x32c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d101      	bne.n	8001e2a <HAL_GPIO_Init+0x20a>
 8001e26:	2307      	movs	r3, #7
 8001e28:	e00e      	b.n	8001e48 <HAL_GPIO_Init+0x228>
 8001e2a:	2308      	movs	r3, #8
 8001e2c:	e00c      	b.n	8001e48 <HAL_GPIO_Init+0x228>
 8001e2e:	2306      	movs	r3, #6
 8001e30:	e00a      	b.n	8001e48 <HAL_GPIO_Init+0x228>
 8001e32:	2305      	movs	r3, #5
 8001e34:	e008      	b.n	8001e48 <HAL_GPIO_Init+0x228>
 8001e36:	2304      	movs	r3, #4
 8001e38:	e006      	b.n	8001e48 <HAL_GPIO_Init+0x228>
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e004      	b.n	8001e48 <HAL_GPIO_Init+0x228>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e002      	b.n	8001e48 <HAL_GPIO_Init+0x228>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <HAL_GPIO_Init+0x228>
 8001e46:	2300      	movs	r3, #0
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	f002 0203 	and.w	r2, r2, #3
 8001e4e:	0092      	lsls	r2, r2, #2
 8001e50:	4093      	lsls	r3, r2
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e58:	4934      	ldr	r1, [pc, #208]	; (8001f2c <HAL_GPIO_Init+0x30c>)
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	3302      	adds	r3, #2
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e66:	4b3a      	ldr	r3, [pc, #232]	; (8001f50 <HAL_GPIO_Init+0x330>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e8a:	4a31      	ldr	r2, [pc, #196]	; (8001f50 <HAL_GPIO_Init+0x330>)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e90:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <HAL_GPIO_Init+0x330>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb4:	4a26      	ldr	r2, [pc, #152]	; (8001f50 <HAL_GPIO_Init+0x330>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eba:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <HAL_GPIO_Init+0x330>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ede:	4a1c      	ldr	r2, [pc, #112]	; (8001f50 <HAL_GPIO_Init+0x330>)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <HAL_GPIO_Init+0x330>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f08:	4a11      	ldr	r2, [pc, #68]	; (8001f50 <HAL_GPIO_Init+0x330>)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3301      	adds	r3, #1
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	2b0f      	cmp	r3, #15
 8001f18:	f67f ae90 	bls.w	8001c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	3724      	adds	r7, #36	; 0x24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40013800 	.word	0x40013800
 8001f30:	40020000 	.word	0x40020000
 8001f34:	40020400 	.word	0x40020400
 8001f38:	40020800 	.word	0x40020800
 8001f3c:	40020c00 	.word	0x40020c00
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40021400 	.word	0x40021400
 8001f48:	40021800 	.word	0x40021800
 8001f4c:	40021c00 	.word	0x40021c00
 8001f50:	40013c00 	.word	0x40013c00

08001f54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	887b      	ldrh	r3, [r7, #2]
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	e001      	b.n	8001f76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	807b      	strh	r3, [r7, #2]
 8001f90:	4613      	mov	r3, r2
 8001f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f94:	787b      	ldrb	r3, [r7, #1]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa0:	e003      	b.n	8001faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	041a      	lsls	r2, r3, #16
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	619a      	str	r2, [r3, #24]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f001 f946 	bl	8003268 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40013c00 	.word	0x40013c00

08001fe8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e25b      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d075      	beq.n	80020f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002006:	4ba3      	ldr	r3, [pc, #652]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b04      	cmp	r3, #4
 8002010:	d00c      	beq.n	800202c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002012:	4ba0      	ldr	r3, [pc, #640]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800201a:	2b08      	cmp	r3, #8
 800201c:	d112      	bne.n	8002044 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800201e:	4b9d      	ldr	r3, [pc, #628]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800202a:	d10b      	bne.n	8002044 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202c:	4b99      	ldr	r3, [pc, #612]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d05b      	beq.n	80020f0 <HAL_RCC_OscConfig+0x108>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d157      	bne.n	80020f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e236      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204c:	d106      	bne.n	800205c <HAL_RCC_OscConfig+0x74>
 800204e:	4b91      	ldr	r3, [pc, #580]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a90      	ldr	r2, [pc, #576]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e01d      	b.n	8002098 <HAL_RCC_OscConfig+0xb0>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002064:	d10c      	bne.n	8002080 <HAL_RCC_OscConfig+0x98>
 8002066:	4b8b      	ldr	r3, [pc, #556]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a8a      	ldr	r2, [pc, #552]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 800206c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4b88      	ldr	r3, [pc, #544]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a87      	ldr	r2, [pc, #540]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e00b      	b.n	8002098 <HAL_RCC_OscConfig+0xb0>
 8002080:	4b84      	ldr	r3, [pc, #528]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a83      	ldr	r2, [pc, #524]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b81      	ldr	r3, [pc, #516]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a80      	ldr	r2, [pc, #512]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d013      	beq.n	80020c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7fe fa78 	bl	8000594 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a8:	f7fe fa74 	bl	8000594 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	; 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e1fb      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	4b76      	ldr	r3, [pc, #472]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0xc0>
 80020c6:	e014      	b.n	80020f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7fe fa64 	bl	8000594 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d0:	f7fe fa60 	bl	8000594 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	; 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e1e7      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e2:	4b6c      	ldr	r3, [pc, #432]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0xe8>
 80020ee:	e000      	b.n	80020f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d063      	beq.n	80021c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020fe:	4b65      	ldr	r3, [pc, #404]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00b      	beq.n	8002122 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800210a:	4b62      	ldr	r3, [pc, #392]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002112:	2b08      	cmp	r3, #8
 8002114:	d11c      	bne.n	8002150 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002116:	4b5f      	ldr	r3, [pc, #380]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d116      	bne.n	8002150 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002122:	4b5c      	ldr	r3, [pc, #368]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_RCC_OscConfig+0x152>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d001      	beq.n	800213a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e1bb      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213a:	4b56      	ldr	r3, [pc, #344]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4952      	ldr	r1, [pc, #328]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214e:	e03a      	b.n	80021c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d020      	beq.n	800219a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002158:	4b4f      	ldr	r3, [pc, #316]	; (8002298 <HAL_RCC_OscConfig+0x2b0>)
 800215a:	2201      	movs	r2, #1
 800215c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215e:	f7fe fa19 	bl	8000594 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002166:	f7fe fa15 	bl	8000594 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e19c      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002178:	4b46      	ldr	r3, [pc, #280]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002184:	4b43      	ldr	r3, [pc, #268]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4940      	ldr	r1, [pc, #256]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002194:	4313      	orrs	r3, r2
 8002196:	600b      	str	r3, [r1, #0]
 8002198:	e015      	b.n	80021c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219a:	4b3f      	ldr	r3, [pc, #252]	; (8002298 <HAL_RCC_OscConfig+0x2b0>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a0:	f7fe f9f8 	bl	8000594 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021a8:	f7fe f9f4 	bl	8000594 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e17b      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ba:	4b36      	ldr	r3, [pc, #216]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d030      	beq.n	8002234 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d016      	beq.n	8002208 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021da:	4b30      	ldr	r3, [pc, #192]	; (800229c <HAL_RCC_OscConfig+0x2b4>)
 80021dc:	2201      	movs	r2, #1
 80021de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e0:	f7fe f9d8 	bl	8000594 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e8:	f7fe f9d4 	bl	8000594 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e15b      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fa:	4b26      	ldr	r3, [pc, #152]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x200>
 8002206:	e015      	b.n	8002234 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002208:	4b24      	ldr	r3, [pc, #144]	; (800229c <HAL_RCC_OscConfig+0x2b4>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220e:	f7fe f9c1 	bl	8000594 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002216:	f7fe f9bd 	bl	8000594 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e144      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002228:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 800222a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f0      	bne.n	8002216 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80a0 	beq.w	8002382 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002246:	4b13      	ldr	r3, [pc, #76]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10f      	bne.n	8002272 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a0e      	ldr	r2, [pc, #56]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002260:	6413      	str	r3, [r2, #64]	; 0x40
 8002262:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800226e:	2301      	movs	r3, #1
 8002270:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002272:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_RCC_OscConfig+0x2b8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d121      	bne.n	80022c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800227e:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <HAL_RCC_OscConfig+0x2b8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <HAL_RCC_OscConfig+0x2b8>)
 8002284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228a:	f7fe f983 	bl	8000594 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002290:	e011      	b.n	80022b6 <HAL_RCC_OscConfig+0x2ce>
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800
 8002298:	42470000 	.word	0x42470000
 800229c:	42470e80 	.word	0x42470e80
 80022a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a4:	f7fe f976 	bl	8000594 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e0fd      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b6:	4b81      	ldr	r3, [pc, #516]	; (80024bc <HAL_RCC_OscConfig+0x4d4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d106      	bne.n	80022d8 <HAL_RCC_OscConfig+0x2f0>
 80022ca:	4b7d      	ldr	r3, [pc, #500]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ce:	4a7c      	ldr	r2, [pc, #496]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6713      	str	r3, [r2, #112]	; 0x70
 80022d6:	e01c      	b.n	8002312 <HAL_RCC_OscConfig+0x32a>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b05      	cmp	r3, #5
 80022de:	d10c      	bne.n	80022fa <HAL_RCC_OscConfig+0x312>
 80022e0:	4b77      	ldr	r3, [pc, #476]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 80022e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e4:	4a76      	ldr	r2, [pc, #472]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 80022e6:	f043 0304 	orr.w	r3, r3, #4
 80022ea:	6713      	str	r3, [r2, #112]	; 0x70
 80022ec:	4b74      	ldr	r3, [pc, #464]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 80022ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f0:	4a73      	ldr	r2, [pc, #460]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6713      	str	r3, [r2, #112]	; 0x70
 80022f8:	e00b      	b.n	8002312 <HAL_RCC_OscConfig+0x32a>
 80022fa:	4b71      	ldr	r3, [pc, #452]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	4a70      	ldr	r2, [pc, #448]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 8002300:	f023 0301 	bic.w	r3, r3, #1
 8002304:	6713      	str	r3, [r2, #112]	; 0x70
 8002306:	4b6e      	ldr	r3, [pc, #440]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230a:	4a6d      	ldr	r2, [pc, #436]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 800230c:	f023 0304 	bic.w	r3, r3, #4
 8002310:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d015      	beq.n	8002346 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231a:	f7fe f93b 	bl	8000594 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002322:	f7fe f937 	bl	8000594 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e0bc      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002338:	4b61      	ldr	r3, [pc, #388]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 800233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0ee      	beq.n	8002322 <HAL_RCC_OscConfig+0x33a>
 8002344:	e014      	b.n	8002370 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002346:	f7fe f925 	bl	8000594 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800234c:	e00a      	b.n	8002364 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800234e:	f7fe f921 	bl	8000594 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f241 3288 	movw	r2, #5000	; 0x1388
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e0a6      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002364:	4b56      	ldr	r3, [pc, #344]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1ee      	bne.n	800234e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002370:	7dfb      	ldrb	r3, [r7, #23]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d105      	bne.n	8002382 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002376:	4b52      	ldr	r3, [pc, #328]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a51      	ldr	r2, [pc, #324]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 800237c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8092 	beq.w	80024b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800238c:	4b4c      	ldr	r3, [pc, #304]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 030c 	and.w	r3, r3, #12
 8002394:	2b08      	cmp	r3, #8
 8002396:	d05c      	beq.n	8002452 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d141      	bne.n	8002424 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a0:	4b48      	ldr	r3, [pc, #288]	; (80024c4 <HAL_RCC_OscConfig+0x4dc>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a6:	f7fe f8f5 	bl	8000594 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ae:	f7fe f8f1 	bl	8000594 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e078      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c0:	4b3f      	ldr	r3, [pc, #252]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f0      	bne.n	80023ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69da      	ldr	r2, [r3, #28]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	019b      	lsls	r3, r3, #6
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	085b      	lsrs	r3, r3, #1
 80023e4:	3b01      	subs	r3, #1
 80023e6:	041b      	lsls	r3, r3, #16
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	061b      	lsls	r3, r3, #24
 80023f0:	4933      	ldr	r1, [pc, #204]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f6:	4b33      	ldr	r3, [pc, #204]	; (80024c4 <HAL_RCC_OscConfig+0x4dc>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7fe f8ca 	bl	8000594 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002404:	f7fe f8c6 	bl	8000594 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e04d      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002416:	4b2a      	ldr	r3, [pc, #168]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0x41c>
 8002422:	e045      	b.n	80024b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002424:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <HAL_RCC_OscConfig+0x4dc>)
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7fe f8b3 	bl	8000594 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002432:	f7fe f8af 	bl	8000594 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e036      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002444:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f0      	bne.n	8002432 <HAL_RCC_OscConfig+0x44a>
 8002450:	e02e      	b.n	80024b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e029      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800245e:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	429a      	cmp	r2, r3
 8002470:	d11c      	bne.n	80024ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247c:	429a      	cmp	r2, r3
 800247e:	d115      	bne.n	80024ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002486:	4013      	ands	r3, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800248c:	4293      	cmp	r3, r2
 800248e:	d10d      	bne.n	80024ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d106      	bne.n	80024ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40007000 	.word	0x40007000
 80024c0:	40023800 	.word	0x40023800
 80024c4:	42470060 	.word	0x42470060

080024c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0cc      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024dc:	4b68      	ldr	r3, [pc, #416]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d90c      	bls.n	8002504 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b65      	ldr	r3, [pc, #404]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f2:	4b63      	ldr	r3, [pc, #396]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0b8      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d020      	beq.n	8002552 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800251c:	4b59      	ldr	r3, [pc, #356]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	4a58      	ldr	r2, [pc, #352]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002526:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002534:	4b53      	ldr	r3, [pc, #332]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	4a52      	ldr	r2, [pc, #328]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800253e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002540:	4b50      	ldr	r3, [pc, #320]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	494d      	ldr	r1, [pc, #308]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	4313      	orrs	r3, r2
 8002550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d044      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d107      	bne.n	8002576 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	4b47      	ldr	r3, [pc, #284]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d119      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e07f      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d003      	beq.n	8002586 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002582:	2b03      	cmp	r3, #3
 8002584:	d107      	bne.n	8002596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002586:	4b3f      	ldr	r3, [pc, #252]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e06f      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002596:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e067      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a6:	4b37      	ldr	r3, [pc, #220]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f023 0203 	bic.w	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4934      	ldr	r1, [pc, #208]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b8:	f7fd ffec 	bl	8000594 <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025be:	e00a      	b.n	80025d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c0:	f7fd ffe8 	bl	8000594 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e04f      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 020c 	and.w	r2, r3, #12
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d1eb      	bne.n	80025c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e8:	4b25      	ldr	r3, [pc, #148]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 030f 	and.w	r3, r3, #15
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d20c      	bcs.n	8002610 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b22      	ldr	r3, [pc, #136]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fe:	4b20      	ldr	r3, [pc, #128]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e032      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4916      	ldr	r1, [pc, #88]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	4313      	orrs	r3, r2
 800262c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d009      	beq.n	800264e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	490e      	ldr	r1, [pc, #56]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	4313      	orrs	r3, r2
 800264c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800264e:	f000 f821 	bl	8002694 <HAL_RCC_GetSysClockFreq>
 8002652:	4601      	mov	r1, r0
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	091b      	lsrs	r3, r3, #4
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	5cd3      	ldrb	r3, [r2, r3]
 8002662:	fa21 f303 	lsr.w	r3, r1, r3
 8002666:	4a09      	ldr	r2, [pc, #36]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800266a:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7fd ff4c 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40023c00 	.word	0x40023c00
 8002684:	40023800 	.word	0x40023800
 8002688:	080046d4 	.word	0x080046d4
 800268c:	20000008 	.word	0x20000008
 8002690:	20000000 	.word	0x20000000

08002694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	2300      	movs	r3, #0
 80026a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026aa:	4b63      	ldr	r3, [pc, #396]	; (8002838 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d007      	beq.n	80026c6 <HAL_RCC_GetSysClockFreq+0x32>
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d008      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0x38>
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f040 80b4 	bne.w	8002828 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026c0:	4b5e      	ldr	r3, [pc, #376]	; (800283c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026c2:	60bb      	str	r3, [r7, #8]
       break;
 80026c4:	e0b3      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026c6:	4b5e      	ldr	r3, [pc, #376]	; (8002840 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80026c8:	60bb      	str	r3, [r7, #8]
      break;
 80026ca:	e0b0      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026cc:	4b5a      	ldr	r3, [pc, #360]	; (8002838 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026d6:	4b58      	ldr	r3, [pc, #352]	; (8002838 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d04a      	beq.n	8002778 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e2:	4b55      	ldr	r3, [pc, #340]	; (8002838 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	099b      	lsrs	r3, r3, #6
 80026e8:	f04f 0400 	mov.w	r4, #0
 80026ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	ea03 0501 	and.w	r5, r3, r1
 80026f8:	ea04 0602 	and.w	r6, r4, r2
 80026fc:	4629      	mov	r1, r5
 80026fe:	4632      	mov	r2, r6
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	f04f 0400 	mov.w	r4, #0
 8002708:	0154      	lsls	r4, r2, #5
 800270a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800270e:	014b      	lsls	r3, r1, #5
 8002710:	4619      	mov	r1, r3
 8002712:	4622      	mov	r2, r4
 8002714:	1b49      	subs	r1, r1, r5
 8002716:	eb62 0206 	sbc.w	r2, r2, r6
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	f04f 0400 	mov.w	r4, #0
 8002722:	0194      	lsls	r4, r2, #6
 8002724:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002728:	018b      	lsls	r3, r1, #6
 800272a:	1a5b      	subs	r3, r3, r1
 800272c:	eb64 0402 	sbc.w	r4, r4, r2
 8002730:	f04f 0100 	mov.w	r1, #0
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	00e2      	lsls	r2, r4, #3
 800273a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800273e:	00d9      	lsls	r1, r3, #3
 8002740:	460b      	mov	r3, r1
 8002742:	4614      	mov	r4, r2
 8002744:	195b      	adds	r3, r3, r5
 8002746:	eb44 0406 	adc.w	r4, r4, r6
 800274a:	f04f 0100 	mov.w	r1, #0
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	0262      	lsls	r2, r4, #9
 8002754:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002758:	0259      	lsls	r1, r3, #9
 800275a:	460b      	mov	r3, r1
 800275c:	4614      	mov	r4, r2
 800275e:	4618      	mov	r0, r3
 8002760:	4621      	mov	r1, r4
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f04f 0400 	mov.w	r4, #0
 8002768:	461a      	mov	r2, r3
 800276a:	4623      	mov	r3, r4
 800276c:	f7fd fd2c 	bl	80001c8 <__aeabi_uldivmod>
 8002770:	4603      	mov	r3, r0
 8002772:	460c      	mov	r4, r1
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	e049      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002778:	4b2f      	ldr	r3, [pc, #188]	; (8002838 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	099b      	lsrs	r3, r3, #6
 800277e:	f04f 0400 	mov.w	r4, #0
 8002782:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	ea03 0501 	and.w	r5, r3, r1
 800278e:	ea04 0602 	and.w	r6, r4, r2
 8002792:	4629      	mov	r1, r5
 8002794:	4632      	mov	r2, r6
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	f04f 0400 	mov.w	r4, #0
 800279e:	0154      	lsls	r4, r2, #5
 80027a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027a4:	014b      	lsls	r3, r1, #5
 80027a6:	4619      	mov	r1, r3
 80027a8:	4622      	mov	r2, r4
 80027aa:	1b49      	subs	r1, r1, r5
 80027ac:	eb62 0206 	sbc.w	r2, r2, r6
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	f04f 0400 	mov.w	r4, #0
 80027b8:	0194      	lsls	r4, r2, #6
 80027ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027be:	018b      	lsls	r3, r1, #6
 80027c0:	1a5b      	subs	r3, r3, r1
 80027c2:	eb64 0402 	sbc.w	r4, r4, r2
 80027c6:	f04f 0100 	mov.w	r1, #0
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	00e2      	lsls	r2, r4, #3
 80027d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027d4:	00d9      	lsls	r1, r3, #3
 80027d6:	460b      	mov	r3, r1
 80027d8:	4614      	mov	r4, r2
 80027da:	195b      	adds	r3, r3, r5
 80027dc:	eb44 0406 	adc.w	r4, r4, r6
 80027e0:	f04f 0100 	mov.w	r1, #0
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	02a2      	lsls	r2, r4, #10
 80027ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80027ee:	0299      	lsls	r1, r3, #10
 80027f0:	460b      	mov	r3, r1
 80027f2:	4614      	mov	r4, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	4621      	mov	r1, r4
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f04f 0400 	mov.w	r4, #0
 80027fe:	461a      	mov	r2, r3
 8002800:	4623      	mov	r3, r4
 8002802:	f7fd fce1 	bl	80001c8 <__aeabi_uldivmod>
 8002806:	4603      	mov	r3, r0
 8002808:	460c      	mov	r4, r1
 800280a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800280c:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	0c1b      	lsrs	r3, r3, #16
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	3301      	adds	r3, #1
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	fbb2 f3f3 	udiv	r3, r2, r3
 8002824:	60bb      	str	r3, [r7, #8]
      break;
 8002826:	e002      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800282a:	60bb      	str	r3, [r7, #8]
      break;
 800282c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282e:	68bb      	ldr	r3, [r7, #8]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002838:	40023800 	.word	0x40023800
 800283c:	00f42400 	.word	0x00f42400
 8002840:	007a1200 	.word	0x007a1200

08002844 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e056      	b.n	8002904 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f001 f8d9 	bl	8003a28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2202      	movs	r2, #2
 800287a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800288c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	431a      	orrs	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	ea42 0103 	orr.w	r1, r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	0c1b      	lsrs	r3, r3, #16
 80028d4:	f003 0104 	and.w	r1, r3, #4
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69da      	ldr	r2, [r3, #28]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	4613      	mov	r3, r2
 800291a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_SPI_Transmit+0x22>
 800292a:	2302      	movs	r3, #2
 800292c:	e11e      	b.n	8002b6c <HAL_SPI_Transmit+0x260>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002936:	f7fd fe2d 	bl	8000594 <HAL_GetTick>
 800293a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	d002      	beq.n	8002952 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800294c:	2302      	movs	r3, #2
 800294e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002950:	e103      	b.n	8002b5a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <HAL_SPI_Transmit+0x52>
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d102      	bne.n	8002964 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002962:	e0fa      	b.n	8002b5a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2203      	movs	r2, #3
 8002968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	88fa      	ldrh	r2, [r7, #6]
 800297c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	88fa      	ldrh	r2, [r7, #6]
 8002982:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029aa:	d107      	bne.n	80029bc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c6:	2b40      	cmp	r3, #64	; 0x40
 80029c8:	d007      	beq.n	80029da <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029e2:	d14b      	bne.n	8002a7c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <HAL_SPI_Transmit+0xe6>
 80029ec:	8afb      	ldrh	r3, [r7, #22]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d13e      	bne.n	8002a70 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	881a      	ldrh	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	1c9a      	adds	r2, r3, #2
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a16:	e02b      	b.n	8002a70 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d112      	bne.n	8002a4c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	881a      	ldrh	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	1c9a      	adds	r2, r3, #2
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a4a:	e011      	b.n	8002a70 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a4c:	f7fd fda2 	bl	8000594 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d803      	bhi.n	8002a64 <HAL_SPI_Transmit+0x158>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a62:	d102      	bne.n	8002a6a <HAL_SPI_Transmit+0x15e>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d102      	bne.n	8002a70 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a6e:	e074      	b.n	8002b5a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1ce      	bne.n	8002a18 <HAL_SPI_Transmit+0x10c>
 8002a7a:	e04c      	b.n	8002b16 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <HAL_SPI_Transmit+0x17e>
 8002a84:	8afb      	ldrh	r3, [r7, #22]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d140      	bne.n	8002b0c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	330c      	adds	r3, #12
 8002a94:	7812      	ldrb	r2, [r2, #0]
 8002a96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ab0:	e02c      	b.n	8002b0c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d113      	bne.n	8002ae8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	330c      	adds	r3, #12
 8002aca:	7812      	ldrb	r2, [r2, #0]
 8002acc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ae6:	e011      	b.n	8002b0c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ae8:	f7fd fd54 	bl	8000594 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d803      	bhi.n	8002b00 <HAL_SPI_Transmit+0x1f4>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afe:	d102      	bne.n	8002b06 <HAL_SPI_Transmit+0x1fa>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b0a:	e026      	b.n	8002b5a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1cd      	bne.n	8002ab2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	6839      	ldr	r1, [r7, #0]
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 f894 	bl	8002c48 <SPI_EndRxTxTransaction>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10a      	bne.n	8002b4a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	77fb      	strb	r3, [r7, #31]
 8002b56:	e000      	b.n	8002b5a <HAL_SPI_Transmit+0x24e>
  }

error:
 8002b58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3720      	adds	r7, #32
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	4613      	mov	r3, r2
 8002b82:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b84:	e04c      	b.n	8002c20 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d048      	beq.n	8002c20 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002b8e:	f7fd fd01 	bl	8000594 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d902      	bls.n	8002ba4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d13d      	bne.n	8002c20 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bb2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bbc:	d111      	bne.n	8002be2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc6:	d004      	beq.n	8002bd2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd0:	d107      	bne.n	8002be2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002be0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bea:	d10f      	bne.n	8002c0c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e00f      	b.n	8002c40 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	bf0c      	ite	eq
 8002c30:	2301      	moveq	r3, #1
 8002c32:	2300      	movne	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d1a3      	bne.n	8002b86 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c54:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <SPI_EndRxTxTransaction+0x7c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a1b      	ldr	r2, [pc, #108]	; (8002cc8 <SPI_EndRxTxTransaction+0x80>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	0d5b      	lsrs	r3, r3, #21
 8002c60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c64:	fb02 f303 	mul.w	r3, r2, r3
 8002c68:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c72:	d112      	bne.n	8002c9a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2180      	movs	r1, #128	; 0x80
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f7ff ff78 	bl	8002b74 <SPI_WaitFlagStateUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d016      	beq.n	8002cb8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8e:	f043 0220 	orr.w	r2, r3, #32
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e00f      	b.n	8002cba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb0:	2b80      	cmp	r3, #128	; 0x80
 8002cb2:	d0f2      	beq.n	8002c9a <SPI_EndRxTxTransaction+0x52>
 8002cb4:	e000      	b.n	8002cb8 <SPI_EndRxTxTransaction+0x70>
        break;
 8002cb6:	bf00      	nop
  }

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000008 	.word	0x20000008
 8002cc8:	165e9f81 	.word	0x165e9f81

08002ccc <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd) 
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	460a      	mov	r2, r1
 8002cd6:	71fb      	strb	r3, [r7, #7]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 8002cdc:	79bb      	ldrb	r3, [r7, #6]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	2102      	movs	r1, #2
 8002ce6:	4811      	ldr	r0, [pc, #68]	; (8002d2c <ssd1331_write_byte+0x60>)
 8002ce8:	f7ff f94c 	bl	8001f84 <HAL_GPIO_WritePin>
 8002cec:	e004      	b.n	8002cf8 <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2102      	movs	r1, #2
 8002cf2:	480e      	ldr	r0, [pc, #56]	; (8002d2c <ssd1331_write_byte+0x60>)
 8002cf4:	f7ff f946 	bl	8001f84 <HAL_GPIO_WritePin>
	}
	
	__SSD1331_CS_CLR();
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2120      	movs	r1, #32
 8002cfc:	480c      	ldr	r0, [pc, #48]	; (8002d30 <ssd1331_write_byte+0x64>)
 8002cfe:	f7ff f941 	bl	8001f84 <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 8002d02:	1df9      	adds	r1, r7, #7
 8002d04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d08:	2201      	movs	r2, #1
 8002d0a:	480a      	ldr	r0, [pc, #40]	; (8002d34 <ssd1331_write_byte+0x68>)
 8002d0c:	f7ff fdfe 	bl	800290c <HAL_SPI_Transmit>
	
	__SSD1331_CS_SET();
 8002d10:	2201      	movs	r2, #1
 8002d12:	2120      	movs	r1, #32
 8002d14:	4806      	ldr	r0, [pc, #24]	; (8002d30 <ssd1331_write_byte+0x64>)
 8002d16:	f7ff f935 	bl	8001f84 <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	2102      	movs	r1, #2
 8002d1e:	4803      	ldr	r0, [pc, #12]	; (8002d2c <ssd1331_write_byte+0x60>)
 8002d20:	f7ff f930 	bl	8001f84 <HAL_GPIO_WritePin>
}
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40020400 	.word	0x40020400
 8002d30:	40020800 	.word	0x40020800
 8002d34:	2000012c 	.word	0x2000012c

08002d38 <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor) 
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
 8002d42:	460b      	mov	r3, r1
 8002d44:	71bb      	strb	r3, [r7, #6]
 8002d46:	4613      	mov	r3, r2
 8002d48:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	2b5f      	cmp	r3, #95	; 0x5f
 8002d4e:	d82b      	bhi.n	8002da8 <ssd1331_draw_point+0x70>
 8002d50:	79bb      	ldrb	r3, [r7, #6]
 8002d52:	2b3f      	cmp	r3, #63	; 0x3f
 8002d54:	d828      	bhi.n	8002da8 <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 8002d56:	2100      	movs	r1, #0
 8002d58:	2015      	movs	r0, #21
 8002d5a:	f7ff ffb7 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	2100      	movs	r1, #0
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff ffb2 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 8002d68:	2100      	movs	r1, #0
 8002d6a:	205f      	movs	r0, #95	; 0x5f
 8002d6c:	f7ff ffae 	bl	8002ccc <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 8002d70:	2100      	movs	r1, #0
 8002d72:	2075      	movs	r0, #117	; 0x75
 8002d74:	f7ff ffaa 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 8002d78:	79bb      	ldrb	r3, [r7, #6]
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ffa5 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 8002d82:	2100      	movs	r1, #0
 8002d84:	203f      	movs	r0, #63	; 0x3f
 8002d86:	f7ff ffa1 	bl	8002ccc <ssd1331_write_byte>
    
    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 8002d8a:	88bb      	ldrh	r3, [r7, #4]
 8002d8c:	0a1b      	lsrs	r3, r3, #8
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2101      	movs	r1, #1
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ff99 	bl	8002ccc <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);   
 8002d9a:	88bb      	ldrh	r3, [r7, #4]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2101      	movs	r1, #1
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff93 	bl	8002ccc <ssd1331_write_byte>
 8002da6:	e000      	b.n	8002daa <ssd1331_draw_point+0x72>
		return;
 8002da8:	bf00      	nop
}
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <ssd1331_display_char>:
  * @param  chSize: 
  * @param  chMode
  * @retval 
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{      	
 8002db0:	b590      	push	{r4, r7, lr}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4604      	mov	r4, r0
 8002db8:	4608      	mov	r0, r1
 8002dba:	4611      	mov	r1, r2
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4623      	mov	r3, r4
 8002dc0:	71fb      	strb	r3, [r7, #7]
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	71bb      	strb	r3, [r7, #6]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	717b      	strb	r3, [r7, #5]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 8002dce:	79bb      	ldrb	r3, [r7, #6]
 8002dd0:	733b      	strb	r3, [r7, #12]

	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	2b5f      	cmp	r3, #95	; 0x5f
 8002dd6:	d850      	bhi.n	8002e7a <ssd1331_display_char+0xca>
 8002dd8:	79bb      	ldrb	r3, [r7, #6]
 8002dda:	2b3f      	cmp	r3, #63	; 0x3f
 8002ddc:	d84d      	bhi.n	8002e7a <ssd1331_display_char+0xca>
		return;
	}
					   
    for (i = 0; i < chSize; i ++) {   
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]
 8002de2:	e045      	b.n	8002e70 <ssd1331_display_char+0xc0>
		if (FONT_1206 == chSize) {
 8002de4:	793b      	ldrb	r3, [r7, #4]
 8002de6:	2b0c      	cmp	r3, #12
 8002de8:	d10d      	bne.n	8002e06 <ssd1331_display_char+0x56>
			chTemp = c_chFont1206[chChr - 0x20][i];  
 8002dea:	797b      	ldrb	r3, [r7, #5]
 8002dec:	f1a3 0220 	sub.w	r2, r3, #32
 8002df0:	7bf9      	ldrb	r1, [r7, #15]
 8002df2:	4824      	ldr	r0, [pc, #144]	; (8002e84 <ssd1331_display_char+0xd4>)
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4403      	add	r3, r0
 8002dfe:	440b      	add	r3, r1
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	737b      	strb	r3, [r7, #13]
 8002e04:	e00c      	b.n	8002e20 <ssd1331_display_char+0x70>
		} else if (FONT_1608 == chSize) { 
 8002e06:	793b      	ldrb	r3, [r7, #4]
 8002e08:	2b10      	cmp	r3, #16
 8002e0a:	d109      	bne.n	8002e20 <ssd1331_display_char+0x70>
			chTemp = c_chFont1608[chChr - 0x20][i];
 8002e0c:	797b      	ldrb	r3, [r7, #5]
 8002e0e:	f1a3 0220 	sub.w	r2, r3, #32
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	491c      	ldr	r1, [pc, #112]	; (8002e88 <ssd1331_display_char+0xd8>)
 8002e16:	0112      	lsls	r2, r2, #4
 8002e18:	440a      	add	r2, r1
 8002e1a:	4413      	add	r3, r2
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	737b      	strb	r3, [r7, #13]
		}
		
        for (j = 0; j < 8; j ++) {
 8002e20:	2300      	movs	r3, #0
 8002e22:	73bb      	strb	r3, [r7, #14]
 8002e24:	e01e      	b.n	8002e64 <ssd1331_display_char+0xb4>
    		if (chTemp & 0x80) {
 8002e26:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	da05      	bge.n	8002e3a <ssd1331_display_char+0x8a>
				ssd1331_draw_point(chXpos, chYpos, hwColor);
 8002e2e:	8c3a      	ldrh	r2, [r7, #32]
 8002e30:	79b9      	ldrb	r1, [r7, #6]
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff ff7f 	bl	8002d38 <ssd1331_draw_point>
    		}			
			chTemp <<= 1;
 8002e3a:	7b7b      	ldrb	r3, [r7, #13]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 8002e40:	79bb      	ldrb	r3, [r7, #6]
 8002e42:	3301      	adds	r3, #1
 8002e44:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 8002e46:	79ba      	ldrb	r2, [r7, #6]
 8002e48:	7b3b      	ldrb	r3, [r7, #12]
 8002e4a:	1ad2      	subs	r2, r2, r3
 8002e4c:	793b      	ldrb	r3, [r7, #4]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d105      	bne.n	8002e5e <ssd1331_display_char+0xae>
				chYpos = chYpos0;
 8002e52:	7b3b      	ldrb	r3, [r7, #12]
 8002e54:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	71fb      	strb	r3, [r7, #7]
				break;
 8002e5c:	e005      	b.n	8002e6a <ssd1331_display_char+0xba>
        for (j = 0; j < 8; j ++) {
 8002e5e:	7bbb      	ldrb	r3, [r7, #14]
 8002e60:	3301      	adds	r3, #1
 8002e62:	73bb      	strb	r3, [r7, #14]
 8002e64:	7bbb      	ldrb	r3, [r7, #14]
 8002e66:	2b07      	cmp	r3, #7
 8002e68:	d9dd      	bls.n	8002e26 <ssd1331_display_char+0x76>
    for (i = 0; i < chSize; i ++) {   
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
 8002e70:	7bfa      	ldrb	r2, [r7, #15]
 8002e72:	793b      	ldrb	r3, [r7, #4]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d3b5      	bcc.n	8002de4 <ssd1331_display_char+0x34>
 8002e78:	e000      	b.n	8002e7c <ssd1331_display_char+0xcc>
		return;
 8002e7a:	bf00      	nop
			}
		}  	 
    } 
}
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd90      	pop	{r4, r7, pc}
 8002e82:	bf00      	nop
 8002e84:	08003c70 	.word	0x08003c70
 8002e88:	080040e4 	.word	0x080040e4

08002e8c <_pow>:

static uint32_t _pow(uint8_t m, uint8_t n)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	460a      	mov	r2, r1
 8002e96:	71fb      	strb	r3, [r7, #7]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	60fb      	str	r3, [r7, #12]
	
	while(n --) result *= m;    
 8002ea0:	e004      	b.n	8002eac <_pow+0x20>
 8002ea2:	79fa      	ldrb	r2, [r7, #7]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	79bb      	ldrb	r3, [r7, #6]
 8002eae:	1e5a      	subs	r2, r3, #1
 8002eb0:	71ba      	strb	r2, [r7, #6]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f5      	bne.n	8002ea2 <_pow+0x16>
	return result;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <ssd1331_display_num>:


void ssd1331_display_num(uint8_t chXpos, uint8_t chYpos, uint32_t chNum, uint8_t chLen, uint8_t chSize, uint16_t hwColor)
{         	
 8002ec4:	b590      	push	{r4, r7, lr}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	603a      	str	r2, [r7, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	71bb      	strb	r3, [r7, #6]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t chTemp, chShow = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	73bb      	strb	r3, [r7, #14]

	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	2b5f      	cmp	r3, #95	; 0x5f
 8002ee2:	d85e      	bhi.n	8002fa2 <ssd1331_display_num+0xde>
 8002ee4:	79bb      	ldrb	r3, [r7, #6]
 8002ee6:	2b3f      	cmp	r3, #63	; 0x3f
 8002ee8:	d85b      	bhi.n	8002fa2 <ssd1331_display_num+0xde>
		return;
	}
	
	for(i = 0; i < chLen; i ++) {
 8002eea:	2300      	movs	r3, #0
 8002eec:	73fb      	strb	r3, [r7, #15]
 8002eee:	e053      	b.n	8002f98 <ssd1331_display_num+0xd4>
		chTemp = (chNum / _pow(10, chLen - i - 1)) % 10;
 8002ef0:	797a      	ldrb	r2, [r7, #5]
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	4619      	mov	r1, r3
 8002efe:	200a      	movs	r0, #10
 8002f00:	f7ff ffc4 	bl	8002e8c <_pow>
 8002f04:	4602      	mov	r2, r0
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f0c:	4b27      	ldr	r3, [pc, #156]	; (8002fac <ssd1331_display_num+0xe8>)
 8002f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8002f12:	08da      	lsrs	r2, r3, #3
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	1aca      	subs	r2, r1, r3
 8002f1e:	4613      	mov	r3, r2
 8002f20:	737b      	strb	r3, [r7, #13]
		if(chShow == 0 && i < (chLen - 1)) {
 8002f22:	7bbb      	ldrb	r3, [r7, #14]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d11e      	bne.n	8002f66 <ssd1331_display_num+0xa2>
 8002f28:	7bfa      	ldrb	r2, [r7, #15]
 8002f2a:	797b      	ldrb	r3, [r7, #5]
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	da19      	bge.n	8002f66 <ssd1331_display_num+0xa2>
			if(chTemp == 0) {
 8002f32:	7b7b      	ldrb	r3, [r7, #13]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d114      	bne.n	8002f62 <ssd1331_display_num+0x9e>
				ssd1331_display_char(chXpos + (chSize / 2) * i, chYpos, ' ', chSize, hwColor);
 8002f38:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f3c:	085b      	lsrs	r3, r3, #1
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	fb12 f303 	smulbb	r3, r2, r3
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	b2d8      	uxtb	r0, r3
 8002f4e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f52:	79b9      	ldrb	r1, [r7, #6]
 8002f54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f7ff ff28 	bl	8002db0 <ssd1331_display_char>
				continue;
 8002f60:	e017      	b.n	8002f92 <ssd1331_display_num+0xce>
			} else {
				chShow = 1;
 8002f62:	2301      	movs	r3, #1
 8002f64:	73bb      	strb	r3, [r7, #14]
			}	 
		}
	 	ssd1331_display_char(chXpos + (chSize / 2) * i, chYpos, chTemp + '0', chSize, hwColor); 
 8002f66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f6a:	085b      	lsrs	r3, r3, #1
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	7bfa      	ldrb	r2, [r7, #15]
 8002f70:	fb12 f303 	smulbb	r3, r2, r3
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	4413      	add	r3, r2
 8002f7a:	b2d8      	uxtb	r0, r3
 8002f7c:	7b7b      	ldrb	r3, [r7, #13]
 8002f7e:	3330      	adds	r3, #48	; 0x30
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	f897 4020 	ldrb.w	r4, [r7, #32]
 8002f86:	79b9      	ldrb	r1, [r7, #6]
 8002f88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	4623      	mov	r3, r4
 8002f8e:	f7ff ff0f 	bl	8002db0 <ssd1331_display_char>
	for(i = 0; i < chLen; i ++) {
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	3301      	adds	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
 8002f98:	7bfa      	ldrb	r2, [r7, #15]
 8002f9a:	797b      	ldrb	r3, [r7, #5]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d3a7      	bcc.n	8002ef0 <ssd1331_display_num+0x2c>
 8002fa0:	e000      	b.n	8002fa4 <ssd1331_display_num+0xe0>
		return;
 8002fa2:	bf00      	nop
	}
} 
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd90      	pop	{r4, r7, pc}
 8002faa:	bf00      	nop
 8002fac:	cccccccd 	.word	0xcccccccd

08002fb0 <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen 
  *         
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const uint8_t *pchString, uint8_t chSize, uint16_t hwColor)
{
 8002fb0:	b590      	push	{r4, r7, lr}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	603a      	str	r2, [r7, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4603      	mov	r3, r0
 8002fbc:	71fb      	strb	r3, [r7, #7]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	71bb      	strb	r3, [r7, #6]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	2b5f      	cmp	r3, #95	; 0x5f
 8002fca:	d836      	bhi.n	800303a <ssd1331_display_string+0x8a>
 8002fcc:	79bb      	ldrb	r3, [r7, #6]
 8002fce:	2b3f      	cmp	r3, #63	; 0x3f
 8002fd0:	d833      	bhi.n	800303a <ssd1331_display_string+0x8a>
		return;
	}
	
    while (*pchString != '\0') {       
 8002fd2:	e02d      	b.n	8003030 <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 8002fd4:	79fa      	ldrb	r2, [r7, #7]
 8002fd6:	797b      	ldrb	r3, [r7, #5]
 8002fd8:	085b      	lsrs	r3, r3, #1
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	dd12      	ble.n	800300a <ssd1331_display_string+0x5a>
			chXpos = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 8002fe8:	79ba      	ldrb	r2, [r7, #6]
 8002fea:	797b      	ldrb	r3, [r7, #5]
 8002fec:	4413      	add	r3, r2
 8002fee:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 8002ff0:	79ba      	ldrb	r2, [r7, #6]
 8002ff2:	797b      	ldrb	r3, [r7, #5]
 8002ff4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	dd06      	ble.n	800300a <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	71fb      	strb	r3, [r7, #7]
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 8003004:	2000      	movs	r0, #0
 8003006:	f000 f81c 	bl	8003042 <ssd1331_clear_screen>
			}
		}
		
        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	781a      	ldrb	r2, [r3, #0]
 800300e:	797c      	ldrb	r4, [r7, #5]
 8003010:	79b9      	ldrb	r1, [r7, #6]
 8003012:	79f8      	ldrb	r0, [r7, #7]
 8003014:	8b3b      	ldrh	r3, [r7, #24]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	4623      	mov	r3, r4
 800301a:	f7ff fec9 	bl	8002db0 <ssd1331_display_char>
        chXpos += chSize / 2;
 800301e:	797b      	ldrb	r3, [r7, #5]
 8003020:	085b      	lsrs	r3, r3, #1
 8003022:	b2da      	uxtb	r2, r3
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	4413      	add	r3, r2
 8003028:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	3301      	adds	r3, #1
 800302e:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {       
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1cd      	bne.n	8002fd4 <ssd1331_display_string+0x24>
 8003038:	e000      	b.n	800303c <ssd1331_display_string+0x8c>
		return;
 800303a:	bf00      	nop
    } 
}
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	bd90      	pop	{r4, r7, pc}

08003042 <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)  
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	4603      	mov	r3, r0
 800304a:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	
	for(i = 0; i < OLED_HEIGHT; i ++){
 800304c:	2300      	movs	r3, #0
 800304e:	81fb      	strh	r3, [r7, #14]
 8003050:	e013      	b.n	800307a <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 8003052:	2300      	movs	r3, #0
 8003054:	81bb      	strh	r3, [r7, #12]
 8003056:	e00a      	b.n	800306e <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 8003058:	89bb      	ldrh	r3, [r7, #12]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	89fa      	ldrh	r2, [r7, #14]
 800305e:	b2d1      	uxtb	r1, r2
 8003060:	88fa      	ldrh	r2, [r7, #6]
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff fe68 	bl	8002d38 <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 8003068:	89bb      	ldrh	r3, [r7, #12]
 800306a:	3301      	adds	r3, #1
 800306c:	81bb      	strh	r3, [r7, #12]
 800306e:	89bb      	ldrh	r3, [r7, #12]
 8003070:	2b5f      	cmp	r3, #95	; 0x5f
 8003072:	d9f1      	bls.n	8003058 <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 8003074:	89fb      	ldrh	r3, [r7, #14]
 8003076:	3301      	adds	r3, #1
 8003078:	81fb      	strh	r3, [r7, #14]
 800307a:	89fb      	ldrh	r3, [r7, #14]
 800307c:	2b3f      	cmp	r3, #63	; 0x3f
 800307e:	d9e8      	bls.n	8003052 <ssd1331_clear_screen+0x10>
		}
	}
}
 8003080:	bf00      	nop
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <ssd1331_init>:


void ssd1331_init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
	__SSD1331_RES_SET();  //RES set
 800308c:	2201      	movs	r2, #1
 800308e:	2180      	movs	r1, #128	; 0x80
 8003090:	4852      	ldr	r0, [pc, #328]	; (80031dc <ssd1331_init+0x154>)
 8003092:	f7fe ff77 	bl	8001f84 <HAL_GPIO_WritePin>
	__SSD1331_CS_SET();
 8003096:	2201      	movs	r2, #1
 8003098:	2120      	movs	r1, #32
 800309a:	4851      	ldr	r0, [pc, #324]	; (80031e0 <ssd1331_init+0x158>)
 800309c:	f7fe ff72 	bl	8001f84 <HAL_GPIO_WritePin>
	
	ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 80030a0:	2100      	movs	r1, #0
 80030a2:	20ae      	movs	r0, #174	; 0xae
 80030a4:	f7ff fe12 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 80030a8:	2100      	movs	r1, #0
 80030aa:	2081      	movs	r0, #129	; 0x81
 80030ac:	f7ff fe0e 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 80030b0:	2100      	movs	r1, #0
 80030b2:	20ff      	movs	r0, #255	; 0xff
 80030b4:	f7ff fe0a 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 80030b8:	2100      	movs	r1, #0
 80030ba:	2082      	movs	r0, #130	; 0x82
 80030bc:	f7ff fe06 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 80030c0:	2100      	movs	r1, #0
 80030c2:	20ff      	movs	r0, #255	; 0xff
 80030c4:	f7ff fe02 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 80030c8:	2100      	movs	r1, #0
 80030ca:	2083      	movs	r0, #131	; 0x83
 80030cc:	f7ff fdfe 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 80030d0:	2100      	movs	r1, #0
 80030d2:	20ff      	movs	r0, #255	; 0xff
 80030d4:	f7ff fdfa 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 80030d8:	2100      	movs	r1, #0
 80030da:	2087      	movs	r0, #135	; 0x87
 80030dc:	f7ff fdf6 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 80030e0:	2100      	movs	r1, #0
 80030e2:	2006      	movs	r0, #6
 80030e4:	f7ff fdf2 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 80030e8:	2100      	movs	r1, #0
 80030ea:	208a      	movs	r0, #138	; 0x8a
 80030ec:	f7ff fdee 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 80030f0:	2100      	movs	r1, #0
 80030f2:	2064      	movs	r0, #100	; 0x64
 80030f4:	f7ff fdea 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 80030f8:	2100      	movs	r1, #0
 80030fa:	208b      	movs	r0, #139	; 0x8b
 80030fc:	f7ff fde6 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 8003100:	2100      	movs	r1, #0
 8003102:	2078      	movs	r0, #120	; 0x78
 8003104:	f7ff fde2 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 8003108:	2100      	movs	r1, #0
 800310a:	208c      	movs	r0, #140	; 0x8c
 800310c:	f7ff fdde 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8003110:	2100      	movs	r1, #0
 8003112:	2064      	movs	r0, #100	; 0x64
 8003114:	f7ff fdda 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 8003118:	2100      	movs	r1, #0
 800311a:	20a0      	movs	r0, #160	; 0xa0
 800311c:	f7ff fdd6 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72              
 8003120:	2100      	movs	r1, #0
 8003122:	2072      	movs	r0, #114	; 0x72
 8003124:	f7ff fdd2 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 8003128:	2100      	movs	r1, #0
 800312a:	20a1      	movs	r0, #161	; 0xa1
 800312c:	f7ff fdce 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(0x0, SSD1331_CMD);
 8003130:	2100      	movs	r1, #0
 8003132:	2000      	movs	r0, #0
 8003134:	f7ff fdca 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 8003138:	2100      	movs	r1, #0
 800313a:	20a2      	movs	r0, #162	; 0xa2
 800313c:	f7ff fdc6 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(0x0, SSD1331_CMD);
 8003140:	2100      	movs	r1, #0
 8003142:	2000      	movs	r0, #0
 8003144:	f7ff fdc2 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 8003148:	2100      	movs	r1, #0
 800314a:	20a4      	movs	r0, #164	; 0xa4
 800314c:	f7ff fdbe 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 8003150:	2100      	movs	r1, #0
 8003152:	20a8      	movs	r0, #168	; 0xa8
 8003154:	f7ff fdba 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(0x3F, SSD1331_CMD);
 8003158:	2100      	movs	r1, #0
 800315a:	203f      	movs	r0, #63	; 0x3f
 800315c:	f7ff fdb6 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 8003160:	2100      	movs	r1, #0
 8003162:	20ad      	movs	r0, #173	; 0xad
 8003164:	f7ff fdb2 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(0x8E, SSD1331_CMD);
 8003168:	2100      	movs	r1, #0
 800316a:	208e      	movs	r0, #142	; 0x8e
 800316c:	f7ff fdae 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 8003170:	2100      	movs	r1, #0
 8003172:	20b0      	movs	r0, #176	; 0xb0
 8003174:	f7ff fdaa 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 8003178:	2100      	movs	r1, #0
 800317a:	2000      	movs	r0, #0
 800317c:	f7ff fda6 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 8003180:	2100      	movs	r1, #0
 8003182:	20b1      	movs	r0, #177	; 0xb1
 8003184:	f7ff fda2 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 8003188:	2100      	movs	r1, #0
 800318a:	2031      	movs	r0, #49	; 0x31
 800318c:	f7ff fd9e 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 8003190:	2100      	movs	r1, #0
 8003192:	20b3      	movs	r0, #179	; 0xb3
 8003194:	f7ff fd9a 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(0xF0, SSD1331_CMD);
 8003198:	2100      	movs	r1, #0
 800319a:	20f0      	movs	r0, #240	; 0xf0
 800319c:	f7ff fd96 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 80031a0:	2100      	movs	r1, #0
 80031a2:	20bb      	movs	r0, #187	; 0xbb
 80031a4:	f7ff fd92 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(0x3A, SSD1331_CMD);
 80031a8:	2100      	movs	r1, #0
 80031aa:	203a      	movs	r0, #58	; 0x3a
 80031ac:	f7ff fd8e 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 80031b0:	2100      	movs	r1, #0
 80031b2:	20be      	movs	r0, #190	; 0xbe
 80031b4:	f7ff fd8a 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(0x3E, SSD1331_CMD);
 80031b8:	2100      	movs	r1, #0
 80031ba:	203e      	movs	r0, #62	; 0x3e
 80031bc:	f7ff fd86 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 80031c0:	2100      	movs	r1, #0
 80031c2:	202e      	movs	r0, #46	; 0x2e
 80031c4:	f7ff fd82 	bl	8002ccc <ssd1331_write_byte>
    ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 80031c8:	2100      	movs	r1, #0
 80031ca:	20af      	movs	r0, #175	; 0xaf
 80031cc:	f7ff fd7e 	bl	8002ccc <ssd1331_write_byte>

    //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
    ssd1331_clear_screen(0x0000);
 80031d0:	2000      	movs	r0, #0
 80031d2:	f7ff ff36 	bl	8003042 <ssd1331_clear_screen>
}
 80031d6:	bf00      	nop
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
 80031e0:	40020800 	.word	0x40020800

080031e4 <HAL_ADC_ConvCpltCallback>:
static void MX_ADC1_Init(void);
static void MX_ADC2_Init(void);
/* USER CODE BEGIN PFP */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]


	adc_avg=(temp_buf[0]+temp_buf[2]+temp_buf[4]+temp_buf[6]+temp_buf[8])/5;
 80031ec:	4b19      	ldr	r3, [pc, #100]	; (8003254 <HAL_ADC_ConvCpltCallback+0x70>)
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	461a      	mov	r2, r3
 80031f2:	4b18      	ldr	r3, [pc, #96]	; (8003254 <HAL_ADC_ConvCpltCallback+0x70>)
 80031f4:	889b      	ldrh	r3, [r3, #4]
 80031f6:	4413      	add	r3, r2
 80031f8:	4a16      	ldr	r2, [pc, #88]	; (8003254 <HAL_ADC_ConvCpltCallback+0x70>)
 80031fa:	8912      	ldrh	r2, [r2, #8]
 80031fc:	4413      	add	r3, r2
 80031fe:	4a15      	ldr	r2, [pc, #84]	; (8003254 <HAL_ADC_ConvCpltCallback+0x70>)
 8003200:	8992      	ldrh	r2, [r2, #12]
 8003202:	4413      	add	r3, r2
 8003204:	4a13      	ldr	r2, [pc, #76]	; (8003254 <HAL_ADC_ConvCpltCallback+0x70>)
 8003206:	8a12      	ldrh	r2, [r2, #16]
 8003208:	4413      	add	r3, r2
 800320a:	4a13      	ldr	r2, [pc, #76]	; (8003258 <HAL_ADC_ConvCpltCallback+0x74>)
 800320c:	fb82 1203 	smull	r1, r2, r2, r3
 8003210:	1052      	asrs	r2, r2, #1
 8003212:	17db      	asrs	r3, r3, #31
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	b29a      	uxth	r2, r3
 8003218:	4b10      	ldr	r3, [pc, #64]	; (800325c <HAL_ADC_ConvCpltCallback+0x78>)
 800321a:	801a      	strh	r2, [r3, #0]
	temp = ((adc_avg*3*100)/4095);
 800321c:	4b0f      	ldr	r3, [pc, #60]	; (800325c <HAL_ADC_ConvCpltCallback+0x78>)
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003226:	fb03 f302 	mul.w	r3, r3, r2
 800322a:	4a0d      	ldr	r2, [pc, #52]	; (8003260 <HAL_ADC_ConvCpltCallback+0x7c>)
 800322c:	fb82 1203 	smull	r1, r2, r2, r3
 8003230:	441a      	add	r2, r3
 8003232:	12d2      	asrs	r2, r2, #11
 8003234:	17db      	asrs	r3, r3, #31
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	ee07 3a90 	vmov	s15, r3
 800323c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003240:	4b08      	ldr	r3, [pc, #32]	; (8003264 <HAL_ADC_ConvCpltCallback+0x80>)
 8003242:	edc3 7a00 	vstr	s15, [r3]

}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20000184 	.word	0x20000184
 8003258:	66666667 	.word	0x66666667
 800325c:	20000082 	.word	0x20000082
 8003260:	80080081 	.word	0x80080081
 8003264:	20000030 	.word	0x20000030

08003268 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	80fb      	strh	r3, [r7, #6]
 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8003272:	2101      	movs	r1, #1
 8003274:	480c      	ldr	r0, [pc, #48]	; (80032a8 <HAL_GPIO_EXTI_Callback+0x40>)
 8003276:	f7fe fe6d 	bl	8001f54 <HAL_GPIO_ReadPin>
 800327a:	4603      	mov	r3, r0
 800327c:	2b01      	cmp	r3, #1
 800327e:	d10e      	bne.n	800329e <HAL_GPIO_EXTI_Callback+0x36>
 {
	 if(switcher==ILOSC_CZUJNIKOW-1)switcher=0;
 8003280:	2302      	movs	r3, #2
 8003282:	1e5a      	subs	r2, r3, #1
 8003284:	4b09      	ldr	r3, [pc, #36]	; (80032ac <HAL_GPIO_EXTI_Callback+0x44>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d103      	bne.n	8003294 <HAL_GPIO_EXTI_Callback+0x2c>
 800328c:	4b07      	ldr	r3, [pc, #28]	; (80032ac <HAL_GPIO_EXTI_Callback+0x44>)
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
	 else switcher++;

 }
}
 8003292:	e004      	b.n	800329e <HAL_GPIO_EXTI_Callback+0x36>
	 else switcher++;
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_GPIO_EXTI_Callback+0x44>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3301      	adds	r3, #1
 800329a:	4a04      	ldr	r2, [pc, #16]	; (80032ac <HAL_GPIO_EXTI_Callback+0x44>)
 800329c:	6013      	str	r3, [r2, #0]
}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40020000 	.word	0x40020000
 80032ac:	2000002c 	.word	0x2000002c

080032b0 <ADC_avg>:
float ADC_avg()
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
	float adc_temp=0;
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]
	float adc=0;
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	60bb      	str	r3, [r7, #8]
	if(HAL_ADC_PollForConversion(&hadc2, 10) == HAL_OK)
 80032c2:	210a      	movs	r1, #10
 80032c4:	4819      	ldr	r0, [pc, #100]	; (800332c <ADC_avg+0x7c>)
 80032c6:	f7fd fa9d 	bl	8000804 <HAL_ADC_PollForConversion>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d108      	bne.n	80032e2 <ADC_avg+0x32>
		   		  {
		   		   adc = HAL_ADC_GetValue(&hadc2);
 80032d0:	4816      	ldr	r0, [pc, #88]	; (800332c <ADC_avg+0x7c>)
 80032d2:	f7fd fd4f 	bl	8000d74 <HAL_ADC_GetValue>
 80032d6:	ee07 0a90 	vmov	s15, r0
 80032da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032de:	edc7 7a02 	vstr	s15, [r7, #8]
		   		  }
		   for(int i=0;i<10;i++){
 80032e2:	2300      	movs	r3, #0
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	e00d      	b.n	8003304 <ADC_avg+0x54>
			   adc_temp=adc_temp+adc;
 80032e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80032ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80032f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f4:	edc7 7a03 	vstr	s15, [r7, #12]
			   HAL_Delay(200);
 80032f8:	20c8      	movs	r0, #200	; 0xc8
 80032fa:	f7fd f957 	bl	80005ac <HAL_Delay>
		   for(int i=0;i<10;i++){
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3301      	adds	r3, #1
 8003302:	607b      	str	r3, [r7, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b09      	cmp	r3, #9
 8003308:	ddee      	ble.n	80032e8 <ADC_avg+0x38>

		   }
		   return adc_temp=adc_temp/10;
 800330a:	ed97 7a03 	vldr	s14, [r7, #12]
 800330e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003312:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003316:	edc7 7a03 	vstr	s15, [r7, #12]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	ee07 3a90 	vmov	s15, r3
}
 8003320:	eeb0 0a67 	vmov.f32	s0, s15
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20000038 	.word	0x20000038

08003330 <wyswietlanie>:
void wyswietlanie()
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af02      	add	r7, sp, #8
	ssd1331_clear_screen(WHITE);
 8003336:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800333a:	f7ff fe82 	bl	8003042 <ssd1331_clear_screen>
	switch(switcher)
 800333e:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <wyswietlanie+0x88>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <wyswietlanie+0x1c>
 8003346:	2b01      	cmp	r3, #1
 8003348:	d019      	beq.n	800337e <wyswietlanie+0x4e>
		ssd1331_display_string(0,0,"Temperatura: ",FONT_1206,BLACK);
		ssd1331_display_num (33,21,temp,2,FONT_1608,BLACK);
		break;
	}

}
 800334a:	e031      	b.n	80033b0 <wyswietlanie+0x80>
		ssd1331_display_string(0,0,"Jakosc powietrza: ",FONT_1206,BLACK);
 800334c:	2300      	movs	r3, #0
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	230c      	movs	r3, #12
 8003352:	4a1a      	ldr	r2, [pc, #104]	; (80033bc <wyswietlanie+0x8c>)
 8003354:	2100      	movs	r1, #0
 8003356:	2000      	movs	r0, #0
 8003358:	f7ff fe2a 	bl	8002fb0 <ssd1331_display_string>
		ssd1331_display_num (33,21,air_quality_val,4,FONT_1608,BLACK);
 800335c:	4b18      	ldr	r3, [pc, #96]	; (80033c0 <wyswietlanie+0x90>)
 800335e:	edd3 7a00 	vldr	s15, [r3]
 8003362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003366:	2300      	movs	r3, #0
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	2310      	movs	r3, #16
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	2304      	movs	r3, #4
 8003370:	ee17 2a90 	vmov	r2, s15
 8003374:	2115      	movs	r1, #21
 8003376:	2021      	movs	r0, #33	; 0x21
 8003378:	f7ff fda4 	bl	8002ec4 <ssd1331_display_num>
		break;
 800337c:	e018      	b.n	80033b0 <wyswietlanie+0x80>
		ssd1331_display_string(0,0,"Temperatura: ",FONT_1206,BLACK);
 800337e:	2300      	movs	r3, #0
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	230c      	movs	r3, #12
 8003384:	4a0f      	ldr	r2, [pc, #60]	; (80033c4 <wyswietlanie+0x94>)
 8003386:	2100      	movs	r1, #0
 8003388:	2000      	movs	r0, #0
 800338a:	f7ff fe11 	bl	8002fb0 <ssd1331_display_string>
		ssd1331_display_num (33,21,temp,2,FONT_1608,BLACK);
 800338e:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <wyswietlanie+0x98>)
 8003390:	edd3 7a00 	vldr	s15, [r3]
 8003394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003398:	2300      	movs	r3, #0
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	2310      	movs	r3, #16
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	2302      	movs	r3, #2
 80033a2:	ee17 2a90 	vmov	r2, s15
 80033a6:	2115      	movs	r1, #21
 80033a8:	2021      	movs	r0, #33	; 0x21
 80033aa:	f7ff fd8b 	bl	8002ec4 <ssd1331_display_num>
		break;
 80033ae:	bf00      	nop
}
 80033b0:	bf00      	nop
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	2000002c 	.word	0x2000002c
 80033bc:	08003c44 	.word	0x08003c44
 80033c0:	20000028 	.word	0x20000028
 80033c4:	08003c58 	.word	0x08003c58
 80033c8:	20000030 	.word	0x20000030

080033cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033d0:	f7fd f87a 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033d4:	f000 f82e 	bl	8003434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033d8:	f000 f990 	bl	80036fc <MX_GPIO_Init>
  MX_DMA_Init();
 80033dc:	f000 f96e 	bl	80036bc <MX_DMA_Init>
  MX_SPI1_Init();
 80033e0:	f000 f936 	bl	8003650 <MX_SPI1_Init>
  MX_ADC1_Init();
 80033e4:	f000 f890 	bl	8003508 <MX_ADC1_Init>
  MX_ADC2_Init();
 80033e8:	f000 f8e0 	bl	80035ac <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */



  HAL_ADC_Start_DMA (&hadc1, temp_buf, 5);
 80033ec:	2205      	movs	r2, #5
 80033ee:	490d      	ldr	r1, [pc, #52]	; (8003424 <main+0x58>)
 80033f0:	480d      	ldr	r0, [pc, #52]	; (8003428 <main+0x5c>)
 80033f2:	f7fd fbcd 	bl	8000b90 <HAL_ADC_Start_DMA>
  //HAL_Delay(500);
ssd1331_init();
 80033f6:	f7ff fe47 	bl	8003088 <ssd1331_init>
ssd1331_clear_screen(WHITE);
 80033fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80033fe:	f7ff fe20 	bl	8003042 <ssd1331_clear_screen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1)
  {
	   HAL_ADC_Start(&hadc2);
 8003402:	480a      	ldr	r0, [pc, #40]	; (800342c <main+0x60>)
 8003404:	f7fd f938 	bl	8000678 <HAL_ADC_Start>
	   air_quality_val=ADC_avg();
 8003408:	f7ff ff52 	bl	80032b0 <ADC_avg>
 800340c:	eef0 7a40 	vmov.f32	s15, s0
 8003410:	4b07      	ldr	r3, [pc, #28]	; (8003430 <main+0x64>)
 8003412:	edc3 7a00 	vstr	s15, [r3]

	   wyswietlanie();
 8003416:	f7ff ff8b 	bl	8003330 <wyswietlanie>

		  HAL_Delay(3000);
 800341a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800341e:	f7fd f8c5 	bl	80005ac <HAL_Delay>
	   HAL_ADC_Start(&hadc2);
 8003422:	e7ee      	b.n	8003402 <main+0x36>
 8003424:	20000184 	.word	0x20000184
 8003428:	20000084 	.word	0x20000084
 800342c:	20000038 	.word	0x20000038
 8003430:	20000028 	.word	0x20000028

08003434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b094      	sub	sp, #80	; 0x50
 8003438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800343a:	f107 0320 	add.w	r3, r7, #32
 800343e:	2230      	movs	r2, #48	; 0x30
 8003440:	2100      	movs	r1, #0
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fbea 	bl	8003c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003448:	f107 030c 	add.w	r3, r7, #12
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	60da      	str	r2, [r3, #12]
 8003456:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003458:	2300      	movs	r3, #0
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	4b28      	ldr	r3, [pc, #160]	; (8003500 <SystemClock_Config+0xcc>)
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	4a27      	ldr	r2, [pc, #156]	; (8003500 <SystemClock_Config+0xcc>)
 8003462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003466:	6413      	str	r3, [r2, #64]	; 0x40
 8003468:	4b25      	ldr	r3, [pc, #148]	; (8003500 <SystemClock_Config+0xcc>)
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003474:	2300      	movs	r3, #0
 8003476:	607b      	str	r3, [r7, #4]
 8003478:	4b22      	ldr	r3, [pc, #136]	; (8003504 <SystemClock_Config+0xd0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a21      	ldr	r2, [pc, #132]	; (8003504 <SystemClock_Config+0xd0>)
 800347e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	4b1f      	ldr	r3, [pc, #124]	; (8003504 <SystemClock_Config+0xd0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800348c:	607b      	str	r3, [r7, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003490:	2301      	movs	r3, #1
 8003492:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800349a:	2302      	movs	r3, #2
 800349c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800349e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80034a4:	2304      	movs	r3, #4
 80034a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80034a8:	23a8      	movs	r3, #168	; 0xa8
 80034aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034ac:	2302      	movs	r3, #2
 80034ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80034b0:	2304      	movs	r3, #4
 80034b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034b4:	f107 0320 	add.w	r3, r7, #32
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fe fd95 	bl	8001fe8 <HAL_RCC_OscConfig>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80034c4:	f000 f9c8 	bl	8003858 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034c8:	230f      	movs	r3, #15
 80034ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034cc:	2302      	movs	r3, #2
 80034ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80034d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80034d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80034da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80034e0:	f107 030c 	add.w	r3, r7, #12
 80034e4:	2105      	movs	r1, #5
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe ffee 	bl	80024c8 <HAL_RCC_ClockConfig>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80034f2:	f000 f9b1 	bl	8003858 <Error_Handler>
  }
}
 80034f6:	bf00      	nop
 80034f8:	3750      	adds	r7, #80	; 0x50
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40023800 	.word	0x40023800
 8003504:	40007000 	.word	0x40007000

08003508 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800350e:	463b      	mov	r3, r7
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	605a      	str	r2, [r3, #4]
 8003516:	609a      	str	r2, [r3, #8]
 8003518:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800351a:	4b21      	ldr	r3, [pc, #132]	; (80035a0 <MX_ADC1_Init+0x98>)
 800351c:	4a21      	ldr	r2, [pc, #132]	; (80035a4 <MX_ADC1_Init+0x9c>)
 800351e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003520:	4b1f      	ldr	r3, [pc, #124]	; (80035a0 <MX_ADC1_Init+0x98>)
 8003522:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003526:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003528:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <MX_ADC1_Init+0x98>)
 800352a:	2200      	movs	r2, #0
 800352c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800352e:	4b1c      	ldr	r3, [pc, #112]	; (80035a0 <MX_ADC1_Init+0x98>)
 8003530:	2201      	movs	r2, #1
 8003532:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003534:	4b1a      	ldr	r3, [pc, #104]	; (80035a0 <MX_ADC1_Init+0x98>)
 8003536:	2201      	movs	r2, #1
 8003538:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800353a:	4b19      	ldr	r3, [pc, #100]	; (80035a0 <MX_ADC1_Init+0x98>)
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003542:	4b17      	ldr	r3, [pc, #92]	; (80035a0 <MX_ADC1_Init+0x98>)
 8003544:	2200      	movs	r2, #0
 8003546:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003548:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <MX_ADC1_Init+0x98>)
 800354a:	4a17      	ldr	r2, [pc, #92]	; (80035a8 <MX_ADC1_Init+0xa0>)
 800354c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800354e:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <MX_ADC1_Init+0x98>)
 8003550:	2200      	movs	r2, #0
 8003552:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003554:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <MX_ADC1_Init+0x98>)
 8003556:	2201      	movs	r2, #1
 8003558:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800355a:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <MX_ADC1_Init+0x98>)
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003562:	4b0f      	ldr	r3, [pc, #60]	; (80035a0 <MX_ADC1_Init+0x98>)
 8003564:	2201      	movs	r2, #1
 8003566:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003568:	480d      	ldr	r0, [pc, #52]	; (80035a0 <MX_ADC1_Init+0x98>)
 800356a:	f7fd f841 	bl	80005f0 <HAL_ADC_Init>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003574:	f000 f970 	bl	8003858 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003578:	2302      	movs	r3, #2
 800357a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800357c:	2301      	movs	r3, #1
 800357e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003580:	2307      	movs	r3, #7
 8003582:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003584:	463b      	mov	r3, r7
 8003586:	4619      	mov	r1, r3
 8003588:	4805      	ldr	r0, [pc, #20]	; (80035a0 <MX_ADC1_Init+0x98>)
 800358a:	f7fd fc1f 	bl	8000dcc <HAL_ADC_ConfigChannel>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003594:	f000 f960 	bl	8003858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003598:	bf00      	nop
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	20000084 	.word	0x20000084
 80035a4:	40012000 	.word	0x40012000
 80035a8:	0f000001 	.word	0x0f000001

080035ac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80035b2:	463b      	mov	r3, r7
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 80035be:	4b21      	ldr	r3, [pc, #132]	; (8003644 <MX_ADC2_Init+0x98>)
 80035c0:	4a21      	ldr	r2, [pc, #132]	; (8003648 <MX_ADC2_Init+0x9c>)
 80035c2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80035c4:	4b1f      	ldr	r3, [pc, #124]	; (8003644 <MX_ADC2_Init+0x98>)
 80035c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80035ca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80035cc:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <MX_ADC2_Init+0x98>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80035d2:	4b1c      	ldr	r3, [pc, #112]	; (8003644 <MX_ADC2_Init+0x98>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80035d8:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <MX_ADC2_Init+0x98>)
 80035da:	2200      	movs	r2, #0
 80035dc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80035de:	4b19      	ldr	r3, [pc, #100]	; (8003644 <MX_ADC2_Init+0x98>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80035e6:	4b17      	ldr	r3, [pc, #92]	; (8003644 <MX_ADC2_Init+0x98>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80035ec:	4b15      	ldr	r3, [pc, #84]	; (8003644 <MX_ADC2_Init+0x98>)
 80035ee:	4a17      	ldr	r2, [pc, #92]	; (800364c <MX_ADC2_Init+0xa0>)
 80035f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80035f2:	4b14      	ldr	r3, [pc, #80]	; (8003644 <MX_ADC2_Init+0x98>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80035f8:	4b12      	ldr	r3, [pc, #72]	; (8003644 <MX_ADC2_Init+0x98>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80035fe:	4b11      	ldr	r3, [pc, #68]	; (8003644 <MX_ADC2_Init+0x98>)
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003606:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <MX_ADC2_Init+0x98>)
 8003608:	2201      	movs	r2, #1
 800360a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800360c:	480d      	ldr	r0, [pc, #52]	; (8003644 <MX_ADC2_Init+0x98>)
 800360e:	f7fc ffef 	bl	80005f0 <HAL_ADC_Init>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003618:	f000 f91e 	bl	8003858 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800361c:	2301      	movs	r3, #1
 800361e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003620:	2301      	movs	r3, #1
 8003622:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003624:	2300      	movs	r3, #0
 8003626:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003628:	463b      	mov	r3, r7
 800362a:	4619      	mov	r1, r3
 800362c:	4805      	ldr	r0, [pc, #20]	; (8003644 <MX_ADC2_Init+0x98>)
 800362e:	f7fd fbcd 	bl	8000dcc <HAL_ADC_ConfigChannel>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003638:	f000 f90e 	bl	8003858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800363c:	bf00      	nop
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20000038 	.word	0x20000038
 8003648:	40012100 	.word	0x40012100
 800364c:	0f000001 	.word	0x0f000001

08003650 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003654:	4b17      	ldr	r3, [pc, #92]	; (80036b4 <MX_SPI1_Init+0x64>)
 8003656:	4a18      	ldr	r2, [pc, #96]	; (80036b8 <MX_SPI1_Init+0x68>)
 8003658:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800365a:	4b16      	ldr	r3, [pc, #88]	; (80036b4 <MX_SPI1_Init+0x64>)
 800365c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003660:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003662:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <MX_SPI1_Init+0x64>)
 8003664:	2200      	movs	r2, #0
 8003666:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003668:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <MX_SPI1_Init+0x64>)
 800366a:	2200      	movs	r2, #0
 800366c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800366e:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <MX_SPI1_Init+0x64>)
 8003670:	2202      	movs	r2, #2
 8003672:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <MX_SPI1_Init+0x64>)
 8003676:	2201      	movs	r2, #1
 8003678:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800367a:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <MX_SPI1_Init+0x64>)
 800367c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003680:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003682:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <MX_SPI1_Init+0x64>)
 8003684:	2200      	movs	r2, #0
 8003686:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003688:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <MX_SPI1_Init+0x64>)
 800368a:	2200      	movs	r2, #0
 800368c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800368e:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <MX_SPI1_Init+0x64>)
 8003690:	2200      	movs	r2, #0
 8003692:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003694:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <MX_SPI1_Init+0x64>)
 8003696:	2200      	movs	r2, #0
 8003698:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800369a:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <MX_SPI1_Init+0x64>)
 800369c:	220a      	movs	r2, #10
 800369e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80036a0:	4804      	ldr	r0, [pc, #16]	; (80036b4 <MX_SPI1_Init+0x64>)
 80036a2:	f7ff f8cf 	bl	8002844 <HAL_SPI_Init>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80036ac:	f000 f8d4 	bl	8003858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80036b0:	bf00      	nop
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	2000012c 	.word	0x2000012c
 80036b8:	40013000 	.word	0x40013000

080036bc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	607b      	str	r3, [r7, #4]
 80036c6:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <MX_DMA_Init+0x3c>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	4a0b      	ldr	r2, [pc, #44]	; (80036f8 <MX_DMA_Init+0x3c>)
 80036cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036d0:	6313      	str	r3, [r2, #48]	; 0x30
 80036d2:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <MX_DMA_Init+0x3c>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036da:	607b      	str	r3, [r7, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80036de:	2200      	movs	r2, #0
 80036e0:	2100      	movs	r1, #0
 80036e2:	2038      	movs	r0, #56	; 0x38
 80036e4:	f7fd fef7 	bl	80014d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80036e8:	2038      	movs	r0, #56	; 0x38
 80036ea:	f7fd ff10 	bl	800150e <HAL_NVIC_EnableIRQ>

}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800

080036fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08a      	sub	sp, #40	; 0x28
 8003700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003702:	f107 0314 	add.w	r3, r7, #20
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	609a      	str	r2, [r3, #8]
 800370e:	60da      	str	r2, [r3, #12]
 8003710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	4b4a      	ldr	r3, [pc, #296]	; (8003840 <MX_GPIO_Init+0x144>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	4a49      	ldr	r2, [pc, #292]	; (8003840 <MX_GPIO_Init+0x144>)
 800371c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003720:	6313      	str	r3, [r2, #48]	; 0x30
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <MX_GPIO_Init+0x144>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	4b43      	ldr	r3, [pc, #268]	; (8003840 <MX_GPIO_Init+0x144>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	4a42      	ldr	r2, [pc, #264]	; (8003840 <MX_GPIO_Init+0x144>)
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	6313      	str	r3, [r2, #48]	; 0x30
 800373e:	4b40      	ldr	r3, [pc, #256]	; (8003840 <MX_GPIO_Init+0x144>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	4b3c      	ldr	r3, [pc, #240]	; (8003840 <MX_GPIO_Init+0x144>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	4a3b      	ldr	r2, [pc, #236]	; (8003840 <MX_GPIO_Init+0x144>)
 8003754:	f043 0304 	orr.w	r3, r3, #4
 8003758:	6313      	str	r3, [r2, #48]	; 0x30
 800375a:	4b39      	ldr	r3, [pc, #228]	; (8003840 <MX_GPIO_Init+0x144>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	607b      	str	r3, [r7, #4]
 800376a:	4b35      	ldr	r3, [pc, #212]	; (8003840 <MX_GPIO_Init+0x144>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	4a34      	ldr	r2, [pc, #208]	; (8003840 <MX_GPIO_Init+0x144>)
 8003770:	f043 0302 	orr.w	r3, r3, #2
 8003774:	6313      	str	r3, [r2, #48]	; 0x30
 8003776:	4b32      	ldr	r3, [pc, #200]	; (8003840 <MX_GPIO_Init+0x144>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	607b      	str	r3, [r7, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	603b      	str	r3, [r7, #0]
 8003786:	4b2e      	ldr	r3, [pc, #184]	; (8003840 <MX_GPIO_Init+0x144>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	4a2d      	ldr	r2, [pc, #180]	; (8003840 <MX_GPIO_Init+0x144>)
 800378c:	f043 0310 	orr.w	r3, r3, #16
 8003790:	6313      	str	r3, [r2, #48]	; 0x30
 8003792:	4b2b      	ldr	r3, [pc, #172]	; (8003840 <MX_GPIO_Init+0x144>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f003 0310 	and.w	r3, r3, #16
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800379e:	2200      	movs	r2, #0
 80037a0:	2120      	movs	r1, #32
 80037a2:	4828      	ldr	r0, [pc, #160]	; (8003844 <MX_GPIO_Init+0x148>)
 80037a4:	f7fe fbee 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80037a8:	2200      	movs	r2, #0
 80037aa:	2102      	movs	r1, #2
 80037ac:	4826      	ldr	r0, [pc, #152]	; (8003848 <MX_GPIO_Init+0x14c>)
 80037ae:	f7fe fbe9 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 80037b2:	2200      	movs	r2, #0
 80037b4:	2180      	movs	r1, #128	; 0x80
 80037b6:	4825      	ldr	r0, [pc, #148]	; (800384c <MX_GPIO_Init+0x150>)
 80037b8:	f7fe fbe4 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80037bc:	2301      	movs	r3, #1
 80037be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80037c0:	4b23      	ldr	r3, [pc, #140]	; (8003850 <MX_GPIO_Init+0x154>)
 80037c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c8:	f107 0314 	add.w	r3, r7, #20
 80037cc:	4619      	mov	r1, r3
 80037ce:	4821      	ldr	r0, [pc, #132]	; (8003854 <MX_GPIO_Init+0x158>)
 80037d0:	f7fe fa26 	bl	8001c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80037d4:	2320      	movs	r3, #32
 80037d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037d8:	2301      	movs	r3, #1
 80037da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e0:	2300      	movs	r3, #0
 80037e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80037e4:	f107 0314 	add.w	r3, r7, #20
 80037e8:	4619      	mov	r1, r3
 80037ea:	4816      	ldr	r0, [pc, #88]	; (8003844 <MX_GPIO_Init+0x148>)
 80037ec:	f7fe fa18 	bl	8001c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DC_Pin */
  GPIO_InitStruct.Pin = DC_Pin;
 80037f0:	2302      	movs	r3, #2
 80037f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037f4:	2301      	movs	r3, #1
 80037f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037fc:	2300      	movs	r3, #0
 80037fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8003800:	f107 0314 	add.w	r3, r7, #20
 8003804:	4619      	mov	r1, r3
 8003806:	4810      	ldr	r0, [pc, #64]	; (8003848 <MX_GPIO_Init+0x14c>)
 8003808:	f7fe fa0a 	bl	8001c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 800380c:	2380      	movs	r3, #128	; 0x80
 800380e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003810:	2301      	movs	r3, #1
 8003812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003814:	2300      	movs	r3, #0
 8003816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003818:	2300      	movs	r3, #0
 800381a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 800381c:	f107 0314 	add.w	r3, r7, #20
 8003820:	4619      	mov	r1, r3
 8003822:	480a      	ldr	r0, [pc, #40]	; (800384c <MX_GPIO_Init+0x150>)
 8003824:	f7fe f9fc 	bl	8001c20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003828:	2200      	movs	r2, #0
 800382a:	2100      	movs	r1, #0
 800382c:	2006      	movs	r0, #6
 800382e:	f7fd fe52 	bl	80014d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003832:	2006      	movs	r0, #6
 8003834:	f7fd fe6b 	bl	800150e <HAL_NVIC_EnableIRQ>

}
 8003838:	bf00      	nop
 800383a:	3728      	adds	r7, #40	; 0x28
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40023800 	.word	0x40023800
 8003844:	40020800 	.word	0x40020800
 8003848:	40020400 	.word	0x40020400
 800384c:	40021000 	.word	0x40021000
 8003850:	10110000 	.word	0x10110000
 8003854:	40020000 	.word	0x40020000

08003858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800385c:	bf00      	nop
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
	...

08003868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	607b      	str	r3, [r7, #4]
 8003872:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <HAL_MspInit+0x4c>)
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	4a0f      	ldr	r2, [pc, #60]	; (80038b4 <HAL_MspInit+0x4c>)
 8003878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800387c:	6453      	str	r3, [r2, #68]	; 0x44
 800387e:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <HAL_MspInit+0x4c>)
 8003880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003886:	607b      	str	r3, [r7, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	603b      	str	r3, [r7, #0]
 800388e:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <HAL_MspInit+0x4c>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	4a08      	ldr	r2, [pc, #32]	; (80038b4 <HAL_MspInit+0x4c>)
 8003894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003898:	6413      	str	r3, [r2, #64]	; 0x40
 800389a:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <HAL_MspInit+0x4c>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40023800 	.word	0x40023800

080038b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08c      	sub	sp, #48	; 0x30
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c0:	f107 031c 	add.w	r3, r7, #28
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	609a      	str	r2, [r3, #8]
 80038cc:	60da      	str	r2, [r3, #12]
 80038ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a4e      	ldr	r2, [pc, #312]	; (8003a10 <HAL_ADC_MspInit+0x158>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d160      	bne.n	800399c <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	4b4d      	ldr	r3, [pc, #308]	; (8003a14 <HAL_ADC_MspInit+0x15c>)
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	4a4c      	ldr	r2, [pc, #304]	; (8003a14 <HAL_ADC_MspInit+0x15c>)
 80038e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e8:	6453      	str	r3, [r2, #68]	; 0x44
 80038ea:	4b4a      	ldr	r3, [pc, #296]	; (8003a14 <HAL_ADC_MspInit+0x15c>)
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	61bb      	str	r3, [r7, #24]
 80038f4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	4b46      	ldr	r3, [pc, #280]	; (8003a14 <HAL_ADC_MspInit+0x15c>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	4a45      	ldr	r2, [pc, #276]	; (8003a14 <HAL_ADC_MspInit+0x15c>)
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	6313      	str	r3, [r2, #48]	; 0x30
 8003906:	4b43      	ldr	r3, [pc, #268]	; (8003a14 <HAL_ADC_MspInit+0x15c>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003912:	2304      	movs	r3, #4
 8003914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003916:	2303      	movs	r3, #3
 8003918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391a:	2300      	movs	r3, #0
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800391e:	f107 031c 	add.w	r3, r7, #28
 8003922:	4619      	mov	r1, r3
 8003924:	483c      	ldr	r0, [pc, #240]	; (8003a18 <HAL_ADC_MspInit+0x160>)
 8003926:	f7fe f97b 	bl	8001c20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800392a:	4b3c      	ldr	r3, [pc, #240]	; (8003a1c <HAL_ADC_MspInit+0x164>)
 800392c:	4a3c      	ldr	r2, [pc, #240]	; (8003a20 <HAL_ADC_MspInit+0x168>)
 800392e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003930:	4b3a      	ldr	r3, [pc, #232]	; (8003a1c <HAL_ADC_MspInit+0x164>)
 8003932:	2200      	movs	r2, #0
 8003934:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003936:	4b39      	ldr	r3, [pc, #228]	; (8003a1c <HAL_ADC_MspInit+0x164>)
 8003938:	2200      	movs	r2, #0
 800393a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800393c:	4b37      	ldr	r3, [pc, #220]	; (8003a1c <HAL_ADC_MspInit+0x164>)
 800393e:	2200      	movs	r2, #0
 8003940:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003942:	4b36      	ldr	r3, [pc, #216]	; (8003a1c <HAL_ADC_MspInit+0x164>)
 8003944:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003948:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800394a:	4b34      	ldr	r3, [pc, #208]	; (8003a1c <HAL_ADC_MspInit+0x164>)
 800394c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003950:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003952:	4b32      	ldr	r3, [pc, #200]	; (8003a1c <HAL_ADC_MspInit+0x164>)
 8003954:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003958:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800395a:	4b30      	ldr	r3, [pc, #192]	; (8003a1c <HAL_ADC_MspInit+0x164>)
 800395c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003960:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003962:	4b2e      	ldr	r3, [pc, #184]	; (8003a1c <HAL_ADC_MspInit+0x164>)
 8003964:	2200      	movs	r2, #0
 8003966:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003968:	4b2c      	ldr	r3, [pc, #176]	; (8003a1c <HAL_ADC_MspInit+0x164>)
 800396a:	2200      	movs	r2, #0
 800396c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800396e:	482b      	ldr	r0, [pc, #172]	; (8003a1c <HAL_ADC_MspInit+0x164>)
 8003970:	f7fd fde8 	bl	8001544 <HAL_DMA_Init>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800397a:	f7ff ff6d 	bl	8003858 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a26      	ldr	r2, [pc, #152]	; (8003a1c <HAL_ADC_MspInit+0x164>)
 8003982:	639a      	str	r2, [r3, #56]	; 0x38
 8003984:	4a25      	ldr	r2, [pc, #148]	; (8003a1c <HAL_ADC_MspInit+0x164>)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800398a:	2200      	movs	r2, #0
 800398c:	2100      	movs	r1, #0
 800398e:	2012      	movs	r0, #18
 8003990:	f7fd fda1 	bl	80014d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003994:	2012      	movs	r0, #18
 8003996:	f7fd fdba 	bl	800150e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800399a:	e034      	b.n	8003a06 <HAL_ADC_MspInit+0x14e>
  else if(hadc->Instance==ADC2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a20      	ldr	r2, [pc, #128]	; (8003a24 <HAL_ADC_MspInit+0x16c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d12f      	bne.n	8003a06 <HAL_ADC_MspInit+0x14e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <HAL_ADC_MspInit+0x15c>)
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	4a19      	ldr	r2, [pc, #100]	; (8003a14 <HAL_ADC_MspInit+0x15c>)
 80039b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039b4:	6453      	str	r3, [r2, #68]	; 0x44
 80039b6:	4b17      	ldr	r3, [pc, #92]	; (8003a14 <HAL_ADC_MspInit+0x15c>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	4b13      	ldr	r3, [pc, #76]	; (8003a14 <HAL_ADC_MspInit+0x15c>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	4a12      	ldr	r2, [pc, #72]	; (8003a14 <HAL_ADC_MspInit+0x15c>)
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	6313      	str	r3, [r2, #48]	; 0x30
 80039d2:	4b10      	ldr	r3, [pc, #64]	; (8003a14 <HAL_ADC_MspInit+0x15c>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80039de:	2302      	movs	r3, #2
 80039e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039e2:	2303      	movs	r3, #3
 80039e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ea:	f107 031c 	add.w	r3, r7, #28
 80039ee:	4619      	mov	r1, r3
 80039f0:	4809      	ldr	r0, [pc, #36]	; (8003a18 <HAL_ADC_MspInit+0x160>)
 80039f2:	f7fe f915 	bl	8001c20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80039f6:	2200      	movs	r2, #0
 80039f8:	2100      	movs	r1, #0
 80039fa:	2012      	movs	r0, #18
 80039fc:	f7fd fd6b 	bl	80014d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003a00:	2012      	movs	r0, #18
 8003a02:	f7fd fd84 	bl	800150e <HAL_NVIC_EnableIRQ>
}
 8003a06:	bf00      	nop
 8003a08:	3730      	adds	r7, #48	; 0x30
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40012000 	.word	0x40012000
 8003a14:	40023800 	.word	0x40023800
 8003a18:	40020000 	.word	0x40020000
 8003a1c:	200000cc 	.word	0x200000cc
 8003a20:	40026410 	.word	0x40026410
 8003a24:	40012100 	.word	0x40012100

08003a28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08a      	sub	sp, #40	; 0x28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a30:	f107 0314 	add.w	r3, r7, #20
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	609a      	str	r2, [r3, #8]
 8003a3c:	60da      	str	r2, [r3, #12]
 8003a3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a19      	ldr	r2, [pc, #100]	; (8003aac <HAL_SPI_MspInit+0x84>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d12b      	bne.n	8003aa2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	4b18      	ldr	r3, [pc, #96]	; (8003ab0 <HAL_SPI_MspInit+0x88>)
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	4a17      	ldr	r2, [pc, #92]	; (8003ab0 <HAL_SPI_MspInit+0x88>)
 8003a54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a58:	6453      	str	r3, [r2, #68]	; 0x44
 8003a5a:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <HAL_SPI_MspInit+0x88>)
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a62:	613b      	str	r3, [r7, #16]
 8003a64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <HAL_SPI_MspInit+0x88>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	4a10      	ldr	r2, [pc, #64]	; (8003ab0 <HAL_SPI_MspInit+0x88>)
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	6313      	str	r3, [r2, #48]	; 0x30
 8003a76:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <HAL_SPI_MspInit+0x88>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003a82:	23a0      	movs	r3, #160	; 0xa0
 8003a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a86:	2302      	movs	r3, #2
 8003a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a92:	2305      	movs	r3, #5
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a96:	f107 0314 	add.w	r3, r7, #20
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4805      	ldr	r0, [pc, #20]	; (8003ab4 <HAL_SPI_MspInit+0x8c>)
 8003a9e:	f7fe f8bf 	bl	8001c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003aa2:	bf00      	nop
 8003aa4:	3728      	adds	r7, #40	; 0x28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40013000 	.word	0x40013000
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	40020000 	.word	0x40020000

08003ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003aca:	e7fe      	b.n	8003aca <HardFault_Handler+0x4>

08003acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ad0:	e7fe      	b.n	8003ad0 <MemManage_Handler+0x4>

08003ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ad6:	e7fe      	b.n	8003ad6 <BusFault_Handler+0x4>

08003ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003adc:	e7fe      	b.n	8003adc <UsageFault_Handler+0x4>

08003ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003af0:	bf00      	nop
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003afa:	b480      	push	{r7}
 8003afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003afe:	bf00      	nop
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b0c:	f7fc fd2e 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b10:	bf00      	nop
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003b18:	2001      	movs	r0, #1
 8003b1a:	f7fe fa4d 	bl	8001fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003b28:	4803      	ldr	r0, [pc, #12]	; (8003b38 <ADC_IRQHandler+0x14>)
 8003b2a:	f7fc feef 	bl	800090c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003b2e:	4803      	ldr	r0, [pc, #12]	; (8003b3c <ADC_IRQHandler+0x18>)
 8003b30:	f7fc feec 	bl	800090c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003b34:	bf00      	nop
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20000084 	.word	0x20000084
 8003b3c:	20000038 	.word	0x20000038

08003b40 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b44:	4802      	ldr	r0, [pc, #8]	; (8003b50 <DMA2_Stream0_IRQHandler+0x10>)
 8003b46:	f7fd fe03 	bl	8001750 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	200000cc 	.word	0x200000cc

08003b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b58:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <SystemInit+0x28>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5e:	4a07      	ldr	r2, [pc, #28]	; (8003b7c <SystemInit+0x28>)
 8003b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b68:	4b04      	ldr	r3, [pc, #16]	; (8003b7c <SystemInit+0x28>)
 8003b6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b6e:	609a      	str	r2, [r3, #8]
#endif
}
 8003b70:	bf00      	nop
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	e000ed00 	.word	0xe000ed00

08003b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003b84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b86:	e003      	b.n	8003b90 <LoopCopyDataInit>

08003b88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b88:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003b8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b8e:	3104      	adds	r1, #4

08003b90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b90:	480b      	ldr	r0, [pc, #44]	; (8003bc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003b92:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003b94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b98:	d3f6      	bcc.n	8003b88 <CopyDataInit>
  ldr  r2, =_sbss
 8003b9a:	4a0b      	ldr	r2, [pc, #44]	; (8003bc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003b9c:	e002      	b.n	8003ba4 <LoopFillZerobss>

08003b9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003b9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ba0:	f842 3b04 	str.w	r3, [r2], #4

08003ba4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ba4:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003ba6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003ba8:	d3f9      	bcc.n	8003b9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003baa:	f7ff ffd3 	bl	8003b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bae:	f000 f811 	bl	8003bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bb2:	f7ff fc0b 	bl	80033cc <main>
  bx  lr    
 8003bb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003bb8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003bbc:	080046f4 	.word	0x080046f4
  ldr  r0, =_sdata
 8003bc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003bc4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003bc8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003bcc:	20000198 	.word	0x20000198

08003bd0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bd0:	e7fe      	b.n	8003bd0 <CAN1_RX0_IRQHandler>
	...

08003bd4 <__libc_init_array>:
 8003bd4:	b570      	push	{r4, r5, r6, lr}
 8003bd6:	4e0d      	ldr	r6, [pc, #52]	; (8003c0c <__libc_init_array+0x38>)
 8003bd8:	4c0d      	ldr	r4, [pc, #52]	; (8003c10 <__libc_init_array+0x3c>)
 8003bda:	1ba4      	subs	r4, r4, r6
 8003bdc:	10a4      	asrs	r4, r4, #2
 8003bde:	2500      	movs	r5, #0
 8003be0:	42a5      	cmp	r5, r4
 8003be2:	d109      	bne.n	8003bf8 <__libc_init_array+0x24>
 8003be4:	4e0b      	ldr	r6, [pc, #44]	; (8003c14 <__libc_init_array+0x40>)
 8003be6:	4c0c      	ldr	r4, [pc, #48]	; (8003c18 <__libc_init_array+0x44>)
 8003be8:	f000 f820 	bl	8003c2c <_init>
 8003bec:	1ba4      	subs	r4, r4, r6
 8003bee:	10a4      	asrs	r4, r4, #2
 8003bf0:	2500      	movs	r5, #0
 8003bf2:	42a5      	cmp	r5, r4
 8003bf4:	d105      	bne.n	8003c02 <__libc_init_array+0x2e>
 8003bf6:	bd70      	pop	{r4, r5, r6, pc}
 8003bf8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bfc:	4798      	blx	r3
 8003bfe:	3501      	adds	r5, #1
 8003c00:	e7ee      	b.n	8003be0 <__libc_init_array+0xc>
 8003c02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c06:	4798      	blx	r3
 8003c08:	3501      	adds	r5, #1
 8003c0a:	e7f2      	b.n	8003bf2 <__libc_init_array+0x1e>
 8003c0c:	080046ec 	.word	0x080046ec
 8003c10:	080046ec 	.word	0x080046ec
 8003c14:	080046ec 	.word	0x080046ec
 8003c18:	080046f0 	.word	0x080046f0

08003c1c <memset>:
 8003c1c:	4402      	add	r2, r0
 8003c1e:	4603      	mov	r3, r0
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d100      	bne.n	8003c26 <memset+0xa>
 8003c24:	4770      	bx	lr
 8003c26:	f803 1b01 	strb.w	r1, [r3], #1
 8003c2a:	e7f9      	b.n	8003c20 <memset+0x4>

08003c2c <_init>:
 8003c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2e:	bf00      	nop
 8003c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c32:	bc08      	pop	{r3}
 8003c34:	469e      	mov	lr, r3
 8003c36:	4770      	bx	lr

08003c38 <_fini>:
 8003c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3a:	bf00      	nop
 8003c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3e:	bc08      	pop	{r3}
 8003c40:	469e      	mov	lr, r3
 8003c42:	4770      	bx	lr
