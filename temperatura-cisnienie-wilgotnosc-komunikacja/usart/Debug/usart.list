
usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000980c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080099a8  080099a8  000199a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b30  08009b30  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009b30  08009b30  00019b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b38  08009b38  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b38  08009b38  00019b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b3c  08009b3c  00019b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000074  08009bb4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08009bb4  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fcb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000214c  00000000  00000000  0003106f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa8  00000000  00000000  000331c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed8  00000000  00000000  00034168  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016f19  00000000  00000000  00035040  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b32b  00000000  00000000  0004bf59  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008fdc7  00000000  00000000  00057284  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e704b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d94  00000000  00000000  000e70c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800998c 	.word	0x0800998c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	0800998c 	.word	0x0800998c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2iz>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d215      	bcs.n	8000af6 <__aeabi_d2iz+0x36>
 8000aca:	d511      	bpl.n	8000af0 <__aeabi_d2iz+0x30>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d912      	bls.n	8000afc <__aeabi_d2iz+0x3c>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d105      	bne.n	8000b08 <__aeabi_d2iz+0x48>
 8000afc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	bf08      	it	eq
 8000b02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2f>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b18:	bf24      	itt	cs
 8000b1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b22:	d90d      	bls.n	8000b40 <__aeabi_d2f+0x30>
 8000b24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b38:	bf08      	it	eq
 8000b3a:	f020 0001 	biceq.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b44:	d121      	bne.n	8000b8a <__aeabi_d2f+0x7a>
 8000b46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4a:	bfbc      	itt	lt
 8000b4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	4770      	bxlt	lr
 8000b52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5a:	f1c2 0218 	rsb	r2, r2, #24
 8000b5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b66:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6a:	bf18      	it	ne
 8000b6c:	f040 0001 	orrne.w	r0, r0, #1
 8000b70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b7c:	ea40 000c 	orr.w	r0, r0, ip
 8000b80:	fa23 f302 	lsr.w	r3, r3, r2
 8000b84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b88:	e7cc      	b.n	8000b24 <__aeabi_d2f+0x14>
 8000b8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8e:	d107      	bne.n	8000ba0 <__aeabi_d2f+0x90>
 8000b90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b94:	bf1e      	ittt	ne
 8000b96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9e:	4770      	bxne	lr
 8000ba0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_ldivmod>:
 8000bb0:	b97b      	cbnz	r3, 8000bd2 <__aeabi_ldivmod+0x22>
 8000bb2:	b972      	cbnz	r2, 8000bd2 <__aeabi_ldivmod+0x22>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bfbe      	ittt	lt
 8000bb8:	2000      	movlt	r0, #0
 8000bba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bbe:	e006      	blt.n	8000bce <__aeabi_ldivmod+0x1e>
 8000bc0:	bf08      	it	eq
 8000bc2:	2800      	cmpeq	r0, #0
 8000bc4:	bf1c      	itt	ne
 8000bc6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bca:	f04f 30ff 	movne.w	r0, #4294967295
 8000bce:	f000 b9bd 	b.w	8000f4c <__aeabi_idiv0>
 8000bd2:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bda:	2900      	cmp	r1, #0
 8000bdc:	db09      	blt.n	8000bf2 <__aeabi_ldivmod+0x42>
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db1a      	blt.n	8000c18 <__aeabi_ldivmod+0x68>
 8000be2:	f000 f84d 	bl	8000c80 <__udivmoddi4>
 8000be6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bee:	b004      	add	sp, #16
 8000bf0:	4770      	bx	lr
 8000bf2:	4240      	negs	r0, r0
 8000bf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db1b      	blt.n	8000c34 <__aeabi_ldivmod+0x84>
 8000bfc:	f000 f840 	bl	8000c80 <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	4770      	bx	lr
 8000c18:	4252      	negs	r2, r2
 8000c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1e:	f000 f82f 	bl	8000c80 <__udivmoddi4>
 8000c22:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2a:	b004      	add	sp, #16
 8000c2c:	4240      	negs	r0, r0
 8000c2e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c32:	4770      	bx	lr
 8000c34:	4252      	negs	r2, r2
 8000c36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c3a:	f000 f821 	bl	8000c80 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr

08000c50 <__aeabi_uldivmod>:
 8000c50:	b953      	cbnz	r3, 8000c68 <__aeabi_uldivmod+0x18>
 8000c52:	b94a      	cbnz	r2, 8000c68 <__aeabi_uldivmod+0x18>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	bf08      	it	eq
 8000c58:	2800      	cmpeq	r0, #0
 8000c5a:	bf1c      	itt	ne
 8000c5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c60:	f04f 30ff 	movne.w	r0, #4294967295
 8000c64:	f000 b972 	b.w	8000f4c <__aeabi_idiv0>
 8000c68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c70:	f000 f806 	bl	8000c80 <__udivmoddi4>
 8000c74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7c:	b004      	add	sp, #16
 8000c7e:	4770      	bx	lr

08000c80 <__udivmoddi4>:
 8000c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c84:	9e08      	ldr	r6, [sp, #32]
 8000c86:	4604      	mov	r4, r0
 8000c88:	4688      	mov	r8, r1
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d14b      	bne.n	8000d26 <__udivmoddi4+0xa6>
 8000c8e:	428a      	cmp	r2, r1
 8000c90:	4615      	mov	r5, r2
 8000c92:	d967      	bls.n	8000d64 <__udivmoddi4+0xe4>
 8000c94:	fab2 f282 	clz	r2, r2
 8000c98:	b14a      	cbz	r2, 8000cae <__udivmoddi4+0x2e>
 8000c9a:	f1c2 0720 	rsb	r7, r2, #32
 8000c9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca2:	fa20 f707 	lsr.w	r7, r0, r7
 8000ca6:	4095      	lsls	r5, r2
 8000ca8:	ea47 0803 	orr.w	r8, r7, r3
 8000cac:	4094      	lsls	r4, r2
 8000cae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb2:	0c23      	lsrs	r3, r4, #16
 8000cb4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb8:	fa1f fc85 	uxth.w	ip, r5
 8000cbc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cc4:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d909      	bls.n	8000ce0 <__udivmoddi4+0x60>
 8000ccc:	18eb      	adds	r3, r5, r3
 8000cce:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cd2:	f080 811b 	bcs.w	8000f0c <__udivmoddi4+0x28c>
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	f240 8118 	bls.w	8000f0c <__udivmoddi4+0x28c>
 8000cdc:	3f02      	subs	r7, #2
 8000cde:	442b      	add	r3, r5
 8000ce0:	1a5b      	subs	r3, r3, r1
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cf4:	45a4      	cmp	ip, r4
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x8c>
 8000cf8:	192c      	adds	r4, r5, r4
 8000cfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfe:	f080 8107 	bcs.w	8000f10 <__udivmoddi4+0x290>
 8000d02:	45a4      	cmp	ip, r4
 8000d04:	f240 8104 	bls.w	8000f10 <__udivmoddi4+0x290>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	442c      	add	r4, r5
 8000d0c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d10:	eba4 040c 	sub.w	r4, r4, ip
 8000d14:	2700      	movs	r7, #0
 8000d16:	b11e      	cbz	r6, 8000d20 <__udivmoddi4+0xa0>
 8000d18:	40d4      	lsrs	r4, r2
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e9c6 4300 	strd	r4, r3, [r6]
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d909      	bls.n	8000d3e <__udivmoddi4+0xbe>
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	f000 80eb 	beq.w	8000f06 <__udivmoddi4+0x286>
 8000d30:	2700      	movs	r7, #0
 8000d32:	e9c6 0100 	strd	r0, r1, [r6]
 8000d36:	4638      	mov	r0, r7
 8000d38:	4639      	mov	r1, r7
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	fab3 f783 	clz	r7, r3
 8000d42:	2f00      	cmp	r7, #0
 8000d44:	d147      	bne.n	8000dd6 <__udivmoddi4+0x156>
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xd0>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 80fa 	bhi.w	8000f44 <__udivmoddi4+0x2c4>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb61 0303 	sbc.w	r3, r1, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4698      	mov	r8, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d0e0      	beq.n	8000d20 <__udivmoddi4+0xa0>
 8000d5e:	e9c6 4800 	strd	r4, r8, [r6]
 8000d62:	e7dd      	b.n	8000d20 <__udivmoddi4+0xa0>
 8000d64:	b902      	cbnz	r2, 8000d68 <__udivmoddi4+0xe8>
 8000d66:	deff      	udf	#255	; 0xff
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	f040 808f 	bne.w	8000e90 <__udivmoddi4+0x210>
 8000d72:	1b49      	subs	r1, r1, r5
 8000d74:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d78:	fa1f f885 	uxth.w	r8, r5
 8000d7c:	2701      	movs	r7, #1
 8000d7e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d82:	0c23      	lsrs	r3, r4, #16
 8000d84:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d90:	4299      	cmp	r1, r3
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x124>
 8000d94:	18eb      	adds	r3, r5, r3
 8000d96:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x122>
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2bc>
 8000da2:	4684      	mov	ip, r0
 8000da4:	1a59      	subs	r1, r3, r1
 8000da6:	b2a3      	uxth	r3, r4
 8000da8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dac:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000db4:	fb08 f800 	mul.w	r8, r8, r0
 8000db8:	45a0      	cmp	r8, r4
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x14c>
 8000dbc:	192c      	adds	r4, r5, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x14a>
 8000dc4:	45a0      	cmp	r8, r4
 8000dc6:	f200 80b6 	bhi.w	8000f36 <__udivmoddi4+0x2b6>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	eba4 0408 	sub.w	r4, r4, r8
 8000dd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dd4:	e79f      	b.n	8000d16 <__udivmoddi4+0x96>
 8000dd6:	f1c7 0c20 	rsb	ip, r7, #32
 8000dda:	40bb      	lsls	r3, r7
 8000ddc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000de4:	fa01 f407 	lsl.w	r4, r1, r7
 8000de8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dec:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000df4:	4325      	orrs	r5, r4
 8000df6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dfa:	0c2c      	lsrs	r4, r5, #16
 8000dfc:	fb08 3319 	mls	r3, r8, r9, r3
 8000e00:	fa1f fa8e 	uxth.w	sl, lr
 8000e04:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e08:	fb09 f40a 	mul.w	r4, r9, sl
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	fa02 f207 	lsl.w	r2, r2, r7
 8000e12:	fa00 f107 	lsl.w	r1, r0, r7
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b0>
 8000e18:	eb1e 0303 	adds.w	r3, lr, r3
 8000e1c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e20:	f080 8087 	bcs.w	8000f32 <__udivmoddi4+0x2b2>
 8000e24:	429c      	cmp	r4, r3
 8000e26:	f240 8084 	bls.w	8000f32 <__udivmoddi4+0x2b2>
 8000e2a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e2e:	4473      	add	r3, lr
 8000e30:	1b1b      	subs	r3, r3, r4
 8000e32:	b2ad      	uxth	r5, r5
 8000e34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e38:	fb08 3310 	mls	r3, r8, r0, r3
 8000e3c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e40:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e44:	45a2      	cmp	sl, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1da>
 8000e48:	eb1e 0404 	adds.w	r4, lr, r4
 8000e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e50:	d26b      	bcs.n	8000f2a <__udivmoddi4+0x2aa>
 8000e52:	45a2      	cmp	sl, r4
 8000e54:	d969      	bls.n	8000f2a <__udivmoddi4+0x2aa>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4474      	add	r4, lr
 8000e5a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e5e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e62:	eba4 040a 	sub.w	r4, r4, sl
 8000e66:	454c      	cmp	r4, r9
 8000e68:	46c2      	mov	sl, r8
 8000e6a:	464b      	mov	r3, r9
 8000e6c:	d354      	bcc.n	8000f18 <__udivmoddi4+0x298>
 8000e6e:	d051      	beq.n	8000f14 <__udivmoddi4+0x294>
 8000e70:	2e00      	cmp	r6, #0
 8000e72:	d069      	beq.n	8000f48 <__udivmoddi4+0x2c8>
 8000e74:	ebb1 050a 	subs.w	r5, r1, sl
 8000e78:	eb64 0403 	sbc.w	r4, r4, r3
 8000e7c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e80:	40fd      	lsrs	r5, r7
 8000e82:	40fc      	lsrs	r4, r7
 8000e84:	ea4c 0505 	orr.w	r5, ip, r5
 8000e88:	e9c6 5400 	strd	r5, r4, [r6]
 8000e8c:	2700      	movs	r7, #0
 8000e8e:	e747      	b.n	8000d20 <__udivmoddi4+0xa0>
 8000e90:	f1c2 0320 	rsb	r3, r2, #32
 8000e94:	fa20 f703 	lsr.w	r7, r0, r3
 8000e98:	4095      	lsls	r5, r2
 8000e9a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e9e:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ea6:	4338      	orrs	r0, r7
 8000ea8:	0c01      	lsrs	r1, r0, #16
 8000eaa:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eae:	fa1f f885 	uxth.w	r8, r5
 8000eb2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eb6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eba:	fb07 f308 	mul.w	r3, r7, r8
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x256>
 8000ec6:	1869      	adds	r1, r5, r1
 8000ec8:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ecc:	d22f      	bcs.n	8000f2e <__udivmoddi4+0x2ae>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d92d      	bls.n	8000f2e <__udivmoddi4+0x2ae>
 8000ed2:	3f02      	subs	r7, #2
 8000ed4:	4429      	add	r1, r5
 8000ed6:	1acb      	subs	r3, r1, r3
 8000ed8:	b281      	uxth	r1, r0
 8000eda:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ede:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ee2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee6:	fb00 f308 	mul.w	r3, r0, r8
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x27e>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ef4:	d217      	bcs.n	8000f26 <__udivmoddi4+0x2a6>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d915      	bls.n	8000f26 <__udivmoddi4+0x2a6>
 8000efa:	3802      	subs	r0, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1ac9      	subs	r1, r1, r3
 8000f00:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f04:	e73b      	b.n	8000d7e <__udivmoddi4+0xfe>
 8000f06:	4637      	mov	r7, r6
 8000f08:	4630      	mov	r0, r6
 8000f0a:	e709      	b.n	8000d20 <__udivmoddi4+0xa0>
 8000f0c:	4607      	mov	r7, r0
 8000f0e:	e6e7      	b.n	8000ce0 <__udivmoddi4+0x60>
 8000f10:	4618      	mov	r0, r3
 8000f12:	e6fb      	b.n	8000d0c <__udivmoddi4+0x8c>
 8000f14:	4541      	cmp	r1, r8
 8000f16:	d2ab      	bcs.n	8000e70 <__udivmoddi4+0x1f0>
 8000f18:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f1c:	eb69 020e 	sbc.w	r2, r9, lr
 8000f20:	3801      	subs	r0, #1
 8000f22:	4613      	mov	r3, r2
 8000f24:	e7a4      	b.n	8000e70 <__udivmoddi4+0x1f0>
 8000f26:	4660      	mov	r0, ip
 8000f28:	e7e9      	b.n	8000efe <__udivmoddi4+0x27e>
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	e795      	b.n	8000e5a <__udivmoddi4+0x1da>
 8000f2e:	4667      	mov	r7, ip
 8000f30:	e7d1      	b.n	8000ed6 <__udivmoddi4+0x256>
 8000f32:	4681      	mov	r9, r0
 8000f34:	e77c      	b.n	8000e30 <__udivmoddi4+0x1b0>
 8000f36:	3802      	subs	r0, #2
 8000f38:	442c      	add	r4, r5
 8000f3a:	e747      	b.n	8000dcc <__udivmoddi4+0x14c>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	442b      	add	r3, r5
 8000f42:	e72f      	b.n	8000da4 <__udivmoddi4+0x124>
 8000f44:	4638      	mov	r0, r7
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xda>
 8000f48:	4637      	mov	r7, r6
 8000f4a:	e6e9      	b.n	8000d20 <__udivmoddi4+0xa0>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <send_string>:
{
	uint8_t sendUART[1]={c};
	HAL_UART_Transmit_IT(&huart1, sendUART, 1);
}
void send_string(const char* s, int size)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
    	HAL_UART_Transmit_IT(&huart1, s, size);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	461a      	mov	r2, r3
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4803      	ldr	r0, [pc, #12]	; (8000f70 <send_string+0x20>)
 8000f64:	f005 fb37 	bl	80065d6 <HAL_UART_Transmit_IT>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000170 	.word	0x20000170
 8000f74:	00000000 	.word	0x00000000

08000f78 <createDateToSendF>:
    strcat(dataToSend,str5);
    strcat(dataToSend,"X");
}

void createDateToSendF(float temp, float cis, float wil, float pow, float wys)
{
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b096      	sub	sp, #88	; 0x58
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000f82:	edc7 0a04 	vstr	s1, [r7, #16]
 8000f86:	ed87 1a03 	vstr	s2, [r7, #12]
 8000f8a:	edc7 1a02 	vstr	s3, [r7, #8]
 8000f8e:	ed87 2a01 	vstr	s4, [r7, #4]
    int i = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	657b      	str	r3, [r7, #84]	; 0x54
    while(dataToSend[i] != '\0') {
 8000f96:	e007      	b.n	8000fa8 <createDateToSendF+0x30>
    	dataToSend[i] = '\0';
 8000f98:	4a63      	ldr	r2, [pc, #396]	; (8001128 <createDateToSendF+0x1b0>)
 8000f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f9c:	4413      	add	r3, r2
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
        i++;
 8000fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	657b      	str	r3, [r7, #84]	; 0x54
    while(dataToSend[i] != '\0') {
 8000fa8:	4a5f      	ldr	r2, [pc, #380]	; (8001128 <createDateToSendF+0x1b0>)
 8000faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fac:	4413      	add	r3, r2
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1f1      	bne.n	8000f98 <createDateToSendF+0x20>
	char str3[10];
	char str4[10];
	char str5[10];


	gcvt(temp,4,str1);
 8000fb4:	6978      	ldr	r0, [r7, #20]
 8000fb6:	f7ff fa7b 	bl	80004b0 <__aeabi_f2d>
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	2004      	movs	r0, #4
 8000fc6:	ec45 4b10 	vmov	d0, r4, r5
 8000fca:	f006 f905 	bl	80071d8 <gcvt>
	gcvt(cis*0.001,6,str2);
 8000fce:	6938      	ldr	r0, [r7, #16]
 8000fd0:	f7ff fa6e 	bl	80004b0 <__aeabi_f2d>
 8000fd4:	a352      	add	r3, pc, #328	; (adr r3, 8001120 <createDateToSendF+0x1a8>)
 8000fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fda:	f7ff fac1 	bl	8000560 <__aeabi_dmul>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	460c      	mov	r4, r1
 8000fe2:	ec44 3b17 	vmov	d7, r3, r4
 8000fe6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fea:	4619      	mov	r1, r3
 8000fec:	2006      	movs	r0, #6
 8000fee:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff2:	eef0 0a67 	vmov.f32	s1, s15
 8000ff6:	f006 f8ef 	bl	80071d8 <gcvt>
	gcvt(wil,4,str3);
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f7ff fa58 	bl	80004b0 <__aeabi_f2d>
 8001000:	4604      	mov	r4, r0
 8001002:	460d      	mov	r5, r1
 8001004:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001008:	4619      	mov	r1, r3
 800100a:	2004      	movs	r0, #4
 800100c:	ec45 4b10 	vmov	d0, r4, r5
 8001010:	f006 f8e2 	bl	80071d8 <gcvt>
	gcvt(pow,4,str4);
 8001014:	68b8      	ldr	r0, [r7, #8]
 8001016:	f7ff fa4b 	bl	80004b0 <__aeabi_f2d>
 800101a:	4604      	mov	r4, r0
 800101c:	460d      	mov	r5, r1
 800101e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001022:	4619      	mov	r1, r3
 8001024:	2004      	movs	r0, #4
 8001026:	ec45 4b10 	vmov	d0, r4, r5
 800102a:	f006 f8d5 	bl	80071d8 <gcvt>
	gcvt(wys,4,str5);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff fa3e 	bl	80004b0 <__aeabi_f2d>
 8001034:	4604      	mov	r4, r0
 8001036:	460d      	mov	r5, r1
 8001038:	f107 0318 	add.w	r3, r7, #24
 800103c:	4619      	mov	r1, r3
 800103e:	2004      	movs	r0, #4
 8001040:	ec45 4b10 	vmov	d0, r4, r5
 8001044:	f006 f8c8 	bl	80071d8 <gcvt>

    strcat(dataToSend,"A");
 8001048:	4837      	ldr	r0, [pc, #220]	; (8001128 <createDateToSendF+0x1b0>)
 800104a:	f7ff f8c5 	bl	80001d8 <strlen>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	4b35      	ldr	r3, [pc, #212]	; (8001128 <createDateToSendF+0x1b0>)
 8001054:	4413      	add	r3, r2
 8001056:	4935      	ldr	r1, [pc, #212]	; (800112c <createDateToSendF+0x1b4>)
 8001058:	461a      	mov	r2, r3
 800105a:	460b      	mov	r3, r1
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	8013      	strh	r3, [r2, #0]
    strcat(dataToSend,str1);
 8001060:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001064:	4619      	mov	r1, r3
 8001066:	4830      	ldr	r0, [pc, #192]	; (8001128 <createDateToSendF+0x1b0>)
 8001068:	f006 f914 	bl	8007294 <strcat>
    strcat(dataToSend,"B");
 800106c:	482e      	ldr	r0, [pc, #184]	; (8001128 <createDateToSendF+0x1b0>)
 800106e:	f7ff f8b3 	bl	80001d8 <strlen>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <createDateToSendF+0x1b0>)
 8001078:	4413      	add	r3, r2
 800107a:	492d      	ldr	r1, [pc, #180]	; (8001130 <createDateToSendF+0x1b8>)
 800107c:	461a      	mov	r2, r3
 800107e:	460b      	mov	r3, r1
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	8013      	strh	r3, [r2, #0]
    strcat(dataToSend,str2);
 8001084:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001088:	4619      	mov	r1, r3
 800108a:	4827      	ldr	r0, [pc, #156]	; (8001128 <createDateToSendF+0x1b0>)
 800108c:	f006 f902 	bl	8007294 <strcat>
    strcat(dataToSend,"C");
 8001090:	4825      	ldr	r0, [pc, #148]	; (8001128 <createDateToSendF+0x1b0>)
 8001092:	f7ff f8a1 	bl	80001d8 <strlen>
 8001096:	4603      	mov	r3, r0
 8001098:	461a      	mov	r2, r3
 800109a:	4b23      	ldr	r3, [pc, #140]	; (8001128 <createDateToSendF+0x1b0>)
 800109c:	4413      	add	r3, r2
 800109e:	4925      	ldr	r1, [pc, #148]	; (8001134 <createDateToSendF+0x1bc>)
 80010a0:	461a      	mov	r2, r3
 80010a2:	460b      	mov	r3, r1
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	8013      	strh	r3, [r2, #0]
    strcat(dataToSend,str3);
 80010a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ac:	4619      	mov	r1, r3
 80010ae:	481e      	ldr	r0, [pc, #120]	; (8001128 <createDateToSendF+0x1b0>)
 80010b0:	f006 f8f0 	bl	8007294 <strcat>
    strcat(dataToSend,"D");
 80010b4:	481c      	ldr	r0, [pc, #112]	; (8001128 <createDateToSendF+0x1b0>)
 80010b6:	f7ff f88f 	bl	80001d8 <strlen>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <createDateToSendF+0x1b0>)
 80010c0:	4413      	add	r3, r2
 80010c2:	491d      	ldr	r1, [pc, #116]	; (8001138 <createDateToSendF+0x1c0>)
 80010c4:	461a      	mov	r2, r3
 80010c6:	460b      	mov	r3, r1
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	8013      	strh	r3, [r2, #0]
    strcat(dataToSend,str4);
 80010cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d0:	4619      	mov	r1, r3
 80010d2:	4815      	ldr	r0, [pc, #84]	; (8001128 <createDateToSendF+0x1b0>)
 80010d4:	f006 f8de 	bl	8007294 <strcat>
    strcat(dataToSend,"E");
 80010d8:	4813      	ldr	r0, [pc, #76]	; (8001128 <createDateToSendF+0x1b0>)
 80010da:	f7ff f87d 	bl	80001d8 <strlen>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <createDateToSendF+0x1b0>)
 80010e4:	4413      	add	r3, r2
 80010e6:	4915      	ldr	r1, [pc, #84]	; (800113c <createDateToSendF+0x1c4>)
 80010e8:	461a      	mov	r2, r3
 80010ea:	460b      	mov	r3, r1
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	8013      	strh	r3, [r2, #0]
    strcat(dataToSend,str5);
 80010f0:	f107 0318 	add.w	r3, r7, #24
 80010f4:	4619      	mov	r1, r3
 80010f6:	480c      	ldr	r0, [pc, #48]	; (8001128 <createDateToSendF+0x1b0>)
 80010f8:	f006 f8cc 	bl	8007294 <strcat>
    strcat(dataToSend,"X");
 80010fc:	480a      	ldr	r0, [pc, #40]	; (8001128 <createDateToSendF+0x1b0>)
 80010fe:	f7ff f86b 	bl	80001d8 <strlen>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <createDateToSendF+0x1b0>)
 8001108:	4413      	add	r3, r2
 800110a:	490d      	ldr	r1, [pc, #52]	; (8001140 <createDateToSendF+0x1c8>)
 800110c:	461a      	mov	r2, r3
 800110e:	460b      	mov	r3, r1
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	8013      	strh	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	3758      	adds	r7, #88	; 0x58
 8001118:	46bd      	mov	sp, r7
 800111a:	bdb0      	pop	{r4, r5, r7, pc}
 800111c:	f3af 8000 	nop.w
 8001120:	d2f1a9fc 	.word	0xd2f1a9fc
 8001124:	3f50624d 	.word	0x3f50624d
 8001128:	200000f4 	.word	0x200000f4
 800112c:	080099ac 	.word	0x080099ac
 8001130:	080099b0 	.word	0x080099b0
 8001134:	080099b4 	.word	0x080099b4
 8001138:	080099b8 	.word	0x080099b8
 800113c:	080099bc 	.word	0x080099bc
 8001140:	080099c0 	.word	0x080099c0

08001144 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001144:	b580      	push	{r7, lr}
 8001146:	ed2d 8b04 	vpush	{d8-d9}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 if(htim->Instance == TIM3)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d11f      	bne.n	800119a <HAL_TIM_PeriodElapsedCallback+0x56>
 {
	 createDateToSendF(BME280_ReadTemperature(), BME280_ReadPressure(), BME280_ReadHumidity(), 11, BME280_ReadAltitudeDefSeaLevel());
 800115a:	f000 fc4d 	bl	80019f8 <BME280_ReadTemperature>
 800115e:	eeb0 8a40 	vmov.f32	s16, s0
 8001162:	f000 fcab 	bl	8001abc <BME280_ReadPressure>
 8001166:	eef0 8a40 	vmov.f32	s17, s0
 800116a:	f000 fec3 	bl	8001ef4 <BME280_ReadHumidity>
 800116e:	eeb0 9a40 	vmov.f32	s18, s0
 8001172:	f000 ff49 	bl	8002008 <BME280_ReadAltitudeDefSeaLevel>
 8001176:	eef0 7a40 	vmov.f32	s15, s0
 800117a:	eeb0 2a67 	vmov.f32	s4, s15
 800117e:	eef2 1a06 	vmov.f32	s3, #38	; 0x41300000  11.0
 8001182:	eeb0 1a49 	vmov.f32	s2, s18
 8001186:	eef0 0a68 	vmov.f32	s1, s17
 800118a:	eeb0 0a48 	vmov.f32	s0, s16
 800118e:	f7ff fef3 	bl	8000f78 <createDateToSendF>
	 	  	 send_string(dataToSend, 60);
 8001192:	213c      	movs	r1, #60	; 0x3c
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001196:	f7ff fedb 	bl	8000f50 <send_string>
 }
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	ecbd 8b04 	vpop	{d8-d9}
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40000400 	.word	0x40000400
 80011ac:	200000f4 	.word	0x200000f4

080011b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b6:	f001 f9ef 	bl	8002598 <HAL_Init>
  BME280_ReadedData_t BME280_Data;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ba:	f000 f819 	bl	80011f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011be:	f000 f925 	bl	800140c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011c2:	f000 f8f9 	bl	80013b8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80011c6:	f000 f87b 	bl	80012c0 <MX_I2C2_Init>
  MX_TIM3_Init();
 80011ca:	f000 f8a7 	bl	800131c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BME280_Initial(BME280_STANDBY_MS_1000, BME280_FILTER_X4,
 80011ce:	2303      	movs	r3, #3
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	2301      	movs	r3, #1
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2308      	movs	r3, #8
 80011d8:	2260      	movs	r2, #96	; 0x60
 80011da:	2108      	movs	r1, #8
 80011dc:	20a0      	movs	r0, #160	; 0xa0
 80011de:	f000 fb71 	bl	80018c4 <BME280_Initial>
            BME280_TEMP_OVERSAMPLING_X4, BME280_PRES_OVERSAMPLING_X2,
            BME280_HUM_OVERSAMPLING_X1, BME280_MODE_NORMAL);
  HAL_TIM_Base_Start_IT(&htim3);
 80011e2:	4802      	ldr	r0, [pc, #8]	; (80011ec <main+0x3c>)
 80011e4:	f004 fe03 	bl	8005dee <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <main+0x38>
 80011ea:	bf00      	nop
 80011ec:	20000130 	.word	0x20000130

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b094      	sub	sp, #80	; 0x50
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 0320 	add.w	r3, r7, #32
 80011fa:	2230      	movs	r2, #48	; 0x30
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f006 f840 	bl	8007284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <SystemClock_Config+0xc8>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	4a26      	ldr	r2, [pc, #152]	; (80012b8 <SystemClock_Config+0xc8>)
 800121e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001222:	6413      	str	r3, [r2, #64]	; 0x40
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <SystemClock_Config+0xc8>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <SystemClock_Config+0xcc>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a20      	ldr	r2, [pc, #128]	; (80012bc <SystemClock_Config+0xcc>)
 800123a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <SystemClock_Config+0xcc>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800124c:	2301      	movs	r3, #1
 800124e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001256:	2302      	movs	r3, #2
 8001258:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800125e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001260:	2304      	movs	r3, #4
 8001262:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001264:	2364      	movs	r3, #100	; 0x64
 8001266:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001268:	2302      	movs	r3, #2
 800126a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800126c:	2304      	movs	r3, #4
 800126e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001270:	f107 0320 	add.w	r3, r7, #32
 8001274:	4618      	mov	r0, r3
 8001276:	f004 f92d 	bl	80054d4 <HAL_RCC_OscConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001280:	f000 f8ec 	bl	800145c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001284:	230f      	movs	r3, #15
 8001286:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001288:	2302      	movs	r3, #2
 800128a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001294:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	2103      	movs	r1, #3
 80012a0:	4618      	mov	r0, r3
 80012a2:	f004 fb87 	bl	80059b4 <HAL_RCC_ClockConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012ac:	f000 f8d6 	bl	800145c <Error_Handler>
  }
}
 80012b0:	bf00      	nop
 80012b2:	3750      	adds	r7, #80	; 0x50
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40007000 	.word	0x40007000

080012c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <MX_I2C2_Init+0x50>)
 80012c6:	4a13      	ldr	r2, [pc, #76]	; (8001314 <MX_I2C2_Init+0x54>)
 80012c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_I2C2_Init+0x50>)
 80012cc:	4a12      	ldr	r2, [pc, #72]	; (8001318 <MX_I2C2_Init+0x58>)
 80012ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MX_I2C2_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <MX_I2C2_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <MX_I2C2_Init+0x50>)
 80012de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <MX_I2C2_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <MX_I2C2_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <MX_I2C2_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <MX_I2C2_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <MX_I2C2_Init+0x50>)
 80012fe:	f001 fc81 	bl	8002c04 <HAL_I2C_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001308:	f000 f8a8 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200000a0 	.word	0x200000a0
 8001314:	40005800 	.word	0x40005800
 8001318:	00061a80 	.word	0x00061a80

0800131c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	463b      	mov	r3, r7
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <MX_TIM3_Init+0x94>)
 800133a:	4a1e      	ldr	r2, [pc, #120]	; (80013b4 <MX_TIM3_Init+0x98>)
 800133c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 800133e:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <MX_TIM3_Init+0x94>)
 8001340:	f242 720f 	movw	r2, #9999	; 0x270f
 8001344:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <MX_TIM3_Init+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <MX_TIM3_Init+0x94>)
 800134e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001352:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <MX_TIM3_Init+0x94>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <MX_TIM3_Init+0x94>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001360:	4813      	ldr	r0, [pc, #76]	; (80013b0 <MX_TIM3_Init+0x94>)
 8001362:	f004 fd19 	bl	8005d98 <HAL_TIM_Base_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800136c:	f000 f876 	bl	800145c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001374:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	4619      	mov	r1, r3
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <MX_TIM3_Init+0x94>)
 800137e:	f004 fe62 	bl	8006046 <HAL_TIM_ConfigClockSource>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001388:	f000 f868 	bl	800145c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138c:	2300      	movs	r3, #0
 800138e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001394:	463b      	mov	r3, r7
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_TIM3_Init+0x94>)
 800139a:	f005 f84d 	bl	8006438 <HAL_TIMEx_MasterConfigSynchronization>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80013a4:	f000 f85a 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000130 	.word	0x20000130
 80013b4:	40000400 	.word	0x40000400

080013b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_USART1_UART_Init+0x4c>)
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <MX_USART1_UART_Init+0x50>)
 80013c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <MX_USART1_UART_Init+0x4c>)
 80013c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MX_USART1_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_USART1_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <MX_USART1_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_USART1_UART_Init+0x4c>)
 80013de:	220c      	movs	r2, #12
 80013e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <MX_USART1_UART_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_USART1_UART_Init+0x4c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_USART1_UART_Init+0x4c>)
 80013f0:	f005 f8a4 	bl	800653c <HAL_UART_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013fa:	f000 f82f 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000170 	.word	0x20000170
 8001408:	40011000 	.word	0x40011000

0800140c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <MX_GPIO_Init+0x4c>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a0f      	ldr	r2, [pc, #60]	; (8001458 <MX_GPIO_Init+0x4c>)
 800141c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <MX_GPIO_Init+0x4c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <MX_GPIO_Init+0x4c>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a08      	ldr	r2, [pc, #32]	; (8001458 <MX_GPIO_Init+0x4c>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_GPIO_Init+0x4c>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]

}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800

0800145c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <HAL_MspInit+0x4c>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <HAL_MspInit+0x4c>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <HAL_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_MspInit+0x4c>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_MspInit+0x4c>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_MspInit+0x4c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800

080014bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a29      	ldr	r2, [pc, #164]	; (8001580 <HAL_I2C_MspInit+0xc4>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d14c      	bne.n	8001578 <HAL_I2C_MspInit+0xbc>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <HAL_I2C_MspInit+0xc8>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a27      	ldr	r2, [pc, #156]	; (8001584 <HAL_I2C_MspInit+0xc8>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b25      	ldr	r3, [pc, #148]	; (8001584 <HAL_I2C_MspInit+0xc8>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001500:	2312      	movs	r3, #18
 8001502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001504:	2301      	movs	r3, #1
 8001506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800150c:	2304      	movs	r3, #4
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	481c      	ldr	r0, [pc, #112]	; (8001588 <HAL_I2C_MspInit+0xcc>)
 8001518:	f001 f9f2 	bl	8002900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800151c:	2308      	movs	r3, #8
 800151e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001520:	2312      	movs	r3, #18
 8001522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001524:	2301      	movs	r3, #1
 8001526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800152c:	2309      	movs	r3, #9
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	4814      	ldr	r0, [pc, #80]	; (8001588 <HAL_I2C_MspInit+0xcc>)
 8001538:	f001 f9e2 	bl	8002900 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_I2C_MspInit+0xc8>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <HAL_I2C_MspInit+0xc8>)
 8001546:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800154a:	6413      	str	r3, [r2, #64]	; 0x40
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <HAL_I2C_MspInit+0xc8>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2100      	movs	r1, #0
 800155c:	2021      	movs	r0, #33	; 0x21
 800155e:	f001 f968 	bl	8002832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001562:	2021      	movs	r0, #33	; 0x21
 8001564:	f001 f981 	bl	800286a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	2100      	movs	r1, #0
 800156c:	2022      	movs	r0, #34	; 0x22
 800156e:	f001 f960 	bl	8002832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001572:	2022      	movs	r0, #34	; 0x22
 8001574:	f001 f979 	bl	800286a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001578:	bf00      	nop
 800157a:	3728      	adds	r7, #40	; 0x28
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40005800 	.word	0x40005800
 8001584:	40023800 	.word	0x40023800
 8001588:	40020400 	.word	0x40020400

0800158c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_TIM_Base_MspInit+0x48>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d115      	bne.n	80015ca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <HAL_TIM_Base_MspInit+0x4c>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <HAL_TIM_Base_MspInit+0x4c>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_TIM_Base_MspInit+0x4c>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	201d      	movs	r0, #29
 80015c0:	f001 f937 	bl	8002832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015c4:	201d      	movs	r0, #29
 80015c6:	f001 f950 	bl	800286a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40000400 	.word	0x40000400
 80015d8:	40023800 	.word	0x40023800

080015dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a1d      	ldr	r2, [pc, #116]	; (8001670 <HAL_UART_MspInit+0x94>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d133      	bne.n	8001666 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <HAL_UART_MspInit+0x98>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	4a1b      	ldr	r2, [pc, #108]	; (8001674 <HAL_UART_MspInit+0x98>)
 8001608:	f043 0310 	orr.w	r3, r3, #16
 800160c:	6453      	str	r3, [r2, #68]	; 0x44
 800160e:	4b19      	ldr	r3, [pc, #100]	; (8001674 <HAL_UART_MspInit+0x98>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_UART_MspInit+0x98>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a14      	ldr	r2, [pc, #80]	; (8001674 <HAL_UART_MspInit+0x98>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_UART_MspInit+0x98>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001636:	23c0      	movs	r3, #192	; 0xc0
 8001638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001642:	2303      	movs	r3, #3
 8001644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001646:	2307      	movs	r3, #7
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	4809      	ldr	r0, [pc, #36]	; (8001678 <HAL_UART_MspInit+0x9c>)
 8001652:	f001 f955 	bl	8002900 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	2025      	movs	r0, #37	; 0x25
 800165c:	f001 f8e9 	bl	8002832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001660:	2025      	movs	r0, #37	; 0x25
 8001662:	f001 f902 	bl	800286a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	; 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40011000 	.word	0x40011000
 8001674:	40023800 	.word	0x40023800
 8001678:	40020400 	.word	0x40020400

0800167c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <MemManage_Handler+0x4>

08001696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <BusFault_Handler+0x4>

0800169c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <UsageFault_Handler+0x4>

080016a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d0:	f000 ffb4 	bl	800263c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <TIM3_IRQHandler+0x10>)
 80016de:	f004 fbaa 	bl	8005e36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000130 	.word	0x20000130

080016ec <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <I2C2_EV_IRQHandler+0x10>)
 80016f2:	f001 fedf 	bl	80034b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200000a0 	.word	0x200000a0

08001700 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <I2C2_ER_IRQHandler+0x10>)
 8001706:	f002 f842 	bl	800378e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200000a0 	.word	0x200000a0

08001714 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <USART1_IRQHandler+0x10>)
 800171a:	f004 ffa1 	bl	8006660 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000170 	.word	0x20000170

08001728 <convert16BitData>:
#define LED_ON 				HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_SET)
#define LED_OFF 			HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_RESET)
#define LED_TGL 			HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_PIN)
//------------------------------------------------
static inline uint16_t convert16BitData(uint16_t data)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	80fb      	strh	r3, [r7, #6]
	return ((((data)>>8)&0xff)|(((data)<<8)&0xff00));
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	b29b      	uxth	r3, r3
 8001738:	b21a      	sxth	r2, r3
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	b21b      	sxth	r3, r3
 8001740:	4313      	orrs	r3, r2
 8001742:	b21b      	sxth	r3, r3
 8001744:	b29b      	uxth	r3, r3
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <convert24BitData>:
//------------------------------------------------
static inline uint32_t convert24BitData(uint32_t data)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
	return ((((data)>>16)&0x000000ff)|((data)&0x0000ff00)|(((data)<<16)&0x00ff0000));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	0c1b      	lsrs	r3, r3, #16
 800175e:	b2da      	uxtb	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	041b      	lsls	r3, r3, #16
 800176c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001770:	4313      	orrs	r3, r2
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <errorHandler>:
BME280_Settings BME280_Set;
int32_t tFineValue = 0;
//-------------------------------------------------------------------------------
//I2C Communication functions
static inline void errorHandler()
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
	/* Error handler */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <I2Cx_WriteData>:
//-----------------------------------------------------------------------------
static inline void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af04      	add	r7, sp, #16
 8001792:	4603      	mov	r3, r0
 8001794:	80fb      	strh	r3, [r7, #6]
 8001796:	460b      	mov	r3, r1
 8001798:	717b      	strb	r3, [r7, #5]
 800179a:	4613      	mov	r3, r2
 800179c:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef operationStatus = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]

  operationStatus = HAL_I2C_Mem_Write(&hi2c2, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 80017a2:	797b      	ldrb	r3, [r7, #5]
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	88f9      	ldrh	r1, [r7, #6]
 80017a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ac:	9302      	str	r3, [sp, #8]
 80017ae:	2301      	movs	r3, #1
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2301      	movs	r3, #1
 80017b8:	4806      	ldr	r0, [pc, #24]	; (80017d4 <I2Cx_WriteData+0x48>)
 80017ba:	f001 fb5b 	bl	8002e74 <HAL_I2C_Mem_Write>
 80017be:	4603      	mov	r3, r0
 80017c0:	73fb      	strb	r3, [r7, #15]

  if(operationStatus != HAL_OK)
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <I2Cx_WriteData+0x40>
  {
	  errorHandler();
 80017c8:	f7ff ffd9 	bl	800177e <errorHandler>
  }
}
 80017cc:	bf00      	nop
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	200000a0 	.word	0x200000a0

080017d8 <I2Cx_ReadData>:

static inline uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af04      	add	r7, sp, #16
 80017de:	4603      	mov	r3, r0
 80017e0:	460a      	mov	r2, r1
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]

  uint8_t readedValue = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &readedValue, 1, 0x10000);
 80017f0:	797b      	ldrb	r3, [r7, #5]
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	88f9      	ldrh	r1, [r7, #6]
 80017f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017fa:	9302      	str	r3, [sp, #8]
 80017fc:	2301      	movs	r3, #1
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	f107 030e 	add.w	r3, r7, #14
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2301      	movs	r3, #1
 8001808:	4807      	ldr	r0, [pc, #28]	; (8001828 <I2Cx_ReadData+0x50>)
 800180a:	f001 fc2d 	bl	8003068 <HAL_I2C_Mem_Read>
 800180e:	4603      	mov	r3, r0
 8001810:	73fb      	strb	r3, [r7, #15]

  if(status != HAL_OK)
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <I2Cx_ReadData+0x44>
  {
	  errorHandler();
 8001818:	f7ff ffb1 	bl	800177e <errorHandler>
  }
  return readedValue;
 800181c:	7bbb      	ldrb	r3, [r7, #14]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200000a0 	.word	0x200000a0

0800182c <I2Cx_ReadData16>:

static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af04      	add	r7, sp, #16
 8001832:	4603      	mov	r3, r0
 8001834:	603a      	str	r2, [r7, #0]
 8001836:	80fb      	strh	r3, [r7, #6]
 8001838:	460b      	mov	r3, r1
 800183a:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 8001840:	797b      	ldrb	r3, [r7, #5]
 8001842:	b29a      	uxth	r2, r3
 8001844:	88f9      	ldrh	r1, [r7, #6]
 8001846:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800184a:	9302      	str	r3, [sp, #8]
 800184c:	2302      	movs	r3, #2
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	2301      	movs	r3, #1
 8001856:	4807      	ldr	r0, [pc, #28]	; (8001874 <I2Cx_ReadData16+0x48>)
 8001858:	f001 fc06 	bl	8003068 <HAL_I2C_Mem_Read>
 800185c:	4603      	mov	r3, r0
 800185e:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK)
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <I2Cx_ReadData16+0x3e>
  {
	  errorHandler();
 8001866:	f7ff ff8a 	bl	800177e <errorHandler>
  }
}
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200000a0 	.word	0x200000a0

08001878 <I2Cx_ReadData24>:

static void I2Cx_ReadData24(uint16_t Addr, uint8_t Reg, uint32_t *Value)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af04      	add	r7, sp, #16
 800187e:	4603      	mov	r3, r0
 8001880:	603a      	str	r2, [r7, #0]
 8001882:	80fb      	strh	r3, [r7, #6]
 8001884:	460b      	mov	r3, r1
 8001886:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 800188c:	797b      	ldrb	r3, [r7, #5]
 800188e:	b29a      	uxth	r2, r3
 8001890:	88f9      	ldrh	r1, [r7, #6]
 8001892:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001896:	9302      	str	r3, [sp, #8]
 8001898:	2303      	movs	r3, #3
 800189a:	9301      	str	r3, [sp, #4]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	2301      	movs	r3, #1
 80018a2:	4807      	ldr	r0, [pc, #28]	; (80018c0 <I2Cx_ReadData24+0x48>)
 80018a4:	f001 fbe0 	bl	8003068 <HAL_I2C_Mem_Read>
 80018a8:	4603      	mov	r3, r0
 80018aa:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK)
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <I2Cx_ReadData24+0x3e>
  {
	  errorHandler();
 80018b2:	f7ff ff64 	bl	800177e <errorHandler>
  }
}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200000a0 	.word	0x200000a0

080018c4 <BME280_Initial>:
static void bme280_SetMode(BME280_mode_E mode);
//-------------------------------------------------------------------------------
void BME280_Initial(BME280_standby_Time_E standbyTime, BME280_filter_E filter,
					BME280_overSamplingTemp_E tempOversampl, BME280_overSamplingPres_E presOversampl,
					BME280_overSamplingHum_E humOversampl, BME280_mode_E sensMode)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4604      	mov	r4, r0
 80018cc:	4608      	mov	r0, r1
 80018ce:	4611      	mov	r1, r2
 80018d0:	461a      	mov	r2, r3
 80018d2:	4623      	mov	r3, r4
 80018d4:	71fb      	strb	r3, [r7, #7]
 80018d6:	4603      	mov	r3, r0
 80018d8:	71bb      	strb	r3, [r7, #6]
 80018da:	460b      	mov	r3, r1
 80018dc:	717b      	strb	r3, [r7, #5]
 80018de:	4613      	mov	r3, r2
 80018e0:	713b      	strb	r3, [r7, #4]
	BME280_Set.sensorID = bme280_ReadReg(BME280_REG_ID);
 80018e2:	20d0      	movs	r0, #208	; 0xd0
 80018e4:	f000 fbee 	bl	80020c4 <bme280_ReadReg>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b41      	ldr	r3, [pc, #260]	; (80019f4 <BME280_Initial+0x130>)
 80018ee:	701a      	strb	r2, [r3, #0]

	if(BME280_Set.sensorID != BME280_ID)
 80018f0:	4b40      	ldr	r3, [pc, #256]	; (80019f4 <BME280_Initial+0x130>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b60      	cmp	r3, #96	; 0x60
 80018f6:	d002      	beq.n	80018fe <BME280_Initial+0x3a>
	{
		errorHandler();
 80018f8:	f7ff ff41 	bl	800177e <errorHandler>
		return;
 80018fc:	e077      	b.n	80019ee <BME280_Initial+0x12a>
	}

	BME280_Set.standbyTime = standbyTime;
 80018fe:	4a3d      	ldr	r2, [pc, #244]	; (80019f4 <BME280_Initial+0x130>)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	7053      	strb	r3, [r2, #1]
	BME280_Set.filter = filter;
 8001904:	4a3b      	ldr	r2, [pc, #236]	; (80019f4 <BME280_Initial+0x130>)
 8001906:	79bb      	ldrb	r3, [r7, #6]
 8001908:	7093      	strb	r3, [r2, #2]
	BME280_Set.tempOversampl = tempOversampl;
 800190a:	4a3a      	ldr	r2, [pc, #232]	; (80019f4 <BME280_Initial+0x130>)
 800190c:	797b      	ldrb	r3, [r7, #5]
 800190e:	70d3      	strb	r3, [r2, #3]
	BME280_Set.presOversampl = presOversampl;
 8001910:	4a38      	ldr	r2, [pc, #224]	; (80019f4 <BME280_Initial+0x130>)
 8001912:	793b      	ldrb	r3, [r7, #4]
 8001914:	7113      	strb	r3, [r2, #4]
	BME280_Set.humOversampl = humOversampl;
 8001916:	4a37      	ldr	r2, [pc, #220]	; (80019f4 <BME280_Initial+0x130>)
 8001918:	7e3b      	ldrb	r3, [r7, #24]
 800191a:	7153      	strb	r3, [r2, #5]
	BME280_Set.sensMode = sensMode;
 800191c:	4a35      	ldr	r2, [pc, #212]	; (80019f4 <BME280_Initial+0x130>)
 800191e:	7f3b      	ldrb	r3, [r7, #28]
 8001920:	7193      	strb	r3, [r2, #6]

	bme280_WriteReg(BME280_REG_SOFTRESET, BME280_SOFTRESET_VALUE);
 8001922:	21b6      	movs	r1, #182	; 0xb6
 8001924:	20e0      	movs	r0, #224	; 0xe0
 8001926:	f000 fbbb 	bl	80020a0 <bme280_WriteReg>

	while (bme280_ReadStatus() & BME280_STATUS_IM_UPDATE) ;
 800192a:	bf00      	nop
 800192c:	f000 fbee 	bl	800210c <bme280_ReadStatus>
 8001930:	4603      	mov	r3, r0
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f8      	bne.n	800192c <BME280_Initial+0x68>

	bme280_ReadCoefficients();
 800193a:	f000 fcdd 	bl	80022f8 <bme280_ReadCoefficients>

	bme280_SetStandby(BME280_Set.standbyTime);
 800193e:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <BME280_Initial+0x130>)
 8001940:	785b      	ldrb	r3, [r3, #1]
 8001942:	4618      	mov	r0, r3
 8001944:	f000 fce2 	bl	800230c <bme280_SetStandby>
	bme280_SetFilter(BME280_Set.filter);
 8001948:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <BME280_Initial+0x130>)
 800194a:	789b      	ldrb	r3, [r3, #2]
 800194c:	4618      	mov	r0, r3
 800194e:	f000 fcfe 	bl	800234e <bme280_SetFilter>

	bme280_SetOversamplingTemper(BME280_Set.tempOversampl);
 8001952:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <BME280_Initial+0x130>)
 8001954:	78db      	ldrb	r3, [r3, #3]
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fd1a 	bl	8002390 <bme280_SetOversamplingTemper>
	bme280_SetOversamplingPressure(BME280_Set.presOversampl);
 800195c:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <BME280_Initial+0x130>)
 800195e:	791b      	ldrb	r3, [r3, #4]
 8001960:	4618      	mov	r0, r3
 8001962:	f000 fd36 	bl	80023d2 <bme280_SetOversamplingPressure>
	bme280_SetOversamplingHum(BME280_Set.humOversampl);
 8001966:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <BME280_Initial+0x130>)
 8001968:	795b      	ldrb	r3, [r3, #5]
 800196a:	4618      	mov	r0, r3
 800196c:	f000 fd52 	bl	8002414 <bme280_SetOversamplingHum>

	BME280_Set.measurementStatus = bme280_ReadReg(BME280_REG_CTRL_MEAS);
 8001970:	20f4      	movs	r0, #244	; 0xf4
 8001972:	f000 fba7 	bl	80020c4 <bme280_ReadReg>
 8001976:	4603      	mov	r3, r0
 8001978:	461a      	mov	r2, r3
 800197a:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <BME280_Initial+0x130>)
 800197c:	609a      	str	r2, [r3, #8]
	BME280_Set.measurementStatus = bme280_ReadReg(BME280_REG_CTRL_HUM) << 8;
 800197e:	20f2      	movs	r0, #242	; 0xf2
 8001980:	f000 fba0 	bl	80020c4 <bme280_ReadReg>
 8001984:	4603      	mov	r3, r0
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	461a      	mov	r2, r3
 800198a:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <BME280_Initial+0x130>)
 800198c:	609a      	str	r2, [r3, #8]

	BME280_Set.tempOn = (BME280_Set.measurementStatus & BME280_OSRS_T_MSK) ? 1 : 0;
 800198e:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <BME280_Initial+0x130>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001996:	2b00      	cmp	r3, #0
 8001998:	bf14      	ite	ne
 800199a:	2301      	movne	r3, #1
 800199c:	2300      	moveq	r3, #0
 800199e:	b2d9      	uxtb	r1, r3
 80019a0:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <BME280_Initial+0x130>)
 80019a2:	7b13      	ldrb	r3, [r2, #12]
 80019a4:	f361 0300 	bfi	r3, r1, #0, #1
 80019a8:	7313      	strb	r3, [r2, #12]
	BME280_Set.presOn = (BME280_Set.measurementStatus & BME280_OSRS_P_MSK) ? 1 : 0;
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <BME280_Initial+0x130>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 031c 	and.w	r3, r3, #28
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	bf14      	ite	ne
 80019b6:	2301      	movne	r3, #1
 80019b8:	2300      	moveq	r3, #0
 80019ba:	b2d9      	uxtb	r1, r3
 80019bc:	4a0d      	ldr	r2, [pc, #52]	; (80019f4 <BME280_Initial+0x130>)
 80019be:	7b13      	ldrb	r3, [r2, #12]
 80019c0:	f361 0341 	bfi	r3, r1, #1, #1
 80019c4:	7313      	strb	r3, [r2, #12]
	BME280_Set.humiOn = ((BME280_Set.measurementStatus >> 8) & BME280_OSRS_H_MSK) ? 1 : 0;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <BME280_Initial+0x130>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	0a1b      	lsrs	r3, r3, #8
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bf14      	ite	ne
 80019d4:	2301      	movne	r3, #1
 80019d6:	2300      	moveq	r3, #0
 80019d8:	b2d9      	uxtb	r1, r3
 80019da:	4a06      	ldr	r2, [pc, #24]	; (80019f4 <BME280_Initial+0x130>)
 80019dc:	7b13      	ldrb	r3, [r2, #12]
 80019de:	f361 0382 	bfi	r3, r1, #2, #1
 80019e2:	7313      	strb	r3, [r2, #12]

	bme280_SetMode(BME280_Set.sensMode);
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <BME280_Initial+0x130>)
 80019e6:	799b      	ldrb	r3, [r3, #6]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 fd3e 	bl	800246a <bme280_SetMode>
}
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd90      	pop	{r4, r7, pc}
 80019f4:	200001d8 	.word	0x200001d8

080019f8 <BME280_ReadTemperature>:


float BME280_ReadTemperature(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
	float readTemp = 0.0f;
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
	uint32_t readRawData = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	603b      	str	r3, [r7, #0]

	bme280_ReadRegDataConvert24(BME280_REGISTER_TEMPDATA, &readRawData);
 8001a08:	463b      	mov	r3, r7
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	20fa      	movs	r0, #250	; 0xfa
 8001a0e:	f000 fbc5 	bl	800219c <bme280_ReadRegDataConvert24>

	if(readRawData == 0x800000)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001a18:	d101      	bne.n	8001a1e <BME280_ReadTemperature+0x26>
	{
		return 0xFFFF;
 8001a1a:	4b24      	ldr	r3, [pc, #144]	; (8001aac <BME280_ReadTemperature+0xb4>)
 8001a1c:	e03e      	b.n	8001a9c <BME280_ReadTemperature+0xa4>
	}

	readRawData >>= 4;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	091b      	lsrs	r3, r3, #4
 8001a22:	603b      	str	r3, [r7, #0]

	int32_t tmp_1 = ((((readRawData>>3) - ((int32_t)CalibData.tempValue.dig_T1 <<1))) *
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	08db      	lsrs	r3, r3, #3
 8001a28:	4a21      	ldr	r2, [pc, #132]	; (8001ab0 <BME280_ReadTemperature+0xb8>)
 8001a2a:	8812      	ldrh	r2, [r2, #0]
 8001a2c:	0052      	lsls	r2, r2, #1
 8001a2e:	1a9b      	subs	r3, r3, r2
		((int32_t)CalibData.tempValue.dig_T2)) >> 11;
 8001a30:	4a1f      	ldr	r2, [pc, #124]	; (8001ab0 <BME280_ReadTemperature+0xb8>)
 8001a32:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
	int32_t tmp_1 = ((((readRawData>>3) - ((int32_t)CalibData.tempValue.dig_T1 <<1))) *
 8001a36:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.tempValue.dig_T2)) >> 11;
 8001a3a:	0adb      	lsrs	r3, r3, #11
	int32_t tmp_1 = ((((readRawData>>3) - ((int32_t)CalibData.tempValue.dig_T1 <<1))) *
 8001a3c:	60bb      	str	r3, [r7, #8]

	int32_t tmp_2 = (((((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1)) *
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	091b      	lsrs	r3, r3, #4
 8001a42:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <BME280_ReadTemperature+0xb8>)
 8001a44:	8812      	ldrh	r2, [r2, #0]
 8001a46:	1a9b      	subs	r3, r3, r2
		((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1))) >> 12) *
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	0912      	lsrs	r2, r2, #4
 8001a4c:	4918      	ldr	r1, [pc, #96]	; (8001ab0 <BME280_ReadTemperature+0xb8>)
 8001a4e:	8809      	ldrh	r1, [r1, #0]
 8001a50:	1a52      	subs	r2, r2, r1
	int32_t tmp_2 = (((((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1)) *
 8001a52:	fb02 f303 	mul.w	r3, r2, r3
		((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1))) >> 12) *
 8001a56:	0b1b      	lsrs	r3, r3, #12
		((int32_t)CalibData.tempValue.dig_T3)) >> 14;
 8001a58:	4a15      	ldr	r2, [pc, #84]	; (8001ab0 <BME280_ReadTemperature+0xb8>)
 8001a5a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1))) >> 12) *
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.tempValue.dig_T3)) >> 14;
 8001a62:	0b9b      	lsrs	r3, r3, #14
	int32_t tmp_2 = (((((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1)) *
 8001a64:	607b      	str	r3, [r7, #4]

	tFineValue = tmp_1 + tmp_2;
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a11      	ldr	r2, [pc, #68]	; (8001ab4 <BME280_ReadTemperature+0xbc>)
 8001a6e:	6013      	str	r3, [r2, #0]
	readTemp = ((tFineValue * 5 + 128) >> 8);
 8001a70:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <BME280_ReadTemperature+0xbc>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	3380      	adds	r3, #128	; 0x80
 8001a7c:	121b      	asrs	r3, r3, #8
 8001a7e:	ee07 3a90 	vmov	s15, r3
 8001a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a86:	edc7 7a03 	vstr	s15, [r7, #12]
	readTemp /= 100.0f;
 8001a8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a8e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001ab8 <BME280_ReadTemperature+0xc0>
 8001a92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a96:	edc7 7a03 	vstr	s15, [r7, #12]

	return readTemp;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	ee07 3a90 	vmov	s15, r3
}
 8001aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	477fff00 	.word	0x477fff00
 8001ab0:	200001b4 	.word	0x200001b4
 8001ab4:	20000090 	.word	0x20000090
 8001ab8:	42c80000 	.word	0x42c80000

08001abc <BME280_ReadPressure>:


float BME280_ReadPressure(void)
{
 8001abc:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001ac0:	b08c      	sub	sp, #48	; 0x30
 8001ac2:	af00      	add	r7, sp, #0
	float pressFloat = 0.0f;
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
	int64_t presureInt = 0;
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	f04f 0400 	mov.w	r4, #0
 8001ad2:	e9c7 3408 	strd	r3, r4, [r7, #32]
	uint32_t presureRaw = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
	uint32_t presUint = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
	int64_t tmp_1 = 0;
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	f04f 0400 	mov.w	r4, #0
 8001ae6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	int64_t tmp_2 = 0;
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	f04f 0400 	mov.w	r4, #0
 8001af2:	e9c7 3402 	strd	r3, r4, [r7, #8]

	BME280_ReadTemperature();
 8001af6:	f7ff ff7f 	bl	80019f8 <BME280_ReadTemperature>
	bme280_ReadRegDataConvert24(BME280_REGISTER_PRESSUREDATA, &presureRaw);
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	4619      	mov	r1, r3
 8001afe:	20f7      	movs	r0, #247	; 0xf7
 8001b00:	f000 fb4c 	bl	800219c <bme280_ReadRegDataConvert24>

    if (presureRaw == 0x800000)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b0a:	d101      	bne.n	8001b10 <BME280_ReadPressure+0x54>
    {
    	return 0xFFFF;
 8001b0c:	4b67      	ldr	r3, [pc, #412]	; (8001cac <BME280_ReadPressure+0x1f0>)
 8001b0e:	e1e1      	b.n	8001ed4 <BME280_ReadPressure+0x418>
    }

    presureRaw >>= 4;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	091b      	lsrs	r3, r3, #4
 8001b14:	607b      	str	r3, [r7, #4]

    tmp_1 = ((int64_t) tFineValue) - 128000;
 8001b16:	4b66      	ldr	r3, [pc, #408]	; (8001cb0 <BME280_ReadPressure+0x1f4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001b20:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001b24:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001b28:	e9c7 3404 	strd	r3, r4, [r7, #16]
    tmp_2 = tmp_1 * tmp_1 * (int64_t)CalibData.presureValue.dig_P6;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	fb02 f203 	mul.w	r2, r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	6939      	ldr	r1, [r7, #16]
 8001b38:	fb01 f303 	mul.w	r3, r1, r3
 8001b3c:	441a      	add	r2, r3
 8001b3e:	6939      	ldr	r1, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	fba1 3403 	umull	r3, r4, r1, r3
 8001b46:	4422      	add	r2, r4
 8001b48:	4614      	mov	r4, r2
 8001b4a:	4a5a      	ldr	r2, [pc, #360]	; (8001cb4 <BME280_ReadPressure+0x1f8>)
 8001b4c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001b50:	b211      	sxth	r1, r2
 8001b52:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001b56:	fb01 f504 	mul.w	r5, r1, r4
 8001b5a:	fb03 f002 	mul.w	r0, r3, r2
 8001b5e:	4428      	add	r0, r5
 8001b60:	fba3 3401 	umull	r3, r4, r3, r1
 8001b64:	1902      	adds	r2, r0, r4
 8001b66:	4614      	mov	r4, r2
 8001b68:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8001b6c:	e9c7 3402 	strd	r3, r4, [r7, #8]
    tmp_2 = tmp_2 + ((tmp_1 * (int64_t)CalibData.presureValue.dig_P5) << 17);
 8001b70:	4b50      	ldr	r3, [pc, #320]	; (8001cb4 <BME280_ReadPressure+0x1f8>)
 8001b72:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	fb04 f102 	mul.w	r1, r4, r2
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	fb03 f202 	mul.w	r2, r3, r2
 8001b88:	1888      	adds	r0, r1, r2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	fba2 1203 	umull	r1, r2, r2, r3
 8001b90:	1883      	adds	r3, r0, r2
 8001b92:	461a      	mov	r2, r3
 8001b94:	f04f 0500 	mov.w	r5, #0
 8001b98:	f04f 0600 	mov.w	r6, #0
 8001b9c:	0456      	lsls	r6, r2, #17
 8001b9e:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8001ba2:	044d      	lsls	r5, r1, #17
 8001ba4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001ba8:	186b      	adds	r3, r5, r1
 8001baa:	eb46 0402 	adc.w	r4, r6, r2
 8001bae:	e9c7 3402 	strd	r3, r4, [r7, #8]
    tmp_2 = tmp_2 + ((int64_t)CalibData.presureValue.dig_P4 << 35);
 8001bb2:	4b40      	ldr	r3, [pc, #256]	; (8001cb4 <BME280_ReadPressure+0x1f8>)
 8001bb4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001bb8:	b219      	sxth	r1, r3
 8001bba:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001bbe:	f04f 0500 	mov.w	r5, #0
 8001bc2:	f04f 0600 	mov.w	r6, #0
 8001bc6:	00ce      	lsls	r6, r1, #3
 8001bc8:	2500      	movs	r5, #0
 8001bca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001bce:	186b      	adds	r3, r5, r1
 8001bd0:	eb46 0402 	adc.w	r4, r6, r2
 8001bd4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	tmp_1 = ((tmp_1 * tmp_1 * (int64_t)CalibData.presureValue.dig_P3) >> 8) + ((tmp_1 * (int64_t)CalibData.presureValue.dig_P2) << 12);
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	fb02 f203 	mul.w	r2, r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	6939      	ldr	r1, [r7, #16]
 8001be4:	fb01 f303 	mul.w	r3, r1, r3
 8001be8:	441a      	add	r2, r3
 8001bea:	6939      	ldr	r1, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	fba1 3403 	umull	r3, r4, r1, r3
 8001bf2:	4422      	add	r2, r4
 8001bf4:	4614      	mov	r4, r2
 8001bf6:	4a2f      	ldr	r2, [pc, #188]	; (8001cb4 <BME280_ReadPressure+0x1f8>)
 8001bf8:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001bfc:	b211      	sxth	r1, r2
 8001bfe:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001c02:	fb01 f504 	mul.w	r5, r1, r4
 8001c06:	fb03 f002 	mul.w	r0, r3, r2
 8001c0a:	4428      	add	r0, r5
 8001c0c:	fba3 3401 	umull	r3, r4, r3, r1
 8001c10:	1902      	adds	r2, r0, r4
 8001c12:	4614      	mov	r4, r2
 8001c14:	f04f 0100 	mov.w	r1, #0
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	0a19      	lsrs	r1, r3, #8
 8001c1e:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001c22:	1222      	asrs	r2, r4, #8
 8001c24:	4b23      	ldr	r3, [pc, #140]	; (8001cb4 <BME280_ReadPressure+0x1f8>)
 8001c26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c2a:	b21b      	sxth	r3, r3
 8001c2c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001c30:	6938      	ldr	r0, [r7, #16]
 8001c32:	fb04 f500 	mul.w	r5, r4, r0
 8001c36:	6978      	ldr	r0, [r7, #20]
 8001c38:	fb03 f000 	mul.w	r0, r3, r0
 8001c3c:	4428      	add	r0, r5
 8001c3e:	693d      	ldr	r5, [r7, #16]
 8001c40:	fba5 5603 	umull	r5, r6, r5, r3
 8001c44:	1983      	adds	r3, r0, r6
 8001c46:	461e      	mov	r6, r3
 8001c48:	f04f 0b00 	mov.w	fp, #0
 8001c4c:	f04f 0c00 	mov.w	ip, #0
 8001c50:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8001c54:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8001c58:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 8001c5c:	eb1b 0301 	adds.w	r3, fp, r1
 8001c60:	eb4c 0402 	adc.w	r4, ip, r2
 8001c64:	e9c7 3404 	strd	r3, r4, [r7, #16]
	tmp_1 = (((((int64_t)1) << 47) + tmp_1)) * ((int64_t)CalibData.presureValue.dig_P1) >> 33;
 8001c68:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001c6c:	1c19      	adds	r1, r3, #0
 8001c6e:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <BME280_ReadPressure+0x1f8>)
 8001c74:	88db      	ldrh	r3, [r3, #6]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	f04f 0400 	mov.w	r4, #0
 8001c7c:	fb03 f502 	mul.w	r5, r3, r2
 8001c80:	fb01 f004 	mul.w	r0, r1, r4
 8001c84:	4428      	add	r0, r5
 8001c86:	fba1 3403 	umull	r3, r4, r1, r3
 8001c8a:	1902      	adds	r2, r0, r4
 8001c8c:	4614      	mov	r4, r2
 8001c8e:	f04f 0100 	mov.w	r1, #0
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	1061      	asrs	r1, r4, #1
 8001c98:	17e2      	asrs	r2, r4, #31
 8001c9a:	e9c7 1204 	strd	r1, r2, [r7, #16]

	if (tmp_1 == 0) {
 8001c9e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001ca2:	4323      	orrs	r3, r4
 8001ca4:	d108      	bne.n	8001cb8 <BME280_ReadPressure+0x1fc>
		return 0;
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	e113      	b.n	8001ed4 <BME280_ReadPressure+0x418>
 8001cac:	477fff00 	.word	0x477fff00
 8001cb0:	20000090 	.word	0x20000090
 8001cb4:	200001b4 	.word	0x200001b4
	}

	presureInt = 1048576 - presureRaw;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001cbe:	f04f 0400 	mov.w	r4, #0
 8001cc2:	e9c7 3408 	strd	r3, r4, [r7, #32]
	presureInt = (((presureInt << 31) - tmp_2) * 3125) / tmp_1;
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	ea4f 0953 	mov.w	r9, r3, lsr #1
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8001cd2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001cd6:	4645      	mov	r5, r8
 8001cd8:	464e      	mov	r6, r9
 8001cda:	1aed      	subs	r5, r5, r3
 8001cdc:	eb66 0604 	sbc.w	r6, r6, r4
 8001ce0:	46a8      	mov	r8, r5
 8001ce2:	46b1      	mov	r9, r6
 8001ce4:	eb18 0308 	adds.w	r3, r8, r8
 8001ce8:	eb49 0409 	adc.w	r4, r9, r9
 8001cec:	4698      	mov	r8, r3
 8001cee:	46a1      	mov	r9, r4
 8001cf0:	eb18 0805 	adds.w	r8, r8, r5
 8001cf4:	eb49 0906 	adc.w	r9, r9, r6
 8001cf8:	f04f 0100 	mov.w	r1, #0
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8001d04:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8001d08:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8001d0c:	eb18 0801 	adds.w	r8, r8, r1
 8001d10:	eb49 0902 	adc.w	r9, r9, r2
 8001d14:	f04f 0100 	mov.w	r1, #0
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001d20:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001d24:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001d28:	4688      	mov	r8, r1
 8001d2a:	4691      	mov	r9, r2
 8001d2c:	eb18 0805 	adds.w	r8, r8, r5
 8001d30:	eb49 0906 	adc.w	r9, r9, r6
 8001d34:	f04f 0100 	mov.w	r1, #0
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001d40:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001d44:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001d48:	4688      	mov	r8, r1
 8001d4a:	4691      	mov	r9, r2
 8001d4c:	eb18 0005 	adds.w	r0, r8, r5
 8001d50:	eb49 0106 	adc.w	r1, r9, r6
 8001d54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d58:	f7fe ff2a 	bl	8000bb0 <__aeabi_ldivmod>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	460c      	mov	r4, r1
 8001d60:	e9c7 3408 	strd	r3, r4, [r7, #32]

	tmp_1 = (((int64_t)CalibData.presureValue.dig_P9) * (presureInt >> 13) * (presureInt >> 13)) >> 25;
 8001d64:	4b5f      	ldr	r3, [pc, #380]	; (8001ee4 <BME280_ReadPressure+0x428>)
 8001d66:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001d6a:	b219      	sxth	r1, r3
 8001d6c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001d70:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	f04f 0400 	mov.w	r4, #0
 8001d7c:	0b6b      	lsrs	r3, r5, #13
 8001d7e:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001d82:	1374      	asrs	r4, r6, #13
 8001d84:	fb03 f502 	mul.w	r5, r3, r2
 8001d88:	fb01 f004 	mul.w	r0, r1, r4
 8001d8c:	4428      	add	r0, r5
 8001d8e:	fba1 1203 	umull	r1, r2, r1, r3
 8001d92:	1883      	adds	r3, r0, r2
 8001d94:	461a      	mov	r2, r3
 8001d96:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	f04f 0400 	mov.w	r4, #0
 8001da2:	0b6b      	lsrs	r3, r5, #13
 8001da4:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001da8:	1374      	asrs	r4, r6, #13
 8001daa:	fb03 f502 	mul.w	r5, r3, r2
 8001dae:	fb01 f004 	mul.w	r0, r1, r4
 8001db2:	4428      	add	r0, r5
 8001db4:	fba1 1203 	umull	r1, r2, r1, r3
 8001db8:	1883      	adds	r3, r0, r2
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	f04f 0400 	mov.w	r4, #0
 8001dc4:	0e4b      	lsrs	r3, r1, #25
 8001dc6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8001dca:	1654      	asrs	r4, r2, #25
 8001dcc:	e9c7 3404 	strd	r3, r4, [r7, #16]
	tmp_2 = (((int64_t)CalibData.presureValue.dig_P8) * presureInt) >> 19;
 8001dd0:	4b44      	ldr	r3, [pc, #272]	; (8001ee4 <BME280_ReadPressure+0x428>)
 8001dd2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001dd6:	b21b      	sxth	r3, r3
 8001dd8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001ddc:	6a3a      	ldr	r2, [r7, #32]
 8001dde:	fb04 f102 	mul.w	r1, r4, r2
 8001de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de4:	fb03 f202 	mul.w	r2, r3, r2
 8001de8:	1888      	adds	r0, r1, r2
 8001dea:	6a3a      	ldr	r2, [r7, #32]
 8001dec:	fba2 1203 	umull	r1, r2, r2, r3
 8001df0:	1883      	adds	r3, r0, r2
 8001df2:	461a      	mov	r2, r3
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	f04f 0400 	mov.w	r4, #0
 8001dfc:	0ccb      	lsrs	r3, r1, #19
 8001dfe:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001e02:	14d4      	asrs	r4, r2, #19
 8001e04:	e9c7 3402 	strd	r3, r4, [r7, #8]

	presureInt = ((presureInt + tmp_1 + tmp_2) >> 8) + ((int64_t)CalibData.presureValue.dig_P7 << 4);
 8001e08:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001e0c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001e10:	eb11 0803 	adds.w	r8, r1, r3
 8001e14:	eb42 0904 	adc.w	r9, r2, r4
 8001e18:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001e1c:	eb13 0508 	adds.w	r5, r3, r8
 8001e20:	eb44 0609 	adc.w	r6, r4, r9
 8001e24:	f04f 0100 	mov.w	r1, #0
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	0a29      	lsrs	r1, r5, #8
 8001e2e:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8001e32:	1232      	asrs	r2, r6, #8
 8001e34:	4b2b      	ldr	r3, [pc, #172]	; (8001ee4 <BME280_ReadPressure+0x428>)
 8001e36:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001e3a:	b21d      	sxth	r5, r3
 8001e3c:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001e40:	f04f 0800 	mov.w	r8, #0
 8001e44:	f04f 0900 	mov.w	r9, #0
 8001e48:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8001e4c:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8001e50:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001e54:	eb18 0301 	adds.w	r3, r8, r1
 8001e58:	eb49 0402 	adc.w	r4, r9, r2
 8001e5c:	e9c7 3408 	strd	r3, r4, [r7, #32]

	presUint = ((presureInt >> 8) * 1000) + (((presureInt & 0xff) * 390625) / 100000);
 8001e60:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	f04f 0400 	mov.w	r4, #0
 8001e6c:	0a0b      	lsrs	r3, r1, #8
 8001e6e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001e72:	1214      	asrs	r4, r2, #8
 8001e74:	461a      	mov	r2, r3
 8001e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e7a:	fb03 f502 	mul.w	r5, r3, r2
 8001e7e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001e82:	f04f 01ff 	mov.w	r1, #255	; 0xff
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	ea03 0801 	and.w	r8, r3, r1
 8001e8e:	ea04 0902 	and.w	r9, r4, r2
 8001e92:	4a15      	ldr	r2, [pc, #84]	; (8001ee8 <BME280_ReadPressure+0x42c>)
 8001e94:	fb02 f109 	mul.w	r1, r2, r9
 8001e98:	2200      	movs	r2, #0
 8001e9a:	fb02 f208 	mul.w	r2, r2, r8
 8001e9e:	440a      	add	r2, r1
 8001ea0:	4911      	ldr	r1, [pc, #68]	; (8001ee8 <BME280_ReadPressure+0x42c>)
 8001ea2:	fba8 0101 	umull	r0, r1, r8, r1
 8001ea6:	1853      	adds	r3, r2, r1
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4a10      	ldr	r2, [pc, #64]	; (8001eec <BME280_ReadPressure+0x430>)
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	f7fe fe7e 	bl	8000bb0 <__aeabi_ldivmod>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	460c      	mov	r4, r1
 8001eb8:	442b      	add	r3, r5
 8001eba:	61fb      	str	r3, [r7, #28]
	pressFloat = presUint / 100.0f;
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ec6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001ef0 <BME280_ReadPressure+0x434>
 8001eca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ece:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	return pressFloat;
 8001ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed4:	ee07 3a90 	vmov	s15, r3
}
 8001ed8:	eeb0 0a67 	vmov.f32	s0, s15
 8001edc:	3730      	adds	r7, #48	; 0x30
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8001ee4:	200001b4 	.word	0x200001b4
 8001ee8:	0005f5e1 	.word	0x0005f5e1
 8001eec:	000186a0 	.word	0x000186a0
 8001ef0:	42c80000 	.word	0x42c80000

08001ef4 <BME280_ReadHumidity>:


float BME280_ReadHumidity(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
	float humidConverted = 0.0f;
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
	int16_t humidRawValue = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	807b      	strh	r3, [r7, #2]
	int32_t humidRaw32 = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60bb      	str	r3, [r7, #8]
	int32_t tmpValue = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	607b      	str	r3, [r7, #4]

	BME280_ReadTemperature();
 8001f0c:	f7ff fd74 	bl	80019f8 <BME280_ReadTemperature>
	bme280_ReadSignedData16_Convert(BME280_REGISTER_HUMIDDATA, &humidRawValue);
 8001f10:	1cbb      	adds	r3, r7, #2
 8001f12:	4619      	mov	r1, r3
 8001f14:	20fd      	movs	r0, #253	; 0xfd
 8001f16:	f000 f928 	bl	800216a <bme280_ReadSignedData16_Convert>
	if(humidRawValue == 0x8000)
	{
		return 0xFFFF;
	}

	humidRaw32 = ((int32_t)humidRawValue)&0x0000FFFF;
 8001f1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	60bb      	str	r3, [r7, #8]

	tmpValue = (tFineValue - ((int32_t)76800));
 8001f22:	4b35      	ldr	r3, [pc, #212]	; (8001ff8 <BME280_ReadHumidity+0x104>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001f2a:	607b      	str	r3, [r7, #4]
	tmpValue = (((((humidRaw32 << 14) - (((int32_t)CalibData.humidValue.dig_H4) << 20) -
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	039a      	lsls	r2, r3, #14
 8001f30:	4b32      	ldr	r3, [pc, #200]	; (8001ffc <BME280_ReadHumidity+0x108>)
 8001f32:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f36:	051b      	lsls	r3, r3, #20
 8001f38:	1ad2      	subs	r2, r2, r3
		(((int32_t)CalibData.humidValue.dig_H5) * tmpValue)) + ((int32_t)16384)) >> 15) *
 8001f3a:	4b30      	ldr	r3, [pc, #192]	; (8001ffc <BME280_ReadHumidity+0x108>)
 8001f3c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f40:	4619      	mov	r1, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	fb03 f301 	mul.w	r3, r3, r1
	tmpValue = (((((humidRaw32 << 14) - (((int32_t)CalibData.humidValue.dig_H4) << 20) -
 8001f48:	1ad3      	subs	r3, r2, r3
		(((int32_t)CalibData.humidValue.dig_H5) * tmpValue)) + ((int32_t)16384)) >> 15) *
 8001f4a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001f4e:	13db      	asrs	r3, r3, #15
		(((((((tmpValue * ((int32_t)CalibData.humidValue.dig_H6)) >> 10) *
 8001f50:	4a2a      	ldr	r2, [pc, #168]	; (8001ffc <BME280_ReadHumidity+0x108>)
 8001f52:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001f56:	4611      	mov	r1, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	fb02 f201 	mul.w	r2, r2, r1
 8001f5e:	1292      	asrs	r2, r2, #10
		(((tmpValue * ((int32_t)CalibData.humidValue.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8001f60:	4926      	ldr	r1, [pc, #152]	; (8001ffc <BME280_ReadHumidity+0x108>)
 8001f62:	7f09      	ldrb	r1, [r1, #28]
 8001f64:	4608      	mov	r0, r1
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	fb01 f100 	mul.w	r1, r1, r0
 8001f6c:	12c9      	asrs	r1, r1, #11
 8001f6e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
		(((((((tmpValue * ((int32_t)CalibData.humidValue.dig_H6)) >> 10) *
 8001f72:	fb01 f202 	mul.w	r2, r1, r2
		(((tmpValue * ((int32_t)CalibData.humidValue.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8001f76:	1292      	asrs	r2, r2, #10
 8001f78:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
		((int32_t)2097152)) * ((int32_t)CalibData.humidValue.dig_H2) + 8192) >> 14));
 8001f7c:	491f      	ldr	r1, [pc, #124]	; (8001ffc <BME280_ReadHumidity+0x108>)
 8001f7e:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001f82:	fb01 f202 	mul.w	r2, r1, r2
 8001f86:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001f8a:	1392      	asrs	r2, r2, #14
	tmpValue = (((((humidRaw32 << 14) - (((int32_t)CalibData.humidValue.dig_H4) << 20) -
 8001f8c:	fb02 f303 	mul.w	r3, r2, r3
 8001f90:	607b      	str	r3, [r7, #4]

	tmpValue = (tmpValue - (((((tmpValue >> 15) * (tmpValue >> 15)) >> 7) *
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	13db      	asrs	r3, r3, #15
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	13d2      	asrs	r2, r2, #15
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	11db      	asrs	r3, r3, #7
		((int32_t)CalibData.humidValue.dig_H1)) >> 4));
 8001fa0:	4a16      	ldr	r2, [pc, #88]	; (8001ffc <BME280_ReadHumidity+0x108>)
 8001fa2:	7e12      	ldrb	r2, [r2, #24]
	tmpValue = (tmpValue - (((((tmpValue >> 15) * (tmpValue >> 15)) >> 7) *
 8001fa4:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.humidValue.dig_H1)) >> 4));
 8001fa8:	111b      	asrs	r3, r3, #4
	tmpValue = (tmpValue - (((((tmpValue >> 15) * (tmpValue >> 15)) >> 7) *
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	607b      	str	r3, [r7, #4]
	tmpValue = (tmpValue < 0) ? 0 : tmpValue;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001fb6:	607b      	str	r3, [r7, #4]
	tmpValue = (tmpValue > 419430400) ? 419430400 : tmpValue;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001fbe:	bfa8      	it	ge
 8001fc0:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001fc4:	607b      	str	r3, [r7, #4]

	humidConverted = (tmpValue>>12);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	131b      	asrs	r3, r3, #12
 8001fca:	ee07 3a90 	vmov	s15, r3
 8001fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd2:	edc7 7a03 	vstr	s15, [r7, #12]
	humidConverted /= 1024.0f;
 8001fd6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fda:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002000 <BME280_ReadHumidity+0x10c>
 8001fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fe2:	edc7 7a03 	vstr	s15, [r7, #12]

	return humidConverted;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	ee07 3a90 	vmov	s15, r3
}
 8001fec:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000090 	.word	0x20000090
 8001ffc:	200001b4 	.word	0x200001b4
 8002000:	44800000 	.word	0x44800000
 8002004:	00000000 	.word	0x00000000

08002008 <BME280_ReadAltitudeDefSeaLevel>:
	return altitude;
}


float BME280_ReadAltitudeDefSeaLevel(void)
{
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
	float altitude = 0.0f;
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	607b      	str	r3, [r7, #4]
	float presure = BME280_ReadPressure();
 8002014:	f7ff fd52 	bl	8001abc <BME280_ReadPressure>
 8002018:	ed87 0a00 	vstr	s0, [r7]

	altitude = 44330.0 * (1.0 - pow(presure/kSEA_LEVEL_PRESURE_PA, 0.1903));
 800201c:	edd7 7a00 	vldr	s15, [r7]
 8002020:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002098 <BME280_ReadAltitudeDefSeaLevel+0x90>
 8002024:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002028:	ee16 0a90 	vmov	r0, s13
 800202c:	f7fe fa40 	bl	80004b0 <__aeabi_f2d>
 8002030:	4603      	mov	r3, r0
 8002032:	460c      	mov	r4, r1
 8002034:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8002088 <BME280_ReadAltitudeDefSeaLevel+0x80>
 8002038:	ec44 3b10 	vmov	d0, r3, r4
 800203c:	f006 fc4e 	bl	80088dc <pow>
 8002040:	ec54 3b10 	vmov	r3, r4, d0
 8002044:	461a      	mov	r2, r3
 8002046:	4623      	mov	r3, r4
 8002048:	f04f 0000 	mov.w	r0, #0
 800204c:	4913      	ldr	r1, [pc, #76]	; (800209c <BME280_ReadAltitudeDefSeaLevel+0x94>)
 800204e:	f7fe f8cf 	bl	80001f0 <__aeabi_dsub>
 8002052:	4603      	mov	r3, r0
 8002054:	460c      	mov	r4, r1
 8002056:	4618      	mov	r0, r3
 8002058:	4621      	mov	r1, r4
 800205a:	a30d      	add	r3, pc, #52	; (adr r3, 8002090 <BME280_ReadAltitudeDefSeaLevel+0x88>)
 800205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002060:	f7fe fa7e 	bl	8000560 <__aeabi_dmul>
 8002064:	4603      	mov	r3, r0
 8002066:	460c      	mov	r4, r1
 8002068:	4618      	mov	r0, r3
 800206a:	4621      	mov	r1, r4
 800206c:	f7fe fd50 	bl	8000b10 <__aeabi_d2f>
 8002070:	4603      	mov	r3, r0
 8002072:	607b      	str	r3, [r7, #4]

	return altitude;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	ee07 3a90 	vmov	s15, r3
}
 800207a:	eeb0 0a67 	vmov.f32	s0, s15
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bd90      	pop	{r4, r7, pc}
 8002084:	f3af 8000 	nop.w
 8002088:	1a36e2eb 	.word	0x1a36e2eb
 800208c:	3fc85bc0 	.word	0x3fc85bc0
 8002090:	00000000 	.word	0x00000000
 8002094:	40e5a540 	.word	0x40e5a540
 8002098:	49795420 	.word	0x49795420
 800209c:	3ff00000 	.word	0x3ff00000

080020a0 <bme280_WriteReg>:

//Communication with BME280
static void bme280_WriteReg(uint8_t readRegister, uint8_t valueToWrite)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	460a      	mov	r2, r1
 80020aa:	71fb      	strb	r3, [r7, #7]
 80020ac:	4613      	mov	r3, r2
 80020ae:	71bb      	strb	r3, [r7, #6]
  I2Cx_WriteData(BME280_ADDRESS, readRegister, valueToWrite);
 80020b0:	79ba      	ldrb	r2, [r7, #6]
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	4619      	mov	r1, r3
 80020b6:	20ec      	movs	r0, #236	; 0xec
 80020b8:	f7ff fb68 	bl	800178c <I2Cx_WriteData>
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <bme280_ReadReg>:
//------------------------------------------------
static uint8_t bme280_ReadReg(uint8_t readRegister)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
  uint8_t readedStatus = I2Cx_ReadData(BME280_ADDRESS, readRegister);
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	4619      	mov	r1, r3
 80020d2:	20ec      	movs	r0, #236	; 0xec
 80020d4:	f7ff fb80 	bl	80017d8 <I2Cx_ReadData>
 80020d8:	4603      	mov	r3, r0
 80020da:	73fb      	strb	r3, [r7, #15]
  return readedStatus;
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <bme280_ReadRegPtr>:
//------------------------------------------------
static void bme280_ReadRegPtr(uint8_t readRegister, uint8_t *ptrReadedValue)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	6039      	str	r1, [r7, #0]
 80020f0:	71fb      	strb	r3, [r7, #7]
  *(uint8_t *)ptrReadedValue = I2Cx_ReadData(BME280_ADDRESS, readRegister);
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	4619      	mov	r1, r3
 80020f6:	20ec      	movs	r0, #236	; 0xec
 80020f8:	f7ff fb6e 	bl	80017d8 <I2Cx_ReadData>
 80020fc:	4603      	mov	r3, r0
 80020fe:	461a      	mov	r2, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	701a      	strb	r2, [r3, #0]
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <bme280_ReadStatus>:
//------------------------------------------------
static uint8_t bme280_ReadStatus(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
  uint8_t res = bme280_ReadReg(BME280_REGISTER_STATUS) & 0x09;
 8002112:	20f3      	movs	r0, #243	; 0xf3
 8002114:	f7ff ffd6 	bl	80020c4 <bme280_ReadReg>
 8002118:	4603      	mov	r3, r0
 800211a:	f003 0309 	and.w	r3, r3, #9
 800211e:	71fb      	strb	r3, [r7, #7]
  return res;
 8002120:	79fb      	ldrb	r3, [r7, #7]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <bme280_ReadData16>:
//------------------------------------------------
static void bme280_ReadData16(uint8_t readRegister, uint16_t *ptrReadedValue)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	6039      	str	r1, [r7, #0]
 8002134:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS, readRegister, ptrReadedValue);
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	4619      	mov	r1, r3
 800213c:	20ec      	movs	r0, #236	; 0xec
 800213e:	f7ff fb75 	bl	800182c <I2Cx_ReadData16>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <bme280_ReadSignedData16>:
//------------------------------------------------
static void bme280_ReadSignedData16(uint8_t readRegister, int16_t *ptrReadedValue)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	4603      	mov	r3, r0
 8002152:	6039      	str	r1, [r7, #0]
 8002154:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS, readRegister, (uint16_t*)ptrReadedValue);
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	4619      	mov	r1, r3
 800215c:	20ec      	movs	r0, #236	; 0xec
 800215e:	f7ff fb65 	bl	800182c <I2Cx_ReadData16>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <bme280_ReadSignedData16_Convert>:
//------------------------------------------------
static void bme280_ReadSignedData16_Convert(uint8_t readRegister, int16_t *ptrReadedValue)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	4603      	mov	r3, r0
 8002172:	6039      	str	r1, [r7, #0]
 8002174:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS, readRegister, (uint16_t*)ptrReadedValue);
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	4619      	mov	r1, r3
 800217c:	20ec      	movs	r0, #236	; 0xec
 800217e:	f7ff fb55 	bl	800182c <I2Cx_ReadData16>
  *(uint16_t *)ptrReadedValue = convert16BitData(*(uint16_t *)ptrReadedValue);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff face 	bl	8001728 <convert16BitData>
 800218c:	4603      	mov	r3, r0
 800218e:	461a      	mov	r2, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	801a      	strh	r2, [r3, #0]
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <bme280_ReadRegDataConvert24>:
//------------------------------------------------
static void bme280_ReadRegDataConvert24(uint8_t readRegister, uint32_t *ptrReadedValue)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	6039      	str	r1, [r7, #0]
 80021a6:	71fb      	strb	r3, [r7, #7]
	I2Cx_ReadData24(BME280_ADDRESS, readRegister, ptrReadedValue);
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	4619      	mov	r1, r3
 80021ae:	20ec      	movs	r0, #236	; 0xec
 80021b0:	f7ff fb62 	bl	8001878 <I2Cx_ReadData24>
	*(uint32_t *) ptrReadedValue = convert24BitData(*(uint32_t *) ptrReadedValue) & 0x00FFFFFF;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff faca 	bl	8001752 <convert24BitData>
 80021be:	4603      	mov	r3, r0
 80021c0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	601a      	str	r2, [r3, #0]
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <bme280_ReadCoefficients_Temp>:
//------------------------------------------------
/*
 * @brief: read factory set coeficiency
 */
static void bme280_ReadCoefficients_Temp(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
	bme280_ReadData16(BME280_REGISTER_DIG_T1, &CalibData.tempValue.dig_T1);
 80021d4:	4906      	ldr	r1, [pc, #24]	; (80021f0 <bme280_ReadCoefficients_Temp+0x20>)
 80021d6:	2088      	movs	r0, #136	; 0x88
 80021d8:	f7ff ffa7 	bl	800212a <bme280_ReadData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_T2, &CalibData.tempValue.dig_T2);
 80021dc:	4905      	ldr	r1, [pc, #20]	; (80021f4 <bme280_ReadCoefficients_Temp+0x24>)
 80021de:	208a      	movs	r0, #138	; 0x8a
 80021e0:	f7ff ffb3 	bl	800214a <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_T3, &CalibData.tempValue.dig_T3);
 80021e4:	4904      	ldr	r1, [pc, #16]	; (80021f8 <bme280_ReadCoefficients_Temp+0x28>)
 80021e6:	208c      	movs	r0, #140	; 0x8c
 80021e8:	f7ff ffaf 	bl	800214a <bme280_ReadSignedData16>
}
 80021ec:	bf00      	nop
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	200001b4 	.word	0x200001b4
 80021f4:	200001b6 	.word	0x200001b6
 80021f8:	200001b8 	.word	0x200001b8

080021fc <bme280_ReadCoefficients_Pres>:

static void bme280_ReadCoefficients_Pres(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
	bme280_ReadData16(BME280_REGISTER_DIG_P1, &CalibData.presureValue.dig_P1);
 8002200:	4912      	ldr	r1, [pc, #72]	; (800224c <bme280_ReadCoefficients_Pres+0x50>)
 8002202:	208e      	movs	r0, #142	; 0x8e
 8002204:	f7ff ff91 	bl	800212a <bme280_ReadData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P2, &CalibData.presureValue.dig_P2);
 8002208:	4911      	ldr	r1, [pc, #68]	; (8002250 <bme280_ReadCoefficients_Pres+0x54>)
 800220a:	2090      	movs	r0, #144	; 0x90
 800220c:	f7ff ff9d 	bl	800214a <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P3, &CalibData.presureValue.dig_P3);
 8002210:	4910      	ldr	r1, [pc, #64]	; (8002254 <bme280_ReadCoefficients_Pres+0x58>)
 8002212:	2092      	movs	r0, #146	; 0x92
 8002214:	f7ff ff99 	bl	800214a <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P4, &CalibData.presureValue.dig_P4);
 8002218:	490f      	ldr	r1, [pc, #60]	; (8002258 <bme280_ReadCoefficients_Pres+0x5c>)
 800221a:	2094      	movs	r0, #148	; 0x94
 800221c:	f7ff ff95 	bl	800214a <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P5, &CalibData.presureValue.dig_P5);
 8002220:	490e      	ldr	r1, [pc, #56]	; (800225c <bme280_ReadCoefficients_Pres+0x60>)
 8002222:	2096      	movs	r0, #150	; 0x96
 8002224:	f7ff ff91 	bl	800214a <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P6, &CalibData.presureValue.dig_P6);
 8002228:	490d      	ldr	r1, [pc, #52]	; (8002260 <bme280_ReadCoefficients_Pres+0x64>)
 800222a:	2098      	movs	r0, #152	; 0x98
 800222c:	f7ff ff8d 	bl	800214a <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P7, &CalibData.presureValue.dig_P7);
 8002230:	490c      	ldr	r1, [pc, #48]	; (8002264 <bme280_ReadCoefficients_Pres+0x68>)
 8002232:	209a      	movs	r0, #154	; 0x9a
 8002234:	f7ff ff89 	bl	800214a <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P8, &CalibData.presureValue.dig_P8);
 8002238:	490b      	ldr	r1, [pc, #44]	; (8002268 <bme280_ReadCoefficients_Pres+0x6c>)
 800223a:	209c      	movs	r0, #156	; 0x9c
 800223c:	f7ff ff85 	bl	800214a <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P9, &CalibData.presureValue.dig_P9);
 8002240:	490a      	ldr	r1, [pc, #40]	; (800226c <bme280_ReadCoefficients_Pres+0x70>)
 8002242:	209e      	movs	r0, #158	; 0x9e
 8002244:	f7ff ff81 	bl	800214a <bme280_ReadSignedData16>
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200001ba 	.word	0x200001ba
 8002250:	200001bc 	.word	0x200001bc
 8002254:	200001be 	.word	0x200001be
 8002258:	200001c0 	.word	0x200001c0
 800225c:	200001c2 	.word	0x200001c2
 8002260:	200001c4 	.word	0x200001c4
 8002264:	200001c6 	.word	0x200001c6
 8002268:	200001c8 	.word	0x200001c8
 800226c:	200001ca 	.word	0x200001ca

08002270 <bme280_ReadCoefficients_Hum>:

static void bme280_ReadCoefficients_Hum(void)
{
 8002270:	b598      	push	{r3, r4, r7, lr}
 8002272:	af00      	add	r7, sp, #0
	bme280_ReadRegPtr(BME280_REGISTER_DIG_H1, &CalibData.humidValue.dig_H1);
 8002274:	491c      	ldr	r1, [pc, #112]	; (80022e8 <bme280_ReadCoefficients_Hum+0x78>)
 8002276:	20a1      	movs	r0, #161	; 0xa1
 8002278:	f7ff ff35 	bl	80020e6 <bme280_ReadRegPtr>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_H2, &CalibData.humidValue.dig_H2);
 800227c:	491b      	ldr	r1, [pc, #108]	; (80022ec <bme280_ReadCoefficients_Hum+0x7c>)
 800227e:	20e1      	movs	r0, #225	; 0xe1
 8002280:	f7ff ff63 	bl	800214a <bme280_ReadSignedData16>
	bme280_ReadRegPtr(BME280_REGISTER_DIG_H3, &CalibData.humidValue.dig_H3);
 8002284:	491a      	ldr	r1, [pc, #104]	; (80022f0 <bme280_ReadCoefficients_Hum+0x80>)
 8002286:	20e3      	movs	r0, #227	; 0xe3
 8002288:	f7ff ff2d 	bl	80020e6 <bme280_ReadRegPtr>

	CalibData.humidValue.dig_H4 = (bme280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (bme280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 800228c:	20e4      	movs	r0, #228	; 0xe4
 800228e:	f7ff ff19 	bl	80020c4 <bme280_ReadReg>
 8002292:	4603      	mov	r3, r0
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	b21c      	sxth	r4, r3
 8002298:	20e5      	movs	r0, #229	; 0xe5
 800229a:	f7ff ff13 	bl	80020c4 <bme280_ReadReg>
 800229e:	4603      	mov	r3, r0
 80022a0:	b21b      	sxth	r3, r3
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	4323      	orrs	r3, r4
 80022aa:	b21a      	sxth	r2, r3
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <bme280_ReadCoefficients_Hum+0x84>)
 80022ae:	83da      	strh	r2, [r3, #30]
	CalibData.humidValue.dig_H5 = (bme280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (bme280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 80022b0:	20e6      	movs	r0, #230	; 0xe6
 80022b2:	f7ff ff07 	bl	80020c4 <bme280_ReadReg>
 80022b6:	4603      	mov	r3, r0
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	b21c      	sxth	r4, r3
 80022bc:	20e5      	movs	r0, #229	; 0xe5
 80022be:	f7ff ff01 	bl	80020c4 <bme280_ReadReg>
 80022c2:	4603      	mov	r3, r0
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	b21b      	sxth	r3, r3
 80022ca:	4323      	orrs	r3, r4
 80022cc:	b21a      	sxth	r2, r3
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <bme280_ReadCoefficients_Hum+0x84>)
 80022d0:	841a      	strh	r2, [r3, #32]
	CalibData.humidValue.dig_H6 = (int8_t)bme280_ReadReg(BME280_REGISTER_DIG_H6);
 80022d2:	20e7      	movs	r0, #231	; 0xe7
 80022d4:	f7ff fef6 	bl	80020c4 <bme280_ReadReg>
 80022d8:	4603      	mov	r3, r0
 80022da:	b25a      	sxtb	r2, r3
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <bme280_ReadCoefficients_Hum+0x84>)
 80022de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80022e2:	bf00      	nop
 80022e4:	bd98      	pop	{r3, r4, r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200001cc 	.word	0x200001cc
 80022ec:	200001ce 	.word	0x200001ce
 80022f0:	200001d0 	.word	0x200001d0
 80022f4:	200001b4 	.word	0x200001b4

080022f8 <bme280_ReadCoefficients>:

static void bme280_ReadCoefficients(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	bme280_ReadCoefficients_Temp();
 80022fc:	f7ff ff68 	bl	80021d0 <bme280_ReadCoefficients_Temp>

	bme280_ReadCoefficients_Pres();
 8002300:	f7ff ff7c 	bl	80021fc <bme280_ReadCoefficients_Pres>

	bme280_ReadCoefficients_Hum();
 8002304:	f7ff ffb4 	bl	8002270 <bme280_ReadCoefficients_Hum>
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}

0800230c <bme280_SetStandby>:
//------------------------------------------------
static void bme280_SetStandby(BME280_standby_Time_E standByTime)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  uint8_t registerValue = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	73fb      	strb	r3, [r7, #15]

  registerValue = bme280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 800231a:	20f5      	movs	r0, #245	; 0xf5
 800231c:	f7ff fed2 	bl	80020c4 <bme280_ReadReg>
 8002320:	4603      	mov	r3, r0
 8002322:	f003 031f 	and.w	r3, r3, #31
 8002326:	73fb      	strb	r3, [r7, #15]
  registerValue |= standByTime & BME280_STBY_MSK;
 8002328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232c:	f023 031f 	bic.w	r3, r3, #31
 8002330:	b25a      	sxtb	r2, r3
 8002332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002336:	4313      	orrs	r3, r2
 8002338:	b25b      	sxtb	r3, r3
 800233a:	73fb      	strb	r3, [r7, #15]

  bme280_WriteReg(BME280_REG_CONFIG, registerValue);
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	4619      	mov	r1, r3
 8002340:	20f5      	movs	r0, #245	; 0xf5
 8002342:	f7ff fead 	bl	80020a0 <bme280_WriteReg>
}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <bme280_SetFilter>:

static void bme280_SetFilter(BME280_filter_E filter)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	4603      	mov	r3, r0
 8002356:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 800235c:	20f5      	movs	r0, #245	; 0xf5
 800235e:	f7ff feb1 	bl	80020c4 <bme280_ReadReg>
 8002362:	4603      	mov	r3, r0
 8002364:	f023 031c 	bic.w	r3, r3, #28
 8002368:	73fb      	strb	r3, [r7, #15]
	registerValue |= filter & BME280_FILTER_MSK;
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	f003 031c 	and.w	r3, r3, #28
 8002372:	b25a      	sxtb	r2, r3
 8002374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002378:	4313      	orrs	r3, r2
 800237a:	b25b      	sxtb	r3, r3
 800237c:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CONFIG, registerValue);
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	4619      	mov	r1, r3
 8002382:	20f5      	movs	r0, #245	; 0xf5
 8002384:	f7ff fe8c 	bl	80020a0 <bme280_WriteReg>
}
 8002388:	bf00      	nop
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <bme280_SetOversamplingTemper>:

static void bme280_SetOversamplingTemper(BME280_overSamplingTemp_E tempOversampl)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 800239e:	20f4      	movs	r0, #244	; 0xf4
 80023a0:	f7ff fe90 	bl	80020c4 <bme280_ReadReg>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	73fb      	strb	r3, [r7, #15]
	registerValue |= tempOversampl & BME280_OSRS_T_MSK;
 80023ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b0:	f023 031f 	bic.w	r3, r3, #31
 80023b4:	b25a      	sxtb	r2, r3
 80023b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	b25b      	sxtb	r3, r3
 80023be:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CTRL_MEAS, registerValue);
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	4619      	mov	r1, r3
 80023c4:	20f4      	movs	r0, #244	; 0xf4
 80023c6:	f7ff fe6b 	bl	80020a0 <bme280_WriteReg>
}
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <bme280_SetOversamplingPressure>:

static void bme280_SetOversamplingPressure(BME280_overSamplingPres_E presOversampl)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b084      	sub	sp, #16
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 80023e0:	20f4      	movs	r0, #244	; 0xf4
 80023e2:	f7ff fe6f 	bl	80020c4 <bme280_ReadReg>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f023 031c 	bic.w	r3, r3, #28
 80023ec:	73fb      	strb	r3, [r7, #15]
	registerValue |= presOversampl & BME280_OSRS_P_MSK;
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	f003 031c 	and.w	r3, r3, #28
 80023f6:	b25a      	sxtb	r2, r3
 80023f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	b25b      	sxtb	r3, r3
 8002400:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CTRL_MEAS,registerValue);
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	4619      	mov	r1, r3
 8002406:	20f4      	movs	r0, #244	; 0xf4
 8002408:	f7ff fe4a 	bl	80020a0 <bme280_WriteReg>
}
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <bme280_SetOversamplingHum>:

static void bme280_SetOversamplingHum(BME280_overSamplingHum_E humOversampl)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 8002422:	20f2      	movs	r0, #242	; 0xf2
 8002424:	f7ff fe4e 	bl	80020c4 <bme280_ReadReg>
 8002428:	4603      	mov	r3, r0
 800242a:	f023 0307 	bic.w	r3, r3, #7
 800242e:	73fb      	strb	r3, [r7, #15]
	registerValue |= humOversampl & BME280_OSRS_H_MSK;
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	b25a      	sxtb	r2, r3
 800243a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243e:	4313      	orrs	r3, r2
 8002440:	b25b      	sxtb	r3, r3
 8002442:	73fb      	strb	r3, [r7, #15]
	bme280_WriteReg(BME280_REG_CTRL_HUM,registerValue);
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	4619      	mov	r1, r3
 8002448:	20f2      	movs	r0, #242	; 0xf2
 800244a:	f7ff fe29 	bl	80020a0 <bme280_WriteReg>

	/* Reewrite setting to change oversamplig efectivly */
	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS);
 800244e:	20f4      	movs	r0, #244	; 0xf4
 8002450:	f7ff fe38 	bl	80020c4 <bme280_ReadReg>
 8002454:	4603      	mov	r3, r0
 8002456:	73fb      	strb	r3, [r7, #15]
	bme280_WriteReg(BME280_REG_CTRL_MEAS,registerValue);
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	4619      	mov	r1, r3
 800245c:	20f4      	movs	r0, #244	; 0xf4
 800245e:	f7ff fe1f 	bl	80020a0 <bme280_WriteReg>
}
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <bme280_SetMode>:

static void bme280_SetMode(BME280_mode_E mode)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	4603      	mov	r3, r0
 8002472:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 8002478:	20f4      	movs	r0, #244	; 0xf4
 800247a:	f7ff fe23 	bl	80020c4 <bme280_ReadReg>
 800247e:	4603      	mov	r3, r0
 8002480:	f023 0303 	bic.w	r3, r3, #3
 8002484:	73fb      	strb	r3, [r7, #15]
	registerValue |= mode & BME280_MODE_MSK;
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	b25a      	sxtb	r2, r3
 8002490:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002494:	4313      	orrs	r3, r2
 8002496:	b25b      	sxtb	r3, r3
 8002498:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CTRL_MEAS, registerValue);
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	4619      	mov	r1, r3
 800249e:	20f4      	movs	r0, #244	; 0xf4
 80024a0:	f7ff fdfe 	bl	80020a0 <bme280_WriteReg>
}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b4:	4a14      	ldr	r2, [pc, #80]	; (8002508 <_sbrk+0x5c>)
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <_sbrk+0x60>)
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <_sbrk+0x64>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <_sbrk+0x64>)
 80024ca:	4a12      	ldr	r2, [pc, #72]	; (8002514 <_sbrk+0x68>)
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <_sbrk+0x64>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d207      	bcs.n	80024ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024dc:	f004 fea8 	bl	8007230 <__errno>
 80024e0:	4602      	mov	r2, r0
 80024e2:	230c      	movs	r3, #12
 80024e4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ea:	e009      	b.n	8002500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024ec:	4b08      	ldr	r3, [pc, #32]	; (8002510 <_sbrk+0x64>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024f2:	4b07      	ldr	r3, [pc, #28]	; (8002510 <_sbrk+0x64>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	4a05      	ldr	r2, [pc, #20]	; (8002510 <_sbrk+0x64>)
 80024fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024fe:	68fb      	ldr	r3, [r7, #12]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20020000 	.word	0x20020000
 800250c:	00000400 	.word	0x00000400
 8002510:	20000094 	.word	0x20000094
 8002514:	200001f0 	.word	0x200001f0

08002518 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800251c:	4b08      	ldr	r3, [pc, #32]	; (8002540 <SystemInit+0x28>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002522:	4a07      	ldr	r2, [pc, #28]	; (8002540 <SystemInit+0x28>)
 8002524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <SystemInit+0x28>)
 800252e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002532:	609a      	str	r2, [r3, #8]
#endif
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800257c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002548:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800254a:	e003      	b.n	8002554 <LoopCopyDataInit>

0800254c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800254e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002550:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002552:	3104      	adds	r1, #4

08002554 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002554:	480b      	ldr	r0, [pc, #44]	; (8002584 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002556:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002558:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800255a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800255c:	d3f6      	bcc.n	800254c <CopyDataInit>
  ldr  r2, =_sbss
 800255e:	4a0b      	ldr	r2, [pc, #44]	; (800258c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002560:	e002      	b.n	8002568 <LoopFillZerobss>

08002562 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002562:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002564:	f842 3b04 	str.w	r3, [r2], #4

08002568 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800256a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800256c:	d3f9      	bcc.n	8002562 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800256e:	f7ff ffd3 	bl	8002518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002572:	f004 fe63 	bl	800723c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002576:	f7fe fe1b 	bl	80011b0 <main>
  bx  lr    
 800257a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800257c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002580:	08009b40 	.word	0x08009b40
  ldr  r0, =_sdata
 8002584:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002588:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 800258c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8002590:	200001f0 	.word	0x200001f0

08002594 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002594:	e7fe      	b.n	8002594 <ADC_IRQHandler>
	...

08002598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800259c:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <HAL_Init+0x40>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0d      	ldr	r2, [pc, #52]	; (80025d8 <HAL_Init+0x40>)
 80025a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_Init+0x40>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <HAL_Init+0x40>)
 80025ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <HAL_Init+0x40>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <HAL_Init+0x40>)
 80025ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c0:	2003      	movs	r0, #3
 80025c2:	f000 f92b 	bl	800281c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025c6:	2000      	movs	r0, #0
 80025c8:	f000 f808 	bl	80025dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025cc:	f7fe ff4e 	bl	800146c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40023c00 	.word	0x40023c00

080025dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025e4:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_InitTick+0x54>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_InitTick+0x58>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	4619      	mov	r1, r3
 80025ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f943 	bl	8002886 <HAL_SYSTICK_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e00e      	b.n	8002628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b0f      	cmp	r3, #15
 800260e:	d80a      	bhi.n	8002626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002610:	2200      	movs	r2, #0
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	f04f 30ff 	mov.w	r0, #4294967295
 8002618:	f000 f90b 	bl	8002832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800261c:	4a06      	ldr	r2, [pc, #24]	; (8002638 <HAL_InitTick+0x5c>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000000 	.word	0x20000000
 8002634:	20000008 	.word	0x20000008
 8002638:	20000004 	.word	0x20000004

0800263c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_IncTick+0x20>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_IncTick+0x24>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4413      	add	r3, r2
 800264c:	4a04      	ldr	r2, [pc, #16]	; (8002660 <HAL_IncTick+0x24>)
 800264e:	6013      	str	r3, [r2, #0]
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000008 	.word	0x20000008
 8002660:	200001e8 	.word	0x200001e8

08002664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return uwTick;
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <HAL_GetTick+0x14>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	200001e8 	.word	0x200001e8

0800267c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <__NVIC_SetPriorityGrouping+0x44>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002698:	4013      	ands	r3, r2
 800269a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ae:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <__NVIC_SetPriorityGrouping+0x44>)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	60d3      	str	r3, [r2, #12]
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <__NVIC_GetPriorityGrouping+0x18>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	0a1b      	lsrs	r3, r3, #8
 80026ce:	f003 0307 	and.w	r3, r3, #7
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	db0b      	blt.n	800270a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	f003 021f 	and.w	r2, r3, #31
 80026f8:	4907      	ldr	r1, [pc, #28]	; (8002718 <__NVIC_EnableIRQ+0x38>)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	2001      	movs	r0, #1
 8002702:	fa00 f202 	lsl.w	r2, r0, r2
 8002706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	e000e100 	.word	0xe000e100

0800271c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	6039      	str	r1, [r7, #0]
 8002726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272c:	2b00      	cmp	r3, #0
 800272e:	db0a      	blt.n	8002746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	b2da      	uxtb	r2, r3
 8002734:	490c      	ldr	r1, [pc, #48]	; (8002768 <__NVIC_SetPriority+0x4c>)
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	0112      	lsls	r2, r2, #4
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	440b      	add	r3, r1
 8002740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002744:	e00a      	b.n	800275c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	b2da      	uxtb	r2, r3
 800274a:	4908      	ldr	r1, [pc, #32]	; (800276c <__NVIC_SetPriority+0x50>)
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	3b04      	subs	r3, #4
 8002754:	0112      	lsls	r2, r2, #4
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	440b      	add	r3, r1
 800275a:	761a      	strb	r2, [r3, #24]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000e100 	.word	0xe000e100
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002770:	b480      	push	{r7}
 8002772:	b089      	sub	sp, #36	; 0x24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f1c3 0307 	rsb	r3, r3, #7
 800278a:	2b04      	cmp	r3, #4
 800278c:	bf28      	it	cs
 800278e:	2304      	movcs	r3, #4
 8002790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3304      	adds	r3, #4
 8002796:	2b06      	cmp	r3, #6
 8002798:	d902      	bls.n	80027a0 <NVIC_EncodePriority+0x30>
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3b03      	subs	r3, #3
 800279e:	e000      	b.n	80027a2 <NVIC_EncodePriority+0x32>
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a4:	f04f 32ff 	mov.w	r2, #4294967295
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43da      	mvns	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	401a      	ands	r2, r3
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b8:	f04f 31ff 	mov.w	r1, #4294967295
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	fa01 f303 	lsl.w	r3, r1, r3
 80027c2:	43d9      	mvns	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	4313      	orrs	r3, r2
         );
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3724      	adds	r7, #36	; 0x24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027e8:	d301      	bcc.n	80027ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ea:	2301      	movs	r3, #1
 80027ec:	e00f      	b.n	800280e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ee:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <SysTick_Config+0x40>)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027f6:	210f      	movs	r1, #15
 80027f8:	f04f 30ff 	mov.w	r0, #4294967295
 80027fc:	f7ff ff8e 	bl	800271c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <SysTick_Config+0x40>)
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002806:	4b04      	ldr	r3, [pc, #16]	; (8002818 <SysTick_Config+0x40>)
 8002808:	2207      	movs	r2, #7
 800280a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	e000e010 	.word	0xe000e010

0800281c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff ff29 	bl	800267c <__NVIC_SetPriorityGrouping>
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002832:	b580      	push	{r7, lr}
 8002834:	b086      	sub	sp, #24
 8002836:	af00      	add	r7, sp, #0
 8002838:	4603      	mov	r3, r0
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002844:	f7ff ff3e 	bl	80026c4 <__NVIC_GetPriorityGrouping>
 8002848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	6978      	ldr	r0, [r7, #20]
 8002850:	f7ff ff8e 	bl	8002770 <NVIC_EncodePriority>
 8002854:	4602      	mov	r2, r0
 8002856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff5d 	bl	800271c <__NVIC_SetPriority>
}
 8002862:	bf00      	nop
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	4603      	mov	r3, r0
 8002872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff31 	bl	80026e0 <__NVIC_EnableIRQ>
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff ffa2 	bl	80027d8 <SysTick_Config>
 8002894:	4603      	mov	r3, r0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d004      	beq.n	80028bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2280      	movs	r2, #128	; 0x80
 80028b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e00c      	b.n	80028d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2205      	movs	r2, #5
 80028c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028f0:	b2db      	uxtb	r3, r3
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	e159      	b.n	8002bd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800291c:	2201      	movs	r2, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	429a      	cmp	r2, r3
 8002936:	f040 8148 	bne.w	8002bca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d00b      	beq.n	800295a <HAL_GPIO_Init+0x5a>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d007      	beq.n	800295a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800294e:	2b11      	cmp	r3, #17
 8002950:	d003      	beq.n	800295a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b12      	cmp	r3, #18
 8002958:	d130      	bne.n	80029bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	2203      	movs	r2, #3
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002990:	2201      	movs	r2, #1
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 0201 	and.w	r2, r3, #1
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	2203      	movs	r2, #3
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0xfc>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b12      	cmp	r3, #18
 80029fa:	d123      	bne.n	8002a44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	08da      	lsrs	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3208      	adds	r2, #8
 8002a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	220f      	movs	r2, #15
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	08da      	lsrs	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3208      	adds	r2, #8
 8002a3e:	69b9      	ldr	r1, [r7, #24]
 8002a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2203      	movs	r2, #3
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 0203 	and.w	r2, r3, #3
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80a2 	beq.w	8002bca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b56      	ldr	r3, [pc, #344]	; (8002be4 <HAL_GPIO_Init+0x2e4>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4a55      	ldr	r2, [pc, #340]	; (8002be4 <HAL_GPIO_Init+0x2e4>)
 8002a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
 8002a96:	4b53      	ldr	r3, [pc, #332]	; (8002be4 <HAL_GPIO_Init+0x2e4>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aa2:	4a51      	ldr	r2, [pc, #324]	; (8002be8 <HAL_GPIO_Init+0x2e8>)
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	089b      	lsrs	r3, r3, #2
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	220f      	movs	r2, #15
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a48      	ldr	r2, [pc, #288]	; (8002bec <HAL_GPIO_Init+0x2ec>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d019      	beq.n	8002b02 <HAL_GPIO_Init+0x202>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a47      	ldr	r2, [pc, #284]	; (8002bf0 <HAL_GPIO_Init+0x2f0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d013      	beq.n	8002afe <HAL_GPIO_Init+0x1fe>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a46      	ldr	r2, [pc, #280]	; (8002bf4 <HAL_GPIO_Init+0x2f4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00d      	beq.n	8002afa <HAL_GPIO_Init+0x1fa>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a45      	ldr	r2, [pc, #276]	; (8002bf8 <HAL_GPIO_Init+0x2f8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d007      	beq.n	8002af6 <HAL_GPIO_Init+0x1f6>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a44      	ldr	r2, [pc, #272]	; (8002bfc <HAL_GPIO_Init+0x2fc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d101      	bne.n	8002af2 <HAL_GPIO_Init+0x1f2>
 8002aee:	2304      	movs	r3, #4
 8002af0:	e008      	b.n	8002b04 <HAL_GPIO_Init+0x204>
 8002af2:	2307      	movs	r3, #7
 8002af4:	e006      	b.n	8002b04 <HAL_GPIO_Init+0x204>
 8002af6:	2303      	movs	r3, #3
 8002af8:	e004      	b.n	8002b04 <HAL_GPIO_Init+0x204>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e002      	b.n	8002b04 <HAL_GPIO_Init+0x204>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <HAL_GPIO_Init+0x204>
 8002b02:	2300      	movs	r3, #0
 8002b04:	69fa      	ldr	r2, [r7, #28]
 8002b06:	f002 0203 	and.w	r2, r2, #3
 8002b0a:	0092      	lsls	r2, r2, #2
 8002b0c:	4093      	lsls	r3, r2
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b14:	4934      	ldr	r1, [pc, #208]	; (8002be8 <HAL_GPIO_Init+0x2e8>)
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	089b      	lsrs	r3, r3, #2
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b22:	4b37      	ldr	r3, [pc, #220]	; (8002c00 <HAL_GPIO_Init+0x300>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b46:	4a2e      	ldr	r2, [pc, #184]	; (8002c00 <HAL_GPIO_Init+0x300>)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b4c:	4b2c      	ldr	r3, [pc, #176]	; (8002c00 <HAL_GPIO_Init+0x300>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b70:	4a23      	ldr	r2, [pc, #140]	; (8002c00 <HAL_GPIO_Init+0x300>)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b76:	4b22      	ldr	r3, [pc, #136]	; (8002c00 <HAL_GPIO_Init+0x300>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4013      	ands	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b9a:	4a19      	ldr	r2, [pc, #100]	; (8002c00 <HAL_GPIO_Init+0x300>)
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ba0:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <HAL_GPIO_Init+0x300>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bc4:	4a0e      	ldr	r2, [pc, #56]	; (8002c00 <HAL_GPIO_Init+0x300>)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	61fb      	str	r3, [r7, #28]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	2b0f      	cmp	r3, #15
 8002bd4:	f67f aea2 	bls.w	800291c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bd8:	bf00      	nop
 8002bda:	3724      	adds	r7, #36	; 0x24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40013800 	.word	0x40013800
 8002bec:	40020000 	.word	0x40020000
 8002bf0:	40020400 	.word	0x40020400
 8002bf4:	40020800 	.word	0x40020800
 8002bf8:	40020c00 	.word	0x40020c00
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40013c00 	.word	0x40013c00

08002c04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e11f      	b.n	8002e56 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7fe fc46 	bl	80014bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2224      	movs	r2, #36	; 0x24
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0201 	bic.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c68:	f003 f86e 	bl	8005d48 <HAL_RCC_GetPCLK1Freq>
 8002c6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4a7b      	ldr	r2, [pc, #492]	; (8002e60 <HAL_I2C_Init+0x25c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d807      	bhi.n	8002c88 <HAL_I2C_Init+0x84>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4a7a      	ldr	r2, [pc, #488]	; (8002e64 <HAL_I2C_Init+0x260>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	bf94      	ite	ls
 8002c80:	2301      	movls	r3, #1
 8002c82:	2300      	movhi	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	e006      	b.n	8002c96 <HAL_I2C_Init+0x92>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4a77      	ldr	r2, [pc, #476]	; (8002e68 <HAL_I2C_Init+0x264>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	bf94      	ite	ls
 8002c90:	2301      	movls	r3, #1
 8002c92:	2300      	movhi	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0db      	b.n	8002e56 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4a72      	ldr	r2, [pc, #456]	; (8002e6c <HAL_I2C_Init+0x268>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	0c9b      	lsrs	r3, r3, #18
 8002ca8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	4a64      	ldr	r2, [pc, #400]	; (8002e60 <HAL_I2C_Init+0x25c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d802      	bhi.n	8002cd8 <HAL_I2C_Init+0xd4>
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	e009      	b.n	8002cec <HAL_I2C_Init+0xe8>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	4a63      	ldr	r2, [pc, #396]	; (8002e70 <HAL_I2C_Init+0x26c>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	099b      	lsrs	r3, r3, #6
 8002cea:	3301      	adds	r3, #1
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	4956      	ldr	r1, [pc, #344]	; (8002e60 <HAL_I2C_Init+0x25c>)
 8002d08:	428b      	cmp	r3, r1
 8002d0a:	d80d      	bhi.n	8002d28 <HAL_I2C_Init+0x124>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	1e59      	subs	r1, r3, #1
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	bf38      	it	cc
 8002d24:	2304      	movcc	r3, #4
 8002d26:	e04f      	b.n	8002dc8 <HAL_I2C_Init+0x1c4>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d111      	bne.n	8002d54 <HAL_I2C_Init+0x150>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1e58      	subs	r0, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6859      	ldr	r1, [r3, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	440b      	add	r3, r1
 8002d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d42:	3301      	adds	r3, #1
 8002d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bf0c      	ite	eq
 8002d4c:	2301      	moveq	r3, #1
 8002d4e:	2300      	movne	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	e012      	b.n	8002d7a <HAL_I2C_Init+0x176>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	1e58      	subs	r0, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6859      	ldr	r1, [r3, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	0099      	lsls	r1, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	bf0c      	ite	eq
 8002d74:	2301      	moveq	r3, #1
 8002d76:	2300      	movne	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_I2C_Init+0x17e>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e022      	b.n	8002dc8 <HAL_I2C_Init+0x1c4>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10e      	bne.n	8002da8 <HAL_I2C_Init+0x1a4>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1e58      	subs	r0, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6859      	ldr	r1, [r3, #4]
 8002d92:	460b      	mov	r3, r1
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	440b      	add	r3, r1
 8002d98:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da6:	e00f      	b.n	8002dc8 <HAL_I2C_Init+0x1c4>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	1e58      	subs	r0, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6859      	ldr	r1, [r3, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	0099      	lsls	r1, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	6809      	ldr	r1, [r1, #0]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69da      	ldr	r2, [r3, #28]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002df6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6911      	ldr	r1, [r2, #16]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	68d2      	ldr	r2, [r2, #12]
 8002e02:	4311      	orrs	r1, r2
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	000186a0 	.word	0x000186a0
 8002e64:	001e847f 	.word	0x001e847f
 8002e68:	003d08ff 	.word	0x003d08ff
 8002e6c:	431bde83 	.word	0x431bde83
 8002e70:	10624dd3 	.word	0x10624dd3

08002e74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	4608      	mov	r0, r1
 8002e7e:	4611      	mov	r1, r2
 8002e80:	461a      	mov	r2, r3
 8002e82:	4603      	mov	r3, r0
 8002e84:	817b      	strh	r3, [r7, #10]
 8002e86:	460b      	mov	r3, r1
 8002e88:	813b      	strh	r3, [r7, #8]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e8e:	f7ff fbe9 	bl	8002664 <HAL_GetTick>
 8002e92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	f040 80d9 	bne.w	8003054 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	2319      	movs	r3, #25
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	496d      	ldr	r1, [pc, #436]	; (8003060 <HAL_I2C_Mem_Write+0x1ec>)
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f002 f8e7 	bl	8005080 <I2C_WaitOnFlagUntilTimeout>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e0cc      	b.n	8003056 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_I2C_Mem_Write+0x56>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e0c5      	b.n	8003056 <HAL_I2C_Mem_Write+0x1e2>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d007      	beq.n	8002ef0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002efe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2221      	movs	r2, #33	; 0x21
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2240      	movs	r2, #64	; 0x40
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a3a      	ldr	r2, [r7, #32]
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4a4d      	ldr	r2, [pc, #308]	; (8003064 <HAL_I2C_Mem_Write+0x1f0>)
 8002f30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f32:	88f8      	ldrh	r0, [r7, #6]
 8002f34:	893a      	ldrh	r2, [r7, #8]
 8002f36:	8979      	ldrh	r1, [r7, #10]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	9301      	str	r3, [sp, #4]
 8002f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	4603      	mov	r3, r0
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f001 fe76 	bl	8004c34 <I2C_RequestMemoryWrite>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d052      	beq.n	8002ff4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e081      	b.n	8003056 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f002 f968 	bl	800522c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00d      	beq.n	8002f7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d107      	bne.n	8002f7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e06b      	b.n	8003056 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	781a      	ldrb	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d11b      	bne.n	8002ff4 <HAL_I2C_Mem_Write+0x180>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d017      	beq.n	8002ff4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	781a      	ldrb	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1aa      	bne.n	8002f52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f002 f954 	bl	80052ae <I2C_WaitOnBTFFlagUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00d      	beq.n	8003028 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	2b04      	cmp	r3, #4
 8003012:	d107      	bne.n	8003024 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003022:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e016      	b.n	8003056 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	e000      	b.n	8003056 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003054:	2302      	movs	r3, #2
  }
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	00100002 	.word	0x00100002
 8003064:	ffff0000 	.word	0xffff0000

08003068 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08c      	sub	sp, #48	; 0x30
 800306c:	af02      	add	r7, sp, #8
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	4608      	mov	r0, r1
 8003072:	4611      	mov	r1, r2
 8003074:	461a      	mov	r2, r3
 8003076:	4603      	mov	r3, r0
 8003078:	817b      	strh	r3, [r7, #10]
 800307a:	460b      	mov	r3, r1
 800307c:	813b      	strh	r3, [r7, #8]
 800307e:	4613      	mov	r3, r2
 8003080:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003082:	f7ff faef 	bl	8002664 <HAL_GetTick>
 8003086:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b20      	cmp	r3, #32
 8003092:	f040 8208 	bne.w	80034a6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	2319      	movs	r3, #25
 800309c:	2201      	movs	r2, #1
 800309e:	497b      	ldr	r1, [pc, #492]	; (800328c <HAL_I2C_Mem_Read+0x224>)
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f001 ffed 	bl	8005080 <I2C_WaitOnFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80030ac:	2302      	movs	r3, #2
 80030ae:	e1fb      	b.n	80034a8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_I2C_Mem_Read+0x56>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e1f4      	b.n	80034a8 <HAL_I2C_Mem_Read+0x440>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d007      	beq.n	80030e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2222      	movs	r2, #34	; 0x22
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2240      	movs	r2, #64	; 0x40
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800310e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003114:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4a5b      	ldr	r2, [pc, #364]	; (8003290 <HAL_I2C_Mem_Read+0x228>)
 8003124:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003126:	88f8      	ldrh	r0, [r7, #6]
 8003128:	893a      	ldrh	r2, [r7, #8]
 800312a:	8979      	ldrh	r1, [r7, #10]
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	4603      	mov	r3, r0
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f001 fe12 	bl	8004d60 <I2C_RequestMemoryRead>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e1b0      	b.n	80034a8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314a:	2b00      	cmp	r3, #0
 800314c:	d113      	bne.n	8003176 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800314e:	2300      	movs	r3, #0
 8003150:	623b      	str	r3, [r7, #32]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	623b      	str	r3, [r7, #32]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	623b      	str	r3, [r7, #32]
 8003162:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	e184      	b.n	8003480 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317a:	2b01      	cmp	r3, #1
 800317c:	d11b      	bne.n	80031b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	61fb      	str	r3, [r7, #28]
 80031a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	e164      	b.n	8003480 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d11b      	bne.n	80031f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031de:	2300      	movs	r3, #0
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	61bb      	str	r3, [r7, #24]
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	e144      	b.n	8003480 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	617b      	str	r3, [r7, #20]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800320c:	e138      	b.n	8003480 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003212:	2b03      	cmp	r3, #3
 8003214:	f200 80f1 	bhi.w	80033fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321c:	2b01      	cmp	r3, #1
 800321e:	d123      	bne.n	8003268 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003222:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f002 f8b5 	bl	8005394 <I2C_WaitOnRXNEFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e139      	b.n	80034a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325c:	b29b      	uxth	r3, r3
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003266:	e10b      	b.n	8003480 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326c:	2b02      	cmp	r3, #2
 800326e:	d14e      	bne.n	800330e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003276:	2200      	movs	r2, #0
 8003278:	4906      	ldr	r1, [pc, #24]	; (8003294 <HAL_I2C_Mem_Read+0x22c>)
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f001 ff00 	bl	8005080 <I2C_WaitOnFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e10e      	b.n	80034a8 <HAL_I2C_Mem_Read+0x440>
 800328a:	bf00      	nop
 800328c:	00100002 	.word	0x00100002
 8003290:	ffff0000 	.word	0xffff0000
 8003294:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800330c:	e0b8      	b.n	8003480 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003314:	2200      	movs	r2, #0
 8003316:	4966      	ldr	r1, [pc, #408]	; (80034b0 <HAL_I2C_Mem_Read+0x448>)
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f001 feb1 	bl	8005080 <I2C_WaitOnFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0bf      	b.n	80034a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003336:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003370:	2200      	movs	r2, #0
 8003372:	494f      	ldr	r1, [pc, #316]	; (80034b0 <HAL_I2C_Mem_Read+0x448>)
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f001 fe83 	bl	8005080 <I2C_WaitOnFlagUntilTimeout>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e091      	b.n	80034a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003392:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033f8:	e042      	b.n	8003480 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f001 ffc8 	bl	8005394 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e04c      	b.n	80034a8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b04      	cmp	r3, #4
 800344c:	d118      	bne.n	8003480 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003484:	2b00      	cmp	r3, #0
 8003486:	f47f aec2 	bne.w	800320e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	e000      	b.n	80034a8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80034a6:	2302      	movs	r3, #2
  }
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3728      	adds	r7, #40	; 0x28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	00010004 	.word	0x00010004

080034b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034dc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	2b10      	cmp	r3, #16
 80034e2:	d003      	beq.n	80034ec <HAL_I2C_EV_IRQHandler+0x38>
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	2b40      	cmp	r3, #64	; 0x40
 80034e8:	f040 80bd 	bne.w	8003666 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10d      	bne.n	8003522 <HAL_I2C_EV_IRQHandler+0x6e>
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800350c:	d003      	beq.n	8003516 <HAL_I2C_EV_IRQHandler+0x62>
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003514:	d101      	bne.n	800351a <HAL_I2C_EV_IRQHandler+0x66>
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <HAL_I2C_EV_IRQHandler+0x68>
 800351a:	2300      	movs	r3, #0
 800351c:	2b01      	cmp	r3, #1
 800351e:	f000 812e 	beq.w	800377e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00c      	beq.n	8003546 <HAL_I2C_EV_IRQHandler+0x92>
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	0a5b      	lsrs	r3, r3, #9
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d006      	beq.n	8003546 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f001 ffb0 	bl	800549e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 fd62 	bl	8004008 <I2C_Master_SB>
 8003544:	e08e      	b.n	8003664 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	08db      	lsrs	r3, r3, #3
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <HAL_I2C_EV_IRQHandler+0xb2>
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	0a5b      	lsrs	r3, r3, #9
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fdd8 	bl	8004114 <I2C_Master_ADD10>
 8003564:	e07e      	b.n	8003664 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	085b      	lsrs	r3, r3, #1
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d009      	beq.n	8003586 <HAL_I2C_EV_IRQHandler+0xd2>
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	0a5b      	lsrs	r3, r3, #9
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fdf2 	bl	8004168 <I2C_Master_ADDR>
 8003584:	e06e      	b.n	8003664 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	089b      	lsrs	r3, r3, #2
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d037      	beq.n	8003602 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800359c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035a0:	f000 80ef 	beq.w	8003782 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	09db      	lsrs	r3, r3, #7
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00f      	beq.n	80035d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	0a9b      	lsrs	r3, r3, #10
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d009      	beq.n	80035d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	089b      	lsrs	r3, r3, #2
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d103      	bne.n	80035d0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f9ef 	bl	80039ac <I2C_MasterTransmit_TXE>
 80035ce:	e049      	b.n	8003664 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	089b      	lsrs	r3, r3, #2
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 80d2 	beq.w	8003782 <HAL_I2C_EV_IRQHandler+0x2ce>
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	0a5b      	lsrs	r3, r3, #9
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 80cb 	beq.w	8003782 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	2b10      	cmp	r3, #16
 80035f0:	d103      	bne.n	80035fa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fa76 	bl	8003ae4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035f8:	e0c3      	b.n	8003782 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fada 	bl	8003bb4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003600:	e0bf      	b.n	8003782 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800360c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003610:	f000 80b7 	beq.w	8003782 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	099b      	lsrs	r3, r3, #6
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00f      	beq.n	8003640 <HAL_I2C_EV_IRQHandler+0x18c>
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	0a9b      	lsrs	r3, r3, #10
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d009      	beq.n	8003640 <HAL_I2C_EV_IRQHandler+0x18c>
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	089b      	lsrs	r3, r3, #2
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d103      	bne.n	8003640 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 fb4a 	bl	8003cd2 <I2C_MasterReceive_RXNE>
 800363e:	e011      	b.n	8003664 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	089b      	lsrs	r3, r3, #2
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 809a 	beq.w	8003782 <HAL_I2C_EV_IRQHandler+0x2ce>
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	0a5b      	lsrs	r3, r3, #9
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 8093 	beq.w	8003782 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fbe9 	bl	8003e34 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003662:	e08e      	b.n	8003782 <HAL_I2C_EV_IRQHandler+0x2ce>
 8003664:	e08d      	b.n	8003782 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	d004      	beq.n	8003678 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	61fb      	str	r3, [r7, #28]
 8003676:	e007      	b.n	8003688 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	085b      	lsrs	r3, r3, #1
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d012      	beq.n	80036ba <HAL_I2C_EV_IRQHandler+0x206>
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	0a5b      	lsrs	r3, r3, #9
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00c      	beq.n	80036ba <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80036b0:	69b9      	ldr	r1, [r7, #24]
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 ffa7 	bl	8004606 <I2C_Slave_ADDR>
 80036b8:	e066      	b.n	8003788 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	091b      	lsrs	r3, r3, #4
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <HAL_I2C_EV_IRQHandler+0x226>
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	0a5b      	lsrs	r3, r3, #9
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 ffdc 	bl	8004690 <I2C_Slave_STOPF>
 80036d8:	e056      	b.n	8003788 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80036da:	7bbb      	ldrb	r3, [r7, #14]
 80036dc:	2b21      	cmp	r3, #33	; 0x21
 80036de:	d002      	beq.n	80036e6 <HAL_I2C_EV_IRQHandler+0x232>
 80036e0:	7bbb      	ldrb	r3, [r7, #14]
 80036e2:	2b29      	cmp	r3, #41	; 0x29
 80036e4:	d125      	bne.n	8003732 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	09db      	lsrs	r3, r3, #7
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00f      	beq.n	8003712 <HAL_I2C_EV_IRQHandler+0x25e>
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	0a9b      	lsrs	r3, r3, #10
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <HAL_I2C_EV_IRQHandler+0x25e>
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	089b      	lsrs	r3, r3, #2
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d103      	bne.n	8003712 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 febd 	bl	800448a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003710:	e039      	b.n	8003786 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	089b      	lsrs	r3, r3, #2
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d033      	beq.n	8003786 <HAL_I2C_EV_IRQHandler+0x2d2>
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	0a5b      	lsrs	r3, r3, #9
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d02d      	beq.n	8003786 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 feea 	bl	8004504 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003730:	e029      	b.n	8003786 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	099b      	lsrs	r3, r3, #6
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00f      	beq.n	800375e <HAL_I2C_EV_IRQHandler+0x2aa>
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	0a9b      	lsrs	r3, r3, #10
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <HAL_I2C_EV_IRQHandler+0x2aa>
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	089b      	lsrs	r3, r3, #2
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d103      	bne.n	800375e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fef5 	bl	8004546 <I2C_SlaveReceive_RXNE>
 800375c:	e014      	b.n	8003788 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	089b      	lsrs	r3, r3, #2
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00e      	beq.n	8003788 <HAL_I2C_EV_IRQHandler+0x2d4>
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	0a5b      	lsrs	r3, r3, #9
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 ff23 	bl	80045c2 <I2C_SlaveReceive_BTF>
 800377c:	e004      	b.n	8003788 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800377e:	bf00      	nop
 8003780:	e002      	b.n	8003788 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003782:	bf00      	nop
 8003784:	e000      	b.n	8003788 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003786:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b08a      	sub	sp, #40	; 0x28
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037b0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	0a1b      	lsrs	r3, r3, #8
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00e      	beq.n	80037dc <HAL_I2C_ER_IRQHandler+0x4e>
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	0a1b      	lsrs	r3, r3, #8
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d008      	beq.n	80037dc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037da:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	0a5b      	lsrs	r3, r3, #9
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00e      	beq.n	8003806 <HAL_I2C_ER_IRQHandler+0x78>
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	0a1b      	lsrs	r3, r3, #8
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	f043 0302 	orr.w	r3, r3, #2
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003804:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	0a9b      	lsrs	r3, r3, #10
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d03f      	beq.n	8003892 <HAL_I2C_ER_IRQHandler+0x104>
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	0a1b      	lsrs	r3, r3, #8
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d039      	beq.n	8003892 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800381e:	7efb      	ldrb	r3, [r7, #27]
 8003820:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003826:	b29b      	uxth	r3, r3
 8003828:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003830:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003838:	7ebb      	ldrb	r3, [r7, #26]
 800383a:	2b20      	cmp	r3, #32
 800383c:	d112      	bne.n	8003864 <HAL_I2C_ER_IRQHandler+0xd6>
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10f      	bne.n	8003864 <HAL_I2C_ER_IRQHandler+0xd6>
 8003844:	7cfb      	ldrb	r3, [r7, #19]
 8003846:	2b21      	cmp	r3, #33	; 0x21
 8003848:	d008      	beq.n	800385c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800384a:	7cfb      	ldrb	r3, [r7, #19]
 800384c:	2b29      	cmp	r3, #41	; 0x29
 800384e:	d005      	beq.n	800385c <HAL_I2C_ER_IRQHandler+0xce>
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	2b28      	cmp	r3, #40	; 0x28
 8003854:	d106      	bne.n	8003864 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b21      	cmp	r3, #33	; 0x21
 800385a:	d103      	bne.n	8003864 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f001 f847 	bl	80048f0 <I2C_Slave_AF>
 8003862:	e016      	b.n	8003892 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800386c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	f043 0304 	orr.w	r3, r3, #4
 8003874:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003876:	7efb      	ldrb	r3, [r7, #27]
 8003878:	2b10      	cmp	r3, #16
 800387a:	d002      	beq.n	8003882 <HAL_I2C_ER_IRQHandler+0xf4>
 800387c:	7efb      	ldrb	r3, [r7, #27]
 800387e:	2b40      	cmp	r3, #64	; 0x40
 8003880:	d107      	bne.n	8003892 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003890:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	0adb      	lsrs	r3, r3, #11
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00e      	beq.n	80038bc <HAL_I2C_ER_IRQHandler+0x12e>
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	0a1b      	lsrs	r3, r3, #8
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d008      	beq.n	80038bc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	f043 0308 	orr.w	r3, r3, #8
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80038ba:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d008      	beq.n	80038d4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	431a      	orrs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f001 f87e 	bl	80049d0 <I2C_ITError>
  }
}
 80038d4:	bf00      	nop
 80038d6:	3728      	adds	r7, #40	; 0x28
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	70fb      	strb	r3, [r7, #3]
 8003938:	4613      	mov	r3, r2
 800393a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039c2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d150      	bne.n	8003a74 <I2C_MasterTransmit_TXE+0xc8>
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
 80039d4:	2b21      	cmp	r3, #33	; 0x21
 80039d6:	d14d      	bne.n	8003a74 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d01d      	beq.n	8003a1a <I2C_MasterTransmit_TXE+0x6e>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d01a      	beq.n	8003a1a <I2C_MasterTransmit_TXE+0x6e>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039ea:	d016      	beq.n	8003a1a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039fa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2211      	movs	r2, #17
 8003a00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff ff62 	bl	80038dc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a18:	e060      	b.n	8003adc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a28:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a38:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b40      	cmp	r3, #64	; 0x40
 8003a52:	d107      	bne.n	8003a64 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff ff7d 	bl	800395c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a62:	e03b      	b.n	8003adc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7ff ff35 	bl	80038dc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a72:	e033      	b.n	8003adc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	2b21      	cmp	r3, #33	; 0x21
 8003a78:	d005      	beq.n	8003a86 <I2C_MasterTransmit_TXE+0xda>
 8003a7a:	7bbb      	ldrb	r3, [r7, #14]
 8003a7c:	2b40      	cmp	r3, #64	; 0x40
 8003a7e:	d12d      	bne.n	8003adc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	2b22      	cmp	r3, #34	; 0x22
 8003a84:	d12a      	bne.n	8003adc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d108      	bne.n	8003aa2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a9e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003aa0:	e01c      	b.n	8003adc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b40      	cmp	r3, #64	; 0x40
 8003aac:	d103      	bne.n	8003ab6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f880 	bl	8003bb4 <I2C_MemoryTransmit_TXE_BTF>
}
 8003ab4:	e012      	b.n	8003adc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	781a      	ldrb	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ada:	e7ff      	b.n	8003adc <I2C_MasterTransmit_TXE+0x130>
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b21      	cmp	r3, #33	; 0x21
 8003afc:	d156      	bne.n	8003bac <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d012      	beq.n	8003b2e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	781a      	ldrb	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003b2c:	e03e      	b.n	8003bac <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d01d      	beq.n	8003b70 <I2C_MasterTransmit_BTF+0x8c>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	d01a      	beq.n	8003b70 <I2C_MasterTransmit_BTF+0x8c>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b40:	d016      	beq.n	8003b70 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b50:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2211      	movs	r2, #17
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff feb7 	bl	80038dc <HAL_I2C_MasterTxCpltCallback>
}
 8003b6e:	e01d      	b.n	8003bac <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b7e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7ff fe98 	bl	80038dc <HAL_I2C_MasterTxCpltCallback>
}
 8003bac:	bf00      	nop
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d11d      	bne.n	8003c08 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d10b      	bne.n	8003bec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be4:	1c9a      	adds	r2, r3, #2
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003bea:	e06e      	b.n	8003cca <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	121b      	asrs	r3, r3, #8
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c06:	e060      	b.n	8003cca <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d10b      	bne.n	8003c28 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c26:	e050      	b.n	8003cca <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d14c      	bne.n	8003cca <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	2b22      	cmp	r3, #34	; 0x22
 8003c34:	d108      	bne.n	8003c48 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c44:	601a      	str	r2, [r3, #0]
}
 8003c46:	e040      	b.n	8003cca <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d015      	beq.n	8003c7e <I2C_MemoryTransmit_TXE_BTF+0xca>
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
 8003c54:	2b21      	cmp	r3, #33	; 0x21
 8003c56:	d112      	bne.n	8003c7e <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	781a      	ldrb	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c7c:	e025      	b.n	8003cca <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d120      	bne.n	8003cca <I2C_MemoryTransmit_TXE_BTF+0x116>
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b21      	cmp	r3, #33	; 0x21
 8003c8c:	d11d      	bne.n	8003cca <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c9c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cac:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff fe49 	bl	800395c <HAL_I2C_MemTxCpltCallback>
}
 8003cca:	bf00      	nop
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b084      	sub	sp, #16
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b22      	cmp	r3, #34	; 0x22
 8003ce4:	f040 80a2 	bne.w	8003e2c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d921      	bls.n	8003d3a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	f040 8082 	bne.w	8003e2c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d36:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003d38:	e078      	b.n	8003e2c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d074      	beq.n	8003e2c <I2C_MasterReceive_RXNE+0x15a>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d002      	beq.n	8003d4e <I2C_MasterReceive_RXNE+0x7c>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d16e      	bne.n	8003e2c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f001 faee 	bl	8005330 <I2C_WaitOnSTOPRequestThroughIT>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d142      	bne.n	8003de0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d68:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d78:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b40      	cmp	r3, #64	; 0x40
 8003db2:	d10a      	bne.n	8003dca <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff fdd4 	bl	8003970 <HAL_I2C_MemRxCpltCallback>
}
 8003dc8:	e030      	b.n	8003e2c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2212      	movs	r2, #18
 8003dd6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff fd89 	bl	80038f0 <HAL_I2C_MasterRxCpltCallback>
}
 8003dde:	e025      	b.n	8003e2c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691a      	ldr	r2, [r3, #16]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff fdac 	bl	8003984 <HAL_I2C_ErrorCallback>
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d11b      	bne.n	8003e84 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e5a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003e82:	e0bd      	b.n	8004000 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d129      	bne.n	8003ee2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e9c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d00a      	beq.n	8003eba <I2C_MasterReceive_BTF+0x86>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d007      	beq.n	8003eba <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ee0:	e08e      	b.n	8004000 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d176      	bne.n	8003fda <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d002      	beq.n	8003ef8 <I2C_MasterReceive_BTF+0xc4>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b10      	cmp	r3, #16
 8003ef6:	d108      	bne.n	8003f0a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	e019      	b.n	8003f3e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d002      	beq.n	8003f16 <I2C_MasterReceive_BTF+0xe2>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d108      	bne.n	8003f28 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	e00a      	b.n	8003f3e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b10      	cmp	r3, #16
 8003f2c:	d007      	beq.n	8003f3e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f98:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b40      	cmp	r3, #64	; 0x40
 8003fac:	d10a      	bne.n	8003fc4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7ff fcd7 	bl	8003970 <HAL_I2C_MemRxCpltCallback>
}
 8003fc2:	e01d      	b.n	8004000 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2212      	movs	r2, #18
 8003fd0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff fc8c 	bl	80038f0 <HAL_I2C_MasterRxCpltCallback>
}
 8003fd8:	e012      	b.n	8004000 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004000:	bf00      	nop
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b40      	cmp	r3, #64	; 0x40
 800401a:	d117      	bne.n	800404c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004020:	2b00      	cmp	r3, #0
 8004022:	d109      	bne.n	8004038 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004028:	b2db      	uxtb	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004034:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004036:	e067      	b.n	8004108 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403c:	b2db      	uxtb	r3, r3
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	b2da      	uxtb	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	611a      	str	r2, [r3, #16]
}
 800404a:	e05d      	b.n	8004108 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004054:	d133      	bne.n	80040be <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b21      	cmp	r3, #33	; 0x21
 8004060:	d109      	bne.n	8004076 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004066:	b2db      	uxtb	r3, r3
 8004068:	461a      	mov	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004072:	611a      	str	r2, [r3, #16]
 8004074:	e008      	b.n	8004088 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	b2db      	uxtb	r3, r3
 800407c:	f043 0301 	orr.w	r3, r3, #1
 8004080:	b2da      	uxtb	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408c:	2b00      	cmp	r3, #0
 800408e:	d004      	beq.n	800409a <I2C_Master_SB+0x92>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004096:	2b00      	cmp	r3, #0
 8004098:	d108      	bne.n	80040ac <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d032      	beq.n	8004108 <I2C_Master_SB+0x100>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d02d      	beq.n	8004108 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ba:	605a      	str	r2, [r3, #4]
}
 80040bc:	e024      	b.n	8004108 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10e      	bne.n	80040e4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	11db      	asrs	r3, r3, #7
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	f003 0306 	and.w	r3, r3, #6
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	f063 030f 	orn	r3, r3, #15
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	611a      	str	r2, [r3, #16]
}
 80040e2:	e011      	b.n	8004108 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d10d      	bne.n	8004108 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	11db      	asrs	r3, r3, #7
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	f003 0306 	and.w	r3, r3, #6
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f063 030e 	orn	r3, r3, #14
 8004100:	b2da      	uxtb	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	611a      	str	r2, [r3, #16]
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004120:	b2da      	uxtb	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412c:	2b00      	cmp	r3, #0
 800412e:	d103      	bne.n	8004138 <I2C_Master_ADD10+0x24>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	2b00      	cmp	r3, #0
 8004136:	d011      	beq.n	800415c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d104      	bne.n	800414c <I2C_Master_ADD10+0x38>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004148:	2b00      	cmp	r3, #0
 800414a:	d007      	beq.n	800415c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800415a:	605a      	str	r2, [r3, #4]
    }
  }
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004168:	b480      	push	{r7}
 800416a:	b091      	sub	sp, #68	; 0x44
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004176:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b22      	cmp	r3, #34	; 0x22
 8004190:	f040 8169 	bne.w	8004466 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10f      	bne.n	80041bc <I2C_Master_ADDR+0x54>
 800419c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80041a0:	2b40      	cmp	r3, #64	; 0x40
 80041a2:	d10b      	bne.n	80041bc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a4:	2300      	movs	r3, #0
 80041a6:	633b      	str	r3, [r7, #48]	; 0x30
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	633b      	str	r3, [r7, #48]	; 0x30
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	633b      	str	r3, [r7, #48]	; 0x30
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	e160      	b.n	800447e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d11d      	bne.n	8004200 <I2C_Master_ADDR+0x98>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041cc:	d118      	bne.n	8004200 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ce:	2300      	movs	r3, #0
 80041d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041f2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	651a      	str	r2, [r3, #80]	; 0x50
 80041fe:	e13e      	b.n	800447e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d113      	bne.n	8004232 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420a:	2300      	movs	r3, #0
 800420c:	62bb      	str	r3, [r7, #40]	; 0x28
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	62bb      	str	r3, [r7, #40]	; 0x28
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	62bb      	str	r3, [r7, #40]	; 0x28
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	e115      	b.n	800445e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	f040 808a 	bne.w	8004352 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800423e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004240:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004244:	d137      	bne.n	80042b6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004254:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004264:	d113      	bne.n	800428e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004274:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004276:	2300      	movs	r3, #0
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	e0e7      	b.n	800445e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800428e:	2300      	movs	r3, #0
 8004290:	623b      	str	r3, [r7, #32]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	623b      	str	r3, [r7, #32]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	623b      	str	r3, [r7, #32]
 80042a2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	e0d3      	b.n	800445e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80042b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d02e      	beq.n	800431a <I2C_Master_ADDR+0x1b2>
 80042bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d02b      	beq.n	800431a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80042c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c4:	2b12      	cmp	r3, #18
 80042c6:	d102      	bne.n	80042ce <I2C_Master_ADDR+0x166>
 80042c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d125      	bne.n	800431a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80042ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d00e      	beq.n	80042f2 <I2C_Master_ADDR+0x18a>
 80042d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d00b      	beq.n	80042f2 <I2C_Master_ADDR+0x18a>
 80042da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042dc:	2b10      	cmp	r3, #16
 80042de:	d008      	beq.n	80042f2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	e007      	b.n	8004302 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004300:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	61fb      	str	r3, [r7, #28]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	e0a1      	b.n	800445e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004328:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	61bb      	str	r3, [r7, #24]
 800433e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	e085      	b.n	800445e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d14d      	bne.n	80043f8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800435c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435e:	2b04      	cmp	r3, #4
 8004360:	d016      	beq.n	8004390 <I2C_Master_ADDR+0x228>
 8004362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004364:	2b02      	cmp	r3, #2
 8004366:	d013      	beq.n	8004390 <I2C_Master_ADDR+0x228>
 8004368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436a:	2b10      	cmp	r3, #16
 800436c:	d010      	beq.n	8004390 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800437c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	e007      	b.n	80043a0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800439e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ae:	d117      	bne.n	80043e0 <I2C_Master_ADDR+0x278>
 80043b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043b6:	d00b      	beq.n	80043d0 <I2C_Master_ADDR+0x268>
 80043b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d008      	beq.n	80043d0 <I2C_Master_ADDR+0x268>
 80043be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d005      	beq.n	80043d0 <I2C_Master_ADDR+0x268>
 80043c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c6:	2b10      	cmp	r3, #16
 80043c8:	d002      	beq.n	80043d0 <I2C_Master_ADDR+0x268>
 80043ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d107      	bne.n	80043e0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043de:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	e032      	b.n	800445e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004406:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004416:	d117      	bne.n	8004448 <I2C_Master_ADDR+0x2e0>
 8004418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800441e:	d00b      	beq.n	8004438 <I2C_Master_ADDR+0x2d0>
 8004420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004422:	2b01      	cmp	r3, #1
 8004424:	d008      	beq.n	8004438 <I2C_Master_ADDR+0x2d0>
 8004426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004428:	2b08      	cmp	r3, #8
 800442a:	d005      	beq.n	8004438 <I2C_Master_ADDR+0x2d0>
 800442c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442e:	2b10      	cmp	r3, #16
 8004430:	d002      	beq.n	8004438 <I2C_Master_ADDR+0x2d0>
 8004432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004434:	2b20      	cmp	r3, #32
 8004436:	d107      	bne.n	8004448 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004446:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004448:	2300      	movs	r3, #0
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	613b      	str	r3, [r7, #16]
 800445c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004464:	e00b      	b.n	800447e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	68fb      	ldr	r3, [r7, #12]
}
 800447c:	e7ff      	b.n	800447e <I2C_Master_ADDR+0x316>
 800447e:	bf00      	nop
 8004480:	3744      	adds	r7, #68	; 0x44
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004498:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d02b      	beq.n	80044fc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	781a      	ldrb	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d114      	bne.n	80044fc <I2C_SlaveTransmit_TXE+0x72>
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	2b29      	cmp	r3, #41	; 0x29
 80044d6:	d111      	bne.n	80044fc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044e6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2221      	movs	r2, #33	; 0x21
 80044ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2228      	movs	r2, #40	; 0x28
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7ff fa04 	bl	8003904 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80044fc:	bf00      	nop
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d011      	beq.n	800453a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	781a      	ldrb	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004554:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455a:	b29b      	uxth	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d02c      	beq.n	80045ba <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	691a      	ldr	r2, [r3, #16]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457c:	b29b      	uxth	r3, r3
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d114      	bne.n	80045ba <I2C_SlaveReceive_RXNE+0x74>
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2b2a      	cmp	r3, #42	; 0x2a
 8004594:	d111      	bne.n	80045ba <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2222      	movs	r2, #34	; 0x22
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2228      	movs	r2, #40	; 0x28
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff f9af 	bl	8003918 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80045ba:	bf00      	nop
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d012      	beq.n	80045fa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b084      	sub	sp, #16
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004610:	2300      	movs	r3, #0
 8004612:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461a:	b2db      	uxtb	r3, r3
 800461c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004620:	2b28      	cmp	r3, #40	; 0x28
 8004622:	d127      	bne.n	8004674 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004632:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	089b      	lsrs	r3, r3, #2
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004640:	2301      	movs	r3, #1
 8004642:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	09db      	lsrs	r3, r3, #7
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d103      	bne.n	8004658 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	81bb      	strh	r3, [r7, #12]
 8004656:	e002      	b.n	800465e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004666:	89ba      	ldrh	r2, [r7, #12]
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	4619      	mov	r1, r3
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff f95d 	bl	800392c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004672:	e008      	b.n	8004686 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f06f 0202 	mvn.w	r2, #2
 800467c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004686:	bf00      	nop
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046ae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80046b0:	2300      	movs	r3, #0
 80046b2:	60bb      	str	r3, [r7, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	60bb      	str	r3, [r7, #8]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0201 	orr.w	r2, r2, #1
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046dc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ec:	d172      	bne.n	80047d4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	2b22      	cmp	r3, #34	; 0x22
 80046f2:	d002      	beq.n	80046fa <I2C_Slave_STOPF+0x6a>
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	2b2a      	cmp	r3, #42	; 0x2a
 80046f8:	d135      	bne.n	8004766 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	b29a      	uxth	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470c:	b29b      	uxth	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d005      	beq.n	800471e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f043 0204 	orr.w	r2, r3, #4
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800472c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	4618      	mov	r0, r3
 8004734:	f7fe f8d5 	bl	80028e2 <HAL_DMA_GetState>
 8004738:	4603      	mov	r3, r0
 800473a:	2b01      	cmp	r3, #1
 800473c:	d049      	beq.n	80047d2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004742:	4a69      	ldr	r2, [pc, #420]	; (80048e8 <I2C_Slave_STOPF+0x258>)
 8004744:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474a:	4618      	mov	r0, r3
 800474c:	f7fe f8a7 	bl	800289e <HAL_DMA_Abort_IT>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d03d      	beq.n	80047d2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004760:	4610      	mov	r0, r2
 8004762:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004764:	e035      	b.n	80047d2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	b29a      	uxth	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004778:	b29b      	uxth	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d005      	beq.n	800478a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f043 0204 	orr.w	r2, r3, #4
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004798:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fe f89f 	bl	80028e2 <HAL_DMA_GetState>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d014      	beq.n	80047d4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ae:	4a4e      	ldr	r2, [pc, #312]	; (80048e8 <I2C_Slave_STOPF+0x258>)
 80047b0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fe f871 	bl	800289e <HAL_DMA_Abort_IT>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d008      	beq.n	80047d4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047cc:	4610      	mov	r0, r2
 80047ce:	4798      	blx	r3
 80047d0:	e000      	b.n	80047d4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047d2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d03e      	beq.n	800485c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d112      	bne.n	8004812 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	691a      	ldr	r2, [r3, #16]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	b2d2      	uxtb	r2, r2
 80047f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004808:	b29b      	uxth	r3, r3
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481c:	2b40      	cmp	r3, #64	; 0x40
 800481e:	d112      	bne.n	8004846 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	f043 0204 	orr.w	r2, r3, #4
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f8b3 	bl	80049d0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800486a:	e039      	b.n	80048e0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800486c:	7bfb      	ldrb	r3, [r7, #15]
 800486e:	2b2a      	cmp	r3, #42	; 0x2a
 8004870:	d109      	bne.n	8004886 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2228      	movs	r2, #40	; 0x28
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff f849 	bl	8003918 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b28      	cmp	r3, #40	; 0x28
 8004890:	d111      	bne.n	80048b6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a15      	ldr	r2, [pc, #84]	; (80048ec <I2C_Slave_STOPF+0x25c>)
 8004896:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7ff f84a 	bl	8003948 <HAL_I2C_ListenCpltCallback>
}
 80048b4:	e014      	b.n	80048e0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	2b22      	cmp	r3, #34	; 0x22
 80048bc:	d002      	beq.n	80048c4 <I2C_Slave_STOPF+0x234>
 80048be:	7bfb      	ldrb	r3, [r7, #15]
 80048c0:	2b22      	cmp	r3, #34	; 0x22
 80048c2:	d10d      	bne.n	80048e0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7ff f81c 	bl	8003918 <HAL_I2C_SlaveRxCpltCallback>
}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	08004f31 	.word	0x08004f31
 80048ec:	ffff0000 	.word	0xffff0000

080048f0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b08      	cmp	r3, #8
 800490a:	d002      	beq.n	8004912 <I2C_Slave_AF+0x22>
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b20      	cmp	r3, #32
 8004910:	d129      	bne.n	8004966 <I2C_Slave_AF+0x76>
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	2b28      	cmp	r3, #40	; 0x28
 8004916:	d126      	bne.n	8004966 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a2c      	ldr	r2, [pc, #176]	; (80049cc <I2C_Slave_AF+0xdc>)
 800491c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800492c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004936:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004946:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fe fff2 	bl	8003948 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004964:	e02e      	b.n	80049c4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	2b21      	cmp	r3, #33	; 0x21
 800496a:	d126      	bne.n	80049ba <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a17      	ldr	r2, [pc, #92]	; (80049cc <I2C_Slave_AF+0xdc>)
 8004970:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2221      	movs	r2, #33	; 0x21
 8004976:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004996:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049a0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7fe ffa6 	bl	8003904 <HAL_I2C_SlaveTxCpltCallback>
}
 80049b8:	e004      	b.n	80049c4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049c2:	615a      	str	r2, [r3, #20]
}
 80049c4:	bf00      	nop
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	ffff0000 	.word	0xffff0000

080049d0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049e6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80049e8:	7bbb      	ldrb	r3, [r7, #14]
 80049ea:	2b10      	cmp	r3, #16
 80049ec:	d002      	beq.n	80049f4 <I2C_ITError+0x24>
 80049ee:	7bbb      	ldrb	r3, [r7, #14]
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	d10a      	bne.n	8004a0a <I2C_ITError+0x3a>
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	2b22      	cmp	r3, #34	; 0x22
 80049f8:	d107      	bne.n	8004a0a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a08:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a10:	2b28      	cmp	r3, #40	; 0x28
 8004a12:	d107      	bne.n	8004a24 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2228      	movs	r2, #40	; 0x28
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a22:	e015      	b.n	8004a50 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a32:	d00a      	beq.n	8004a4a <I2C_ITError+0x7a>
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
 8004a36:	2b60      	cmp	r3, #96	; 0x60
 8004a38:	d007      	beq.n	8004a4a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a5e:	d162      	bne.n	8004b26 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a6e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d020      	beq.n	8004ac0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a82:	4a6a      	ldr	r2, [pc, #424]	; (8004c2c <I2C_ITError+0x25c>)
 8004a84:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fd ff07 	bl	800289e <HAL_DMA_Abort_IT>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 8089 	beq.w	8004baa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0201 	bic.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004aba:	4610      	mov	r0, r2
 8004abc:	4798      	blx	r3
 8004abe:	e074      	b.n	8004baa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	4a59      	ldr	r2, [pc, #356]	; (8004c2c <I2C_ITError+0x25c>)
 8004ac6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fd fee6 	bl	800289e <HAL_DMA_Abort_IT>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d068      	beq.n	8004baa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae2:	2b40      	cmp	r3, #64	; 0x40
 8004ae4:	d10b      	bne.n	8004afe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	691a      	ldr	r2, [r3, #16]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0201 	bic.w	r2, r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b20:	4610      	mov	r0, r2
 8004b22:	4798      	blx	r3
 8004b24:	e041      	b.n	8004baa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b60      	cmp	r3, #96	; 0x60
 8004b30:	d125      	bne.n	8004b7e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4a:	2b40      	cmp	r3, #64	; 0x40
 8004b4c:	d10b      	bne.n	8004b66 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0201 	bic.w	r2, r2, #1
 8004b74:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fe ff0e 	bl	8003998 <HAL_I2C_AbortCpltCallback>
 8004b7c:	e015      	b.n	8004baa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b88:	2b40      	cmp	r3, #64	; 0x40
 8004b8a:	d10b      	bne.n	8004ba4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7fe feed 	bl	8003984 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10e      	bne.n	8004bd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d109      	bne.n	8004bd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d104      	bne.n	8004bd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004be6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d113      	bne.n	8004c24 <I2C_ITError+0x254>
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	2b28      	cmp	r3, #40	; 0x28
 8004c00:	d110      	bne.n	8004c24 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a0a      	ldr	r2, [pc, #40]	; (8004c30 <I2C_ITError+0x260>)
 8004c06:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fe fe92 	bl	8003948 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c24:	bf00      	nop
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	08004f31 	.word	0x08004f31
 8004c30:	ffff0000 	.word	0xffff0000

08004c34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af02      	add	r7, sp, #8
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	4608      	mov	r0, r1
 8004c3e:	4611      	mov	r1, r2
 8004c40:	461a      	mov	r2, r3
 8004c42:	4603      	mov	r3, r0
 8004c44:	817b      	strh	r3, [r7, #10]
 8004c46:	460b      	mov	r3, r1
 8004c48:	813b      	strh	r3, [r7, #8]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 fa08 	bl	8005080 <I2C_WaitOnFlagUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00d      	beq.n	8004c92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c84:	d103      	bne.n	8004c8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e05f      	b.n	8004d52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c92:	897b      	ldrh	r3, [r7, #10]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ca0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	6a3a      	ldr	r2, [r7, #32]
 8004ca6:	492d      	ldr	r1, [pc, #180]	; (8004d5c <I2C_RequestMemoryWrite+0x128>)
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 fa40 	bl	800512e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e04c      	b.n	8004d52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd0:	6a39      	ldr	r1, [r7, #32]
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 faaa 	bl	800522c <I2C_WaitOnTXEFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00d      	beq.n	8004cfa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d107      	bne.n	8004cf6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e02b      	b.n	8004d52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cfa:	88fb      	ldrh	r3, [r7, #6]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d105      	bne.n	8004d0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d00:	893b      	ldrh	r3, [r7, #8]
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	611a      	str	r2, [r3, #16]
 8004d0a:	e021      	b.n	8004d50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d0c:	893b      	ldrh	r3, [r7, #8]
 8004d0e:	0a1b      	lsrs	r3, r3, #8
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d1c:	6a39      	ldr	r1, [r7, #32]
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 fa84 	bl	800522c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00d      	beq.n	8004d46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d107      	bne.n	8004d42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e005      	b.n	8004d52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d46:	893b      	ldrh	r3, [r7, #8]
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	00010002 	.word	0x00010002

08004d60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	4608      	mov	r0, r1
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	4603      	mov	r3, r0
 8004d70:	817b      	strh	r3, [r7, #10]
 8004d72:	460b      	mov	r3, r1
 8004d74:	813b      	strh	r3, [r7, #8]
 8004d76:	4613      	mov	r3, r2
 8004d78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 f96a 	bl	8005080 <I2C_WaitOnFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00d      	beq.n	8004dce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dc0:	d103      	bne.n	8004dca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e0aa      	b.n	8004f24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dce:	897b      	ldrh	r3, [r7, #10]
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ddc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	6a3a      	ldr	r2, [r7, #32]
 8004de2:	4952      	ldr	r1, [pc, #328]	; (8004f2c <I2C_RequestMemoryRead+0x1cc>)
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 f9a2 	bl	800512e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e097      	b.n	8004f24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df4:	2300      	movs	r3, #0
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0c:	6a39      	ldr	r1, [r7, #32]
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 fa0c 	bl	800522c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00d      	beq.n	8004e36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d107      	bne.n	8004e32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e076      	b.n	8004f24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e36:	88fb      	ldrh	r3, [r7, #6]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d105      	bne.n	8004e48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e3c:	893b      	ldrh	r3, [r7, #8]
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	611a      	str	r2, [r3, #16]
 8004e46:	e021      	b.n	8004e8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e48:	893b      	ldrh	r3, [r7, #8]
 8004e4a:	0a1b      	lsrs	r3, r3, #8
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e58:	6a39      	ldr	r1, [r7, #32]
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 f9e6 	bl	800522c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00d      	beq.n	8004e82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d107      	bne.n	8004e7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e050      	b.n	8004f24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e82:	893b      	ldrh	r3, [r7, #8]
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8e:	6a39      	ldr	r1, [r7, #32]
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 f9cb 	bl	800522c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00d      	beq.n	8004eb8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d107      	bne.n	8004eb4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e035      	b.n	8004f24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ec6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 f8d3 	bl	8005080 <I2C_WaitOnFlagUntilTimeout>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00d      	beq.n	8004efc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eee:	d103      	bne.n	8004ef8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ef6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e013      	b.n	8004f24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004efc:	897b      	ldrh	r3, [r7, #10]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	f043 0301 	orr.w	r3, r3, #1
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	6a3a      	ldr	r2, [r7, #32]
 8004f10:	4906      	ldr	r1, [pc, #24]	; (8004f2c <I2C_RequestMemoryRead+0x1cc>)
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 f90b 	bl	800512e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	00010002 	.word	0x00010002

08004f30 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f40:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f48:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f4a:	4b4b      	ldr	r3, [pc, #300]	; (8005078 <I2C_DMAAbort+0x148>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	08db      	lsrs	r3, r3, #3
 8004f50:	4a4a      	ldr	r2, [pc, #296]	; (800507c <I2C_DMAAbort+0x14c>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	0a1a      	lsrs	r2, r3, #8
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	00da      	lsls	r2, r3, #3
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	f043 0220 	orr.w	r2, r3, #32
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004f76:	e00a      	b.n	8004f8e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f8c:	d0ea      	beq.n	8004f64 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004faa:	2200      	movs	r2, #0
 8004fac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fbc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0201 	bic.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b60      	cmp	r3, #96	; 0x60
 8004ffe:	d10e      	bne.n	800501e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2200      	movs	r2, #0
 8005014:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005016:	6978      	ldr	r0, [r7, #20]
 8005018:	f7fe fcbe 	bl	8003998 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800501c:	e027      	b.n	800506e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800501e:	7cfb      	ldrb	r3, [r7, #19]
 8005020:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005024:	2b28      	cmp	r3, #40	; 0x28
 8005026:	d117      	bne.n	8005058 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0201 	orr.w	r2, r2, #1
 8005036:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005046:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2200      	movs	r2, #0
 800504c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2228      	movs	r2, #40	; 0x28
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005056:	e007      	b.n	8005068 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005068:	6978      	ldr	r0, [r7, #20]
 800506a:	f7fe fc8b 	bl	8003984 <HAL_I2C_ErrorCallback>
}
 800506e:	bf00      	nop
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	20000000 	.word	0x20000000
 800507c:	14f8b589 	.word	0x14f8b589

08005080 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	4613      	mov	r3, r2
 800508e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005090:	e025      	b.n	80050de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005098:	d021      	beq.n	80050de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800509a:	f7fd fae3 	bl	8002664 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d302      	bcc.n	80050b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d116      	bne.n	80050de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	f043 0220 	orr.w	r2, r3, #32
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e023      	b.n	8005126 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	0c1b      	lsrs	r3, r3, #16
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d10d      	bne.n	8005104 <I2C_WaitOnFlagUntilTimeout+0x84>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	43da      	mvns	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4013      	ands	r3, r2
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	bf0c      	ite	eq
 80050fa:	2301      	moveq	r3, #1
 80050fc:	2300      	movne	r3, #0
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	461a      	mov	r2, r3
 8005102:	e00c      	b.n	800511e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	43da      	mvns	r2, r3
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4013      	ands	r3, r2
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	bf0c      	ite	eq
 8005116:	2301      	moveq	r3, #1
 8005118:	2300      	movne	r3, #0
 800511a:	b2db      	uxtb	r3, r3
 800511c:	461a      	mov	r2, r3
 800511e:	79fb      	ldrb	r3, [r7, #7]
 8005120:	429a      	cmp	r2, r3
 8005122:	d0b6      	beq.n	8005092 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	60f8      	str	r0, [r7, #12]
 8005136:	60b9      	str	r1, [r7, #8]
 8005138:	607a      	str	r2, [r7, #4]
 800513a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800513c:	e051      	b.n	80051e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800514c:	d123      	bne.n	8005196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800515c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005166:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	f043 0204 	orr.w	r2, r3, #4
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e046      	b.n	8005224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519c:	d021      	beq.n	80051e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519e:	f7fd fa61 	bl	8002664 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d302      	bcc.n	80051b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d116      	bne.n	80051e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	f043 0220 	orr.w	r2, r3, #32
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e020      	b.n	8005224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	0c1b      	lsrs	r3, r3, #16
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d10c      	bne.n	8005206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	43da      	mvns	r2, r3
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4013      	ands	r3, r2
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	bf14      	ite	ne
 80051fe:	2301      	movne	r3, #1
 8005200:	2300      	moveq	r3, #0
 8005202:	b2db      	uxtb	r3, r3
 8005204:	e00b      	b.n	800521e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	43da      	mvns	r2, r3
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	4013      	ands	r3, r2
 8005212:	b29b      	uxth	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	bf14      	ite	ne
 8005218:	2301      	movne	r3, #1
 800521a:	2300      	moveq	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d18d      	bne.n	800513e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005238:	e02d      	b.n	8005296 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 f900 	bl	8005440 <I2C_IsAcknowledgeFailed>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e02d      	b.n	80052a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005250:	d021      	beq.n	8005296 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005252:	f7fd fa07 	bl	8002664 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	429a      	cmp	r2, r3
 8005260:	d302      	bcc.n	8005268 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d116      	bne.n	8005296 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2220      	movs	r2, #32
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f043 0220 	orr.w	r2, r3, #32
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e007      	b.n	80052a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a0:	2b80      	cmp	r3, #128	; 0x80
 80052a2:	d1ca      	bne.n	800523a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b084      	sub	sp, #16
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052ba:	e02d      	b.n	8005318 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 f8bf 	bl	8005440 <I2C_IsAcknowledgeFailed>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e02d      	b.n	8005328 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d2:	d021      	beq.n	8005318 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052d4:	f7fd f9c6 	bl	8002664 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d302      	bcc.n	80052ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d116      	bne.n	8005318 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005304:	f043 0220 	orr.w	r2, r3, #32
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e007      	b.n	8005328 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b04      	cmp	r3, #4
 8005324:	d1ca      	bne.n	80052bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800533c:	4b13      	ldr	r3, [pc, #76]	; (800538c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	08db      	lsrs	r3, r3, #3
 8005342:	4a13      	ldr	r2, [pc, #76]	; (8005390 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005344:	fba2 2303 	umull	r2, r3, r2, r3
 8005348:	0a1a      	lsrs	r2, r3, #8
 800534a:	4613      	mov	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3b01      	subs	r3, #1
 8005356:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d107      	bne.n	800536e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	f043 0220 	orr.w	r2, r3, #32
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e008      	b.n	8005380 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800537c:	d0e9      	beq.n	8005352 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	20000000 	.word	0x20000000
 8005390:	14f8b589 	.word	0x14f8b589

08005394 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053a0:	e042      	b.n	8005428 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	f003 0310 	and.w	r3, r3, #16
 80053ac:	2b10      	cmp	r3, #16
 80053ae:	d119      	bne.n	80053e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f06f 0210 	mvn.w	r2, #16
 80053b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e029      	b.n	8005438 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e4:	f7fd f93e 	bl	8002664 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d302      	bcc.n	80053fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d116      	bne.n	8005428 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2220      	movs	r2, #32
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005414:	f043 0220 	orr.w	r2, r3, #32
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e007      	b.n	8005438 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005432:	2b40      	cmp	r3, #64	; 0x40
 8005434:	d1b5      	bne.n	80053a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005456:	d11b      	bne.n	8005490 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005460:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	f043 0204 	orr.w	r2, r3, #4
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e000      	b.n	8005492 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054aa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80054ae:	d103      	bne.n	80054b8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80054b6:	e007      	b.n	80054c8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80054c0:	d102      	bne.n	80054c8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2208      	movs	r2, #8
 80054c6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e25b      	b.n	800599e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d075      	beq.n	80055de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054f2:	4ba3      	ldr	r3, [pc, #652]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 030c 	and.w	r3, r3, #12
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d00c      	beq.n	8005518 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054fe:	4ba0      	ldr	r3, [pc, #640]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005506:	2b08      	cmp	r3, #8
 8005508:	d112      	bne.n	8005530 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800550a:	4b9d      	ldr	r3, [pc, #628]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005516:	d10b      	bne.n	8005530 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005518:	4b99      	ldr	r3, [pc, #612]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d05b      	beq.n	80055dc <HAL_RCC_OscConfig+0x108>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d157      	bne.n	80055dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e236      	b.n	800599e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005538:	d106      	bne.n	8005548 <HAL_RCC_OscConfig+0x74>
 800553a:	4b91      	ldr	r3, [pc, #580]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a90      	ldr	r2, [pc, #576]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005544:	6013      	str	r3, [r2, #0]
 8005546:	e01d      	b.n	8005584 <HAL_RCC_OscConfig+0xb0>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005550:	d10c      	bne.n	800556c <HAL_RCC_OscConfig+0x98>
 8005552:	4b8b      	ldr	r3, [pc, #556]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a8a      	ldr	r2, [pc, #552]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	4b88      	ldr	r3, [pc, #544]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a87      	ldr	r2, [pc, #540]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	e00b      	b.n	8005584 <HAL_RCC_OscConfig+0xb0>
 800556c:	4b84      	ldr	r3, [pc, #528]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a83      	ldr	r2, [pc, #524]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005576:	6013      	str	r3, [r2, #0]
 8005578:	4b81      	ldr	r3, [pc, #516]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a80      	ldr	r2, [pc, #512]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 800557e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d013      	beq.n	80055b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800558c:	f7fd f86a 	bl	8002664 <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005594:	f7fd f866 	bl	8002664 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b64      	cmp	r3, #100	; 0x64
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e1fb      	b.n	800599e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055a6:	4b76      	ldr	r3, [pc, #472]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0f0      	beq.n	8005594 <HAL_RCC_OscConfig+0xc0>
 80055b2:	e014      	b.n	80055de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b4:	f7fd f856 	bl	8002664 <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055bc:	f7fd f852 	bl	8002664 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b64      	cmp	r3, #100	; 0x64
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e1e7      	b.n	800599e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ce:	4b6c      	ldr	r3, [pc, #432]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1f0      	bne.n	80055bc <HAL_RCC_OscConfig+0xe8>
 80055da:	e000      	b.n	80055de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d063      	beq.n	80056b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055ea:	4b65      	ldr	r3, [pc, #404]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 030c 	and.w	r3, r3, #12
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00b      	beq.n	800560e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055f6:	4b62      	ldr	r3, [pc, #392]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055fe:	2b08      	cmp	r3, #8
 8005600:	d11c      	bne.n	800563c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005602:	4b5f      	ldr	r3, [pc, #380]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d116      	bne.n	800563c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800560e:	4b5c      	ldr	r3, [pc, #368]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d005      	beq.n	8005626 <HAL_RCC_OscConfig+0x152>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d001      	beq.n	8005626 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e1bb      	b.n	800599e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005626:	4b56      	ldr	r3, [pc, #344]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	4952      	ldr	r1, [pc, #328]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005636:	4313      	orrs	r3, r2
 8005638:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800563a:	e03a      	b.n	80056b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d020      	beq.n	8005686 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005644:	4b4f      	ldr	r3, [pc, #316]	; (8005784 <HAL_RCC_OscConfig+0x2b0>)
 8005646:	2201      	movs	r2, #1
 8005648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564a:	f7fd f80b 	bl	8002664 <HAL_GetTick>
 800564e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005650:	e008      	b.n	8005664 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005652:	f7fd f807 	bl	8002664 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e19c      	b.n	800599e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005664:	4b46      	ldr	r3, [pc, #280]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0f0      	beq.n	8005652 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005670:	4b43      	ldr	r3, [pc, #268]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	4940      	ldr	r1, [pc, #256]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005680:	4313      	orrs	r3, r2
 8005682:	600b      	str	r3, [r1, #0]
 8005684:	e015      	b.n	80056b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005686:	4b3f      	ldr	r3, [pc, #252]	; (8005784 <HAL_RCC_OscConfig+0x2b0>)
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568c:	f7fc ffea 	bl	8002664 <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005694:	f7fc ffe6 	bl	8002664 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e17b      	b.n	800599e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056a6:	4b36      	ldr	r3, [pc, #216]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1f0      	bne.n	8005694 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d030      	beq.n	8005720 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d016      	beq.n	80056f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056c6:	4b30      	ldr	r3, [pc, #192]	; (8005788 <HAL_RCC_OscConfig+0x2b4>)
 80056c8:	2201      	movs	r2, #1
 80056ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056cc:	f7fc ffca 	bl	8002664 <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056d4:	f7fc ffc6 	bl	8002664 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e15b      	b.n	800599e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056e6:	4b26      	ldr	r3, [pc, #152]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 80056e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0f0      	beq.n	80056d4 <HAL_RCC_OscConfig+0x200>
 80056f2:	e015      	b.n	8005720 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056f4:	4b24      	ldr	r3, [pc, #144]	; (8005788 <HAL_RCC_OscConfig+0x2b4>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056fa:	f7fc ffb3 	bl	8002664 <HAL_GetTick>
 80056fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005702:	f7fc ffaf 	bl	8002664 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e144      	b.n	800599e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005714:	4b1a      	ldr	r3, [pc, #104]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1f0      	bne.n	8005702 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 80a0 	beq.w	800586e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800572e:	2300      	movs	r3, #0
 8005730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005732:	4b13      	ldr	r3, [pc, #76]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10f      	bne.n	800575e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800573e:	2300      	movs	r3, #0
 8005740:	60bb      	str	r3, [r7, #8]
 8005742:	4b0f      	ldr	r3, [pc, #60]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	4a0e      	ldr	r2, [pc, #56]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800574c:	6413      	str	r3, [r2, #64]	; 0x40
 800574e:	4b0c      	ldr	r3, [pc, #48]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005756:	60bb      	str	r3, [r7, #8]
 8005758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800575a:	2301      	movs	r3, #1
 800575c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800575e:	4b0b      	ldr	r3, [pc, #44]	; (800578c <HAL_RCC_OscConfig+0x2b8>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005766:	2b00      	cmp	r3, #0
 8005768:	d121      	bne.n	80057ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800576a:	4b08      	ldr	r3, [pc, #32]	; (800578c <HAL_RCC_OscConfig+0x2b8>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a07      	ldr	r2, [pc, #28]	; (800578c <HAL_RCC_OscConfig+0x2b8>)
 8005770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005776:	f7fc ff75 	bl	8002664 <HAL_GetTick>
 800577a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800577c:	e011      	b.n	80057a2 <HAL_RCC_OscConfig+0x2ce>
 800577e:	bf00      	nop
 8005780:	40023800 	.word	0x40023800
 8005784:	42470000 	.word	0x42470000
 8005788:	42470e80 	.word	0x42470e80
 800578c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005790:	f7fc ff68 	bl	8002664 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e0fd      	b.n	800599e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a2:	4b81      	ldr	r3, [pc, #516]	; (80059a8 <HAL_RCC_OscConfig+0x4d4>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0f0      	beq.n	8005790 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d106      	bne.n	80057c4 <HAL_RCC_OscConfig+0x2f0>
 80057b6:	4b7d      	ldr	r3, [pc, #500]	; (80059ac <HAL_RCC_OscConfig+0x4d8>)
 80057b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ba:	4a7c      	ldr	r2, [pc, #496]	; (80059ac <HAL_RCC_OscConfig+0x4d8>)
 80057bc:	f043 0301 	orr.w	r3, r3, #1
 80057c0:	6713      	str	r3, [r2, #112]	; 0x70
 80057c2:	e01c      	b.n	80057fe <HAL_RCC_OscConfig+0x32a>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	2b05      	cmp	r3, #5
 80057ca:	d10c      	bne.n	80057e6 <HAL_RCC_OscConfig+0x312>
 80057cc:	4b77      	ldr	r3, [pc, #476]	; (80059ac <HAL_RCC_OscConfig+0x4d8>)
 80057ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d0:	4a76      	ldr	r2, [pc, #472]	; (80059ac <HAL_RCC_OscConfig+0x4d8>)
 80057d2:	f043 0304 	orr.w	r3, r3, #4
 80057d6:	6713      	str	r3, [r2, #112]	; 0x70
 80057d8:	4b74      	ldr	r3, [pc, #464]	; (80059ac <HAL_RCC_OscConfig+0x4d8>)
 80057da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057dc:	4a73      	ldr	r2, [pc, #460]	; (80059ac <HAL_RCC_OscConfig+0x4d8>)
 80057de:	f043 0301 	orr.w	r3, r3, #1
 80057e2:	6713      	str	r3, [r2, #112]	; 0x70
 80057e4:	e00b      	b.n	80057fe <HAL_RCC_OscConfig+0x32a>
 80057e6:	4b71      	ldr	r3, [pc, #452]	; (80059ac <HAL_RCC_OscConfig+0x4d8>)
 80057e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ea:	4a70      	ldr	r2, [pc, #448]	; (80059ac <HAL_RCC_OscConfig+0x4d8>)
 80057ec:	f023 0301 	bic.w	r3, r3, #1
 80057f0:	6713      	str	r3, [r2, #112]	; 0x70
 80057f2:	4b6e      	ldr	r3, [pc, #440]	; (80059ac <HAL_RCC_OscConfig+0x4d8>)
 80057f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f6:	4a6d      	ldr	r2, [pc, #436]	; (80059ac <HAL_RCC_OscConfig+0x4d8>)
 80057f8:	f023 0304 	bic.w	r3, r3, #4
 80057fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d015      	beq.n	8005832 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005806:	f7fc ff2d 	bl	8002664 <HAL_GetTick>
 800580a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800580c:	e00a      	b.n	8005824 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800580e:	f7fc ff29 	bl	8002664 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	f241 3288 	movw	r2, #5000	; 0x1388
 800581c:	4293      	cmp	r3, r2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e0bc      	b.n	800599e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005824:	4b61      	ldr	r3, [pc, #388]	; (80059ac <HAL_RCC_OscConfig+0x4d8>)
 8005826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0ee      	beq.n	800580e <HAL_RCC_OscConfig+0x33a>
 8005830:	e014      	b.n	800585c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005832:	f7fc ff17 	bl	8002664 <HAL_GetTick>
 8005836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005838:	e00a      	b.n	8005850 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800583a:	f7fc ff13 	bl	8002664 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	f241 3288 	movw	r2, #5000	; 0x1388
 8005848:	4293      	cmp	r3, r2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e0a6      	b.n	800599e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005850:	4b56      	ldr	r3, [pc, #344]	; (80059ac <HAL_RCC_OscConfig+0x4d8>)
 8005852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1ee      	bne.n	800583a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800585c:	7dfb      	ldrb	r3, [r7, #23]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d105      	bne.n	800586e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005862:	4b52      	ldr	r3, [pc, #328]	; (80059ac <HAL_RCC_OscConfig+0x4d8>)
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	4a51      	ldr	r2, [pc, #324]	; (80059ac <HAL_RCC_OscConfig+0x4d8>)
 8005868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800586c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 8092 	beq.w	800599c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005878:	4b4c      	ldr	r3, [pc, #304]	; (80059ac <HAL_RCC_OscConfig+0x4d8>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 030c 	and.w	r3, r3, #12
 8005880:	2b08      	cmp	r3, #8
 8005882:	d05c      	beq.n	800593e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	2b02      	cmp	r3, #2
 800588a:	d141      	bne.n	8005910 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800588c:	4b48      	ldr	r3, [pc, #288]	; (80059b0 <HAL_RCC_OscConfig+0x4dc>)
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005892:	f7fc fee7 	bl	8002664 <HAL_GetTick>
 8005896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800589a:	f7fc fee3 	bl	8002664 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e078      	b.n	800599e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ac:	4b3f      	ldr	r3, [pc, #252]	; (80059ac <HAL_RCC_OscConfig+0x4d8>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1f0      	bne.n	800589a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	019b      	lsls	r3, r3, #6
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ce:	085b      	lsrs	r3, r3, #1
 80058d0:	3b01      	subs	r3, #1
 80058d2:	041b      	lsls	r3, r3, #16
 80058d4:	431a      	orrs	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058da:	061b      	lsls	r3, r3, #24
 80058dc:	4933      	ldr	r1, [pc, #204]	; (80059ac <HAL_RCC_OscConfig+0x4d8>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058e2:	4b33      	ldr	r3, [pc, #204]	; (80059b0 <HAL_RCC_OscConfig+0x4dc>)
 80058e4:	2201      	movs	r2, #1
 80058e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e8:	f7fc febc 	bl	8002664 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058f0:	f7fc feb8 	bl	8002664 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e04d      	b.n	800599e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005902:	4b2a      	ldr	r3, [pc, #168]	; (80059ac <HAL_RCC_OscConfig+0x4d8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0f0      	beq.n	80058f0 <HAL_RCC_OscConfig+0x41c>
 800590e:	e045      	b.n	800599c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005910:	4b27      	ldr	r3, [pc, #156]	; (80059b0 <HAL_RCC_OscConfig+0x4dc>)
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005916:	f7fc fea5 	bl	8002664 <HAL_GetTick>
 800591a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800591c:	e008      	b.n	8005930 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800591e:	f7fc fea1 	bl	8002664 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e036      	b.n	800599e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005930:	4b1e      	ldr	r3, [pc, #120]	; (80059ac <HAL_RCC_OscConfig+0x4d8>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f0      	bne.n	800591e <HAL_RCC_OscConfig+0x44a>
 800593c:	e02e      	b.n	800599c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e029      	b.n	800599e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800594a:	4b18      	ldr	r3, [pc, #96]	; (80059ac <HAL_RCC_OscConfig+0x4d8>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	429a      	cmp	r2, r3
 800595c:	d11c      	bne.n	8005998 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005968:	429a      	cmp	r2, r3
 800596a:	d115      	bne.n	8005998 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005972:	4013      	ands	r3, r2
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005978:	4293      	cmp	r3, r2
 800597a:	d10d      	bne.n	8005998 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005986:	429a      	cmp	r2, r3
 8005988:	d106      	bne.n	8005998 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005994:	429a      	cmp	r2, r3
 8005996:	d001      	beq.n	800599c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e000      	b.n	800599e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	40007000 	.word	0x40007000
 80059ac:	40023800 	.word	0x40023800
 80059b0:	42470060 	.word	0x42470060

080059b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e0cc      	b.n	8005b62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059c8:	4b68      	ldr	r3, [pc, #416]	; (8005b6c <HAL_RCC_ClockConfig+0x1b8>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d90c      	bls.n	80059f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d6:	4b65      	ldr	r3, [pc, #404]	; (8005b6c <HAL_RCC_ClockConfig+0x1b8>)
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059de:	4b63      	ldr	r3, [pc, #396]	; (8005b6c <HAL_RCC_ClockConfig+0x1b8>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 030f 	and.w	r3, r3, #15
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d001      	beq.n	80059f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e0b8      	b.n	8005b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d020      	beq.n	8005a3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d005      	beq.n	8005a14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a08:	4b59      	ldr	r3, [pc, #356]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	4a58      	ldr	r2, [pc, #352]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0308 	and.w	r3, r3, #8
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d005      	beq.n	8005a2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a20:	4b53      	ldr	r3, [pc, #332]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	4a52      	ldr	r2, [pc, #328]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a2c:	4b50      	ldr	r3, [pc, #320]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	494d      	ldr	r1, [pc, #308]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d044      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d107      	bne.n	8005a62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a52:	4b47      	ldr	r3, [pc, #284]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d119      	bne.n	8005a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e07f      	b.n	8005b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d003      	beq.n	8005a72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d107      	bne.n	8005a82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a72:	4b3f      	ldr	r3, [pc, #252]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d109      	bne.n	8005a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e06f      	b.n	8005b62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a82:	4b3b      	ldr	r3, [pc, #236]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e067      	b.n	8005b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a92:	4b37      	ldr	r3, [pc, #220]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f023 0203 	bic.w	r2, r3, #3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	4934      	ldr	r1, [pc, #208]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005aa4:	f7fc fdde 	bl	8002664 <HAL_GetTick>
 8005aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aaa:	e00a      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aac:	f7fc fdda 	bl	8002664 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e04f      	b.n	8005b62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac2:	4b2b      	ldr	r3, [pc, #172]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f003 020c 	and.w	r2, r3, #12
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d1eb      	bne.n	8005aac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ad4:	4b25      	ldr	r3, [pc, #148]	; (8005b6c <HAL_RCC_ClockConfig+0x1b8>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 030f 	and.w	r3, r3, #15
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d20c      	bcs.n	8005afc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ae2:	4b22      	ldr	r3, [pc, #136]	; (8005b6c <HAL_RCC_ClockConfig+0x1b8>)
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	b2d2      	uxtb	r2, r2
 8005ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aea:	4b20      	ldr	r3, [pc, #128]	; (8005b6c <HAL_RCC_ClockConfig+0x1b8>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d001      	beq.n	8005afc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e032      	b.n	8005b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d008      	beq.n	8005b1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b08:	4b19      	ldr	r3, [pc, #100]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	4916      	ldr	r1, [pc, #88]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0308 	and.w	r3, r3, #8
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d009      	beq.n	8005b3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b26:	4b12      	ldr	r3, [pc, #72]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	490e      	ldr	r1, [pc, #56]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b3a:	f000 f821 	bl	8005b80 <HAL_RCC_GetSysClockFreq>
 8005b3e:	4601      	mov	r1, r0
 8005b40:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	091b      	lsrs	r3, r3, #4
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	4a0a      	ldr	r2, [pc, #40]	; (8005b74 <HAL_RCC_ClockConfig+0x1c0>)
 8005b4c:	5cd3      	ldrb	r3, [r2, r3]
 8005b4e:	fa21 f303 	lsr.w	r3, r1, r3
 8005b52:	4a09      	ldr	r2, [pc, #36]	; (8005b78 <HAL_RCC_ClockConfig+0x1c4>)
 8005b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b56:	4b09      	ldr	r3, [pc, #36]	; (8005b7c <HAL_RCC_ClockConfig+0x1c8>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fc fd3e 	bl	80025dc <HAL_InitTick>

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	40023c00 	.word	0x40023c00
 8005b70:	40023800 	.word	0x40023800
 8005b74:	080099c4 	.word	0x080099c4
 8005b78:	20000000 	.word	0x20000000
 8005b7c:	20000004 	.word	0x20000004

08005b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	607b      	str	r3, [r7, #4]
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b96:	4b63      	ldr	r3, [pc, #396]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 030c 	and.w	r3, r3, #12
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d007      	beq.n	8005bb2 <HAL_RCC_GetSysClockFreq+0x32>
 8005ba2:	2b08      	cmp	r3, #8
 8005ba4:	d008      	beq.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x38>
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f040 80b4 	bne.w	8005d14 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bac:	4b5e      	ldr	r3, [pc, #376]	; (8005d28 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005bae:	60bb      	str	r3, [r7, #8]
       break;
 8005bb0:	e0b3      	b.n	8005d1a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bb2:	4b5e      	ldr	r3, [pc, #376]	; (8005d2c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005bb4:	60bb      	str	r3, [r7, #8]
      break;
 8005bb6:	e0b0      	b.n	8005d1a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bb8:	4b5a      	ldr	r3, [pc, #360]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bc0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bc2:	4b58      	ldr	r3, [pc, #352]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d04a      	beq.n	8005c64 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bce:	4b55      	ldr	r3, [pc, #340]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	099b      	lsrs	r3, r3, #6
 8005bd4:	f04f 0400 	mov.w	r4, #0
 8005bd8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	ea03 0501 	and.w	r5, r3, r1
 8005be4:	ea04 0602 	and.w	r6, r4, r2
 8005be8:	4629      	mov	r1, r5
 8005bea:	4632      	mov	r2, r6
 8005bec:	f04f 0300 	mov.w	r3, #0
 8005bf0:	f04f 0400 	mov.w	r4, #0
 8005bf4:	0154      	lsls	r4, r2, #5
 8005bf6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005bfa:	014b      	lsls	r3, r1, #5
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4622      	mov	r2, r4
 8005c00:	1b49      	subs	r1, r1, r5
 8005c02:	eb62 0206 	sbc.w	r2, r2, r6
 8005c06:	f04f 0300 	mov.w	r3, #0
 8005c0a:	f04f 0400 	mov.w	r4, #0
 8005c0e:	0194      	lsls	r4, r2, #6
 8005c10:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005c14:	018b      	lsls	r3, r1, #6
 8005c16:	1a5b      	subs	r3, r3, r1
 8005c18:	eb64 0402 	sbc.w	r4, r4, r2
 8005c1c:	f04f 0100 	mov.w	r1, #0
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	00e2      	lsls	r2, r4, #3
 8005c26:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005c2a:	00d9      	lsls	r1, r3, #3
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4614      	mov	r4, r2
 8005c30:	195b      	adds	r3, r3, r5
 8005c32:	eb44 0406 	adc.w	r4, r4, r6
 8005c36:	f04f 0100 	mov.w	r1, #0
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	0262      	lsls	r2, r4, #9
 8005c40:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005c44:	0259      	lsls	r1, r3, #9
 8005c46:	460b      	mov	r3, r1
 8005c48:	4614      	mov	r4, r2
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f04f 0400 	mov.w	r4, #0
 8005c54:	461a      	mov	r2, r3
 8005c56:	4623      	mov	r3, r4
 8005c58:	f7fa fffa 	bl	8000c50 <__aeabi_uldivmod>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	460c      	mov	r4, r1
 8005c60:	60fb      	str	r3, [r7, #12]
 8005c62:	e049      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c64:	4b2f      	ldr	r3, [pc, #188]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	099b      	lsrs	r3, r3, #6
 8005c6a:	f04f 0400 	mov.w	r4, #0
 8005c6e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005c72:	f04f 0200 	mov.w	r2, #0
 8005c76:	ea03 0501 	and.w	r5, r3, r1
 8005c7a:	ea04 0602 	and.w	r6, r4, r2
 8005c7e:	4629      	mov	r1, r5
 8005c80:	4632      	mov	r2, r6
 8005c82:	f04f 0300 	mov.w	r3, #0
 8005c86:	f04f 0400 	mov.w	r4, #0
 8005c8a:	0154      	lsls	r4, r2, #5
 8005c8c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005c90:	014b      	lsls	r3, r1, #5
 8005c92:	4619      	mov	r1, r3
 8005c94:	4622      	mov	r2, r4
 8005c96:	1b49      	subs	r1, r1, r5
 8005c98:	eb62 0206 	sbc.w	r2, r2, r6
 8005c9c:	f04f 0300 	mov.w	r3, #0
 8005ca0:	f04f 0400 	mov.w	r4, #0
 8005ca4:	0194      	lsls	r4, r2, #6
 8005ca6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005caa:	018b      	lsls	r3, r1, #6
 8005cac:	1a5b      	subs	r3, r3, r1
 8005cae:	eb64 0402 	sbc.w	r4, r4, r2
 8005cb2:	f04f 0100 	mov.w	r1, #0
 8005cb6:	f04f 0200 	mov.w	r2, #0
 8005cba:	00e2      	lsls	r2, r4, #3
 8005cbc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005cc0:	00d9      	lsls	r1, r3, #3
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	195b      	adds	r3, r3, r5
 8005cc8:	eb44 0406 	adc.w	r4, r4, r6
 8005ccc:	f04f 0100 	mov.w	r1, #0
 8005cd0:	f04f 0200 	mov.w	r2, #0
 8005cd4:	02a2      	lsls	r2, r4, #10
 8005cd6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005cda:	0299      	lsls	r1, r3, #10
 8005cdc:	460b      	mov	r3, r1
 8005cde:	4614      	mov	r4, r2
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f04f 0400 	mov.w	r4, #0
 8005cea:	461a      	mov	r2, r3
 8005cec:	4623      	mov	r3, r4
 8005cee:	f7fa ffaf 	bl	8000c50 <__aeabi_uldivmod>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	460c      	mov	r4, r1
 8005cf6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005cf8:	4b0a      	ldr	r3, [pc, #40]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	0c1b      	lsrs	r3, r3, #16
 8005cfe:	f003 0303 	and.w	r3, r3, #3
 8005d02:	3301      	adds	r3, #1
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d10:	60bb      	str	r3, [r7, #8]
      break;
 8005d12:	e002      	b.n	8005d1a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d14:	4b04      	ldr	r3, [pc, #16]	; (8005d28 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005d16:	60bb      	str	r3, [r7, #8]
      break;
 8005d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d24:	40023800 	.word	0x40023800
 8005d28:	00f42400 	.word	0x00f42400
 8005d2c:	007a1200 	.word	0x007a1200

08005d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d30:	b480      	push	{r7}
 8005d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d34:	4b03      	ldr	r3, [pc, #12]	; (8005d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d36:	681b      	ldr	r3, [r3, #0]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	20000000 	.word	0x20000000

08005d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d4c:	f7ff fff0 	bl	8005d30 <HAL_RCC_GetHCLKFreq>
 8005d50:	4601      	mov	r1, r0
 8005d52:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	0a9b      	lsrs	r3, r3, #10
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	4a03      	ldr	r2, [pc, #12]	; (8005d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d5e:	5cd3      	ldrb	r3, [r2, r3]
 8005d60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	40023800 	.word	0x40023800
 8005d6c:	080099d4 	.word	0x080099d4

08005d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d74:	f7ff ffdc 	bl	8005d30 <HAL_RCC_GetHCLKFreq>
 8005d78:	4601      	mov	r1, r0
 8005d7a:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	0b5b      	lsrs	r3, r3, #13
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	4a03      	ldr	r2, [pc, #12]	; (8005d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d86:	5cd3      	ldrb	r3, [r2, r3]
 8005d88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40023800 	.word	0x40023800
 8005d94:	080099d4 	.word	0x080099d4

08005d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e01d      	b.n	8005de6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7fb fbe4 	bl	800158c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	f000 fa14 	bl	8006204 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b085      	sub	sp, #20
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f042 0201 	orr.w	r2, r2, #1
 8005e04:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f003 0307 	and.w	r3, r3, #7
 8005e10:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b06      	cmp	r3, #6
 8005e16:	d007      	beq.n	8005e28 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d122      	bne.n	8005e92 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d11b      	bne.n	8005e92 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f06f 0202 	mvn.w	r2, #2
 8005e62:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	f003 0303 	and.w	r3, r3, #3
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f9a5 	bl	80061c8 <HAL_TIM_IC_CaptureCallback>
 8005e7e:	e005      	b.n	8005e8c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f997 	bl	80061b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f9a8 	bl	80061dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d122      	bne.n	8005ee6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b04      	cmp	r3, #4
 8005eac:	d11b      	bne.n	8005ee6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f06f 0204 	mvn.w	r2, #4
 8005eb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f97b 	bl	80061c8 <HAL_TIM_IC_CaptureCallback>
 8005ed2:	e005      	b.n	8005ee0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f96d 	bl	80061b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f97e 	bl	80061dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	f003 0308 	and.w	r3, r3, #8
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d122      	bne.n	8005f3a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b08      	cmp	r3, #8
 8005f00:	d11b      	bne.n	8005f3a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f06f 0208 	mvn.w	r2, #8
 8005f0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2204      	movs	r2, #4
 8005f10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	f003 0303 	and.w	r3, r3, #3
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f951 	bl	80061c8 <HAL_TIM_IC_CaptureCallback>
 8005f26:	e005      	b.n	8005f34 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f943 	bl	80061b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f954 	bl	80061dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f003 0310 	and.w	r3, r3, #16
 8005f44:	2b10      	cmp	r3, #16
 8005f46:	d122      	bne.n	8005f8e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f003 0310 	and.w	r3, r3, #16
 8005f52:	2b10      	cmp	r3, #16
 8005f54:	d11b      	bne.n	8005f8e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f06f 0210 	mvn.w	r2, #16
 8005f5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2208      	movs	r2, #8
 8005f64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f927 	bl	80061c8 <HAL_TIM_IC_CaptureCallback>
 8005f7a:	e005      	b.n	8005f88 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f919 	bl	80061b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f92a 	bl	80061dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d10e      	bne.n	8005fba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d107      	bne.n	8005fba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f06f 0201 	mvn.w	r2, #1
 8005fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7fb f8c5 	bl	8001144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc4:	2b80      	cmp	r3, #128	; 0x80
 8005fc6:	d10e      	bne.n	8005fe6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd2:	2b80      	cmp	r3, #128	; 0x80
 8005fd4:	d107      	bne.n	8005fe6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 faa1 	bl	8006528 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff0:	2b40      	cmp	r3, #64	; 0x40
 8005ff2:	d10e      	bne.n	8006012 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffe:	2b40      	cmp	r3, #64	; 0x40
 8006000:	d107      	bne.n	8006012 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800600a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f8ef 	bl	80061f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	f003 0320 	and.w	r3, r3, #32
 800601c:	2b20      	cmp	r3, #32
 800601e:	d10e      	bne.n	800603e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b20      	cmp	r3, #32
 800602c:	d107      	bne.n	800603e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f06f 0220 	mvn.w	r2, #32
 8006036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fa6b 	bl	8006514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800603e:	bf00      	nop
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006056:	2b01      	cmp	r3, #1
 8006058:	d101      	bne.n	800605e <HAL_TIM_ConfigClockSource+0x18>
 800605a:	2302      	movs	r3, #2
 800605c:	e0a6      	b.n	80061ac <HAL_TIM_ConfigClockSource+0x166>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2202      	movs	r2, #2
 800606a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800607c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006084:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b40      	cmp	r3, #64	; 0x40
 8006094:	d067      	beq.n	8006166 <HAL_TIM_ConfigClockSource+0x120>
 8006096:	2b40      	cmp	r3, #64	; 0x40
 8006098:	d80b      	bhi.n	80060b2 <HAL_TIM_ConfigClockSource+0x6c>
 800609a:	2b10      	cmp	r3, #16
 800609c:	d073      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x140>
 800609e:	2b10      	cmp	r3, #16
 80060a0:	d802      	bhi.n	80060a8 <HAL_TIM_ConfigClockSource+0x62>
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d06f      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80060a6:	e078      	b.n	800619a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060a8:	2b20      	cmp	r3, #32
 80060aa:	d06c      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x140>
 80060ac:	2b30      	cmp	r3, #48	; 0x30
 80060ae:	d06a      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80060b0:	e073      	b.n	800619a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060b2:	2b70      	cmp	r3, #112	; 0x70
 80060b4:	d00d      	beq.n	80060d2 <HAL_TIM_ConfigClockSource+0x8c>
 80060b6:	2b70      	cmp	r3, #112	; 0x70
 80060b8:	d804      	bhi.n	80060c4 <HAL_TIM_ConfigClockSource+0x7e>
 80060ba:	2b50      	cmp	r3, #80	; 0x50
 80060bc:	d033      	beq.n	8006126 <HAL_TIM_ConfigClockSource+0xe0>
 80060be:	2b60      	cmp	r3, #96	; 0x60
 80060c0:	d041      	beq.n	8006146 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80060c2:	e06a      	b.n	800619a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060c8:	d066      	beq.n	8006198 <HAL_TIM_ConfigClockSource+0x152>
 80060ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ce:	d017      	beq.n	8006100 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80060d0:	e063      	b.n	800619a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	6899      	ldr	r1, [r3, #8]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f000 f989 	bl	80063f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	609a      	str	r2, [r3, #8]
      break;
 80060fe:	e04c      	b.n	800619a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6818      	ldr	r0, [r3, #0]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	6899      	ldr	r1, [r3, #8]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f000 f972 	bl	80063f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689a      	ldr	r2, [r3, #8]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006122:	609a      	str	r2, [r3, #8]
      break;
 8006124:	e039      	b.n	800619a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6818      	ldr	r0, [r3, #0]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	6859      	ldr	r1, [r3, #4]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	461a      	mov	r2, r3
 8006134:	f000 f8e6 	bl	8006304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2150      	movs	r1, #80	; 0x50
 800613e:	4618      	mov	r0, r3
 8006140:	f000 f93f 	bl	80063c2 <TIM_ITRx_SetConfig>
      break;
 8006144:	e029      	b.n	800619a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6818      	ldr	r0, [r3, #0]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	6859      	ldr	r1, [r3, #4]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	461a      	mov	r2, r3
 8006154:	f000 f905 	bl	8006362 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2160      	movs	r1, #96	; 0x60
 800615e:	4618      	mov	r0, r3
 8006160:	f000 f92f 	bl	80063c2 <TIM_ITRx_SetConfig>
      break;
 8006164:	e019      	b.n	800619a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	6859      	ldr	r1, [r3, #4]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	461a      	mov	r2, r3
 8006174:	f000 f8c6 	bl	8006304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2140      	movs	r1, #64	; 0x40
 800617e:	4618      	mov	r0, r3
 8006180:	f000 f91f 	bl	80063c2 <TIM_ITRx_SetConfig>
      break;
 8006184:	e009      	b.n	800619a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4619      	mov	r1, r3
 8006190:	4610      	mov	r0, r2
 8006192:	f000 f916 	bl	80063c2 <TIM_ITRx_SetConfig>
      break;
 8006196:	e000      	b.n	800619a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006198:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a34      	ldr	r2, [pc, #208]	; (80062e8 <TIM_Base_SetConfig+0xe4>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d00f      	beq.n	800623c <TIM_Base_SetConfig+0x38>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006222:	d00b      	beq.n	800623c <TIM_Base_SetConfig+0x38>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a31      	ldr	r2, [pc, #196]	; (80062ec <TIM_Base_SetConfig+0xe8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d007      	beq.n	800623c <TIM_Base_SetConfig+0x38>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a30      	ldr	r2, [pc, #192]	; (80062f0 <TIM_Base_SetConfig+0xec>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d003      	beq.n	800623c <TIM_Base_SetConfig+0x38>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a2f      	ldr	r2, [pc, #188]	; (80062f4 <TIM_Base_SetConfig+0xf0>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d108      	bne.n	800624e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	4313      	orrs	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a25      	ldr	r2, [pc, #148]	; (80062e8 <TIM_Base_SetConfig+0xe4>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d01b      	beq.n	800628e <TIM_Base_SetConfig+0x8a>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800625c:	d017      	beq.n	800628e <TIM_Base_SetConfig+0x8a>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a22      	ldr	r2, [pc, #136]	; (80062ec <TIM_Base_SetConfig+0xe8>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d013      	beq.n	800628e <TIM_Base_SetConfig+0x8a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a21      	ldr	r2, [pc, #132]	; (80062f0 <TIM_Base_SetConfig+0xec>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d00f      	beq.n	800628e <TIM_Base_SetConfig+0x8a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a20      	ldr	r2, [pc, #128]	; (80062f4 <TIM_Base_SetConfig+0xf0>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00b      	beq.n	800628e <TIM_Base_SetConfig+0x8a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a1f      	ldr	r2, [pc, #124]	; (80062f8 <TIM_Base_SetConfig+0xf4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d007      	beq.n	800628e <TIM_Base_SetConfig+0x8a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a1e      	ldr	r2, [pc, #120]	; (80062fc <TIM_Base_SetConfig+0xf8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d003      	beq.n	800628e <TIM_Base_SetConfig+0x8a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a1d      	ldr	r2, [pc, #116]	; (8006300 <TIM_Base_SetConfig+0xfc>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d108      	bne.n	80062a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	4313      	orrs	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	689a      	ldr	r2, [r3, #8]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a08      	ldr	r2, [pc, #32]	; (80062e8 <TIM_Base_SetConfig+0xe4>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d103      	bne.n	80062d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	691a      	ldr	r2, [r3, #16]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	615a      	str	r2, [r3, #20]
}
 80062da:	bf00      	nop
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40010000 	.word	0x40010000
 80062ec:	40000400 	.word	0x40000400
 80062f0:	40000800 	.word	0x40000800
 80062f4:	40000c00 	.word	0x40000c00
 80062f8:	40014000 	.word	0x40014000
 80062fc:	40014400 	.word	0x40014400
 8006300:	40014800 	.word	0x40014800

08006304 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	f023 0201 	bic.w	r2, r3, #1
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800632e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	011b      	lsls	r3, r3, #4
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f023 030a 	bic.w	r3, r3, #10
 8006340:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	4313      	orrs	r3, r2
 8006348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	621a      	str	r2, [r3, #32]
}
 8006356:	bf00      	nop
 8006358:	371c      	adds	r7, #28
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006362:	b480      	push	{r7}
 8006364:	b087      	sub	sp, #28
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	f023 0210 	bic.w	r2, r3, #16
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800638c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	031b      	lsls	r3, r3, #12
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800639e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	011b      	lsls	r3, r3, #4
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	621a      	str	r2, [r3, #32]
}
 80063b6:	bf00      	nop
 80063b8:	371c      	adds	r7, #28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b085      	sub	sp, #20
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4313      	orrs	r3, r2
 80063e0:	f043 0307 	orr.w	r3, r3, #7
 80063e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	609a      	str	r2, [r3, #8]
}
 80063ec:	bf00      	nop
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b087      	sub	sp, #28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006412:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	021a      	lsls	r2, r3, #8
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	431a      	orrs	r2, r3
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	4313      	orrs	r3, r2
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	4313      	orrs	r3, r2
 8006424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	609a      	str	r2, [r3, #8]
}
 800642c:	bf00      	nop
 800642e:	371c      	adds	r7, #28
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006448:	2b01      	cmp	r3, #1
 800644a:	d101      	bne.n	8006450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800644c:	2302      	movs	r3, #2
 800644e:	e050      	b.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2202      	movs	r2, #2
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006476:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a1c      	ldr	r2, [pc, #112]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d018      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800649c:	d013      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a18      	ldr	r2, [pc, #96]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00e      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a16      	ldr	r2, [pc, #88]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d009      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a15      	ldr	r2, [pc, #84]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d004      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a13      	ldr	r2, [pc, #76]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d10c      	bne.n	80064e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40010000 	.word	0x40010000
 8006504:	40000400 	.word	0x40000400
 8006508:	40000800 	.word	0x40000800
 800650c:	40000c00 	.word	0x40000c00
 8006510:	40014000 	.word	0x40014000

08006514 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e03f      	b.n	80065ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fb f83a 	bl	80015dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2224      	movs	r2, #36	; 0x24
 800656c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800657e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 faad 	bl	8006ae0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	691a      	ldr	r2, [r3, #16]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006594:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	695a      	ldr	r2, [r3, #20]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68da      	ldr	r2, [r3, #12]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2220      	movs	r2, #32
 80065c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b085      	sub	sp, #20
 80065da:	af00      	add	r7, sp, #0
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	60b9      	str	r1, [r7, #8]
 80065e0:	4613      	mov	r3, r2
 80065e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b20      	cmp	r3, #32
 80065ee:	d130      	bne.n	8006652 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <HAL_UART_Transmit_IT+0x26>
 80065f6:	88fb      	ldrh	r3, [r7, #6]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e029      	b.n	8006654 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <HAL_UART_Transmit_IT+0x38>
 800660a:	2302      	movs	r3, #2
 800660c:	e022      	b.n	8006654 <HAL_UART_Transmit_IT+0x7e>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	88fa      	ldrh	r2, [r7, #6]
 8006620:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	88fa      	ldrh	r2, [r7, #6]
 8006626:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2221      	movs	r2, #33	; 0x21
 8006632:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68da      	ldr	r2, [r3, #12]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800664c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	e000      	b.n	8006654 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006652:	2302      	movs	r3, #2
  }
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b088      	sub	sp, #32
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006680:	2300      	movs	r3, #0
 8006682:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	f003 030f 	and.w	r3, r3, #15
 800668e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10d      	bne.n	80066b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	f003 0320 	and.w	r3, r3, #32
 800669c:	2b00      	cmp	r3, #0
 800669e:	d008      	beq.n	80066b2 <HAL_UART_IRQHandler+0x52>
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	f003 0320 	and.w	r3, r3, #32
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f996 	bl	80069dc <UART_Receive_IT>
      return;
 80066b0:	e0d1      	b.n	8006856 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 80b0 	beq.w	800681a <HAL_UART_IRQHandler+0x1ba>
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d105      	bne.n	80066d0 <HAL_UART_IRQHandler+0x70>
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 80a5 	beq.w	800681a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00a      	beq.n	80066f0 <HAL_UART_IRQHandler+0x90>
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e8:	f043 0201 	orr.w	r2, r3, #1
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <HAL_UART_IRQHandler+0xb0>
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006708:	f043 0202 	orr.w	r2, r3, #2
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <HAL_UART_IRQHandler+0xd0>
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d005      	beq.n	8006730 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006728:	f043 0204 	orr.w	r2, r3, #4
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	f003 0308 	and.w	r3, r3, #8
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00f      	beq.n	800675a <HAL_UART_IRQHandler+0xfa>
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	f003 0320 	and.w	r3, r3, #32
 8006740:	2b00      	cmp	r3, #0
 8006742:	d104      	bne.n	800674e <HAL_UART_IRQHandler+0xee>
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d005      	beq.n	800675a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006752:	f043 0208 	orr.w	r2, r3, #8
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675e:	2b00      	cmp	r3, #0
 8006760:	d078      	beq.n	8006854 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	f003 0320 	and.w	r3, r3, #32
 8006768:	2b00      	cmp	r3, #0
 800676a:	d007      	beq.n	800677c <HAL_UART_IRQHandler+0x11c>
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	f003 0320 	and.w	r3, r3, #32
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f930 	bl	80069dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006786:	2b40      	cmp	r3, #64	; 0x40
 8006788:	bf0c      	ite	eq
 800678a:	2301      	moveq	r3, #1
 800678c:	2300      	movne	r3, #0
 800678e:	b2db      	uxtb	r3, r3
 8006790:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006796:	f003 0308 	and.w	r3, r3, #8
 800679a:	2b00      	cmp	r3, #0
 800679c:	d102      	bne.n	80067a4 <HAL_UART_IRQHandler+0x144>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d031      	beq.n	8006808 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f879 	bl	800689c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b4:	2b40      	cmp	r3, #64	; 0x40
 80067b6:	d123      	bne.n	8006800 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	695a      	ldr	r2, [r3, #20]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067c6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d013      	beq.n	80067f8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d4:	4a21      	ldr	r2, [pc, #132]	; (800685c <HAL_UART_IRQHandler+0x1fc>)
 80067d6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fc f85e 	bl	800289e <HAL_DMA_Abort_IT>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d016      	beq.n	8006816 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80067f2:	4610      	mov	r0, r2
 80067f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f6:	e00e      	b.n	8006816 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f845 	bl	8006888 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067fe:	e00a      	b.n	8006816 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f841 	bl	8006888 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006806:	e006      	b.n	8006816 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f83d 	bl	8006888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006814:	e01e      	b.n	8006854 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006816:	bf00      	nop
    return;
 8006818:	e01c      	b.n	8006854 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006820:	2b00      	cmp	r3, #0
 8006822:	d008      	beq.n	8006836 <HAL_UART_IRQHandler+0x1d6>
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f866 	bl	8006900 <UART_Transmit_IT>
    return;
 8006834:	e00f      	b.n	8006856 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00a      	beq.n	8006856 <HAL_UART_IRQHandler+0x1f6>
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	d005      	beq.n	8006856 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f8ae 	bl	80069ac <UART_EndTransmit_IT>
    return;
 8006850:	bf00      	nop
 8006852:	e000      	b.n	8006856 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006854:	bf00      	nop
  }
}
 8006856:	3720      	adds	r7, #32
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	080068d9 	.word	0x080068d9

08006860 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80068b2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	695a      	ldr	r2, [r3, #20]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0201 	bic.w	r2, r2, #1
 80068c2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2220      	movs	r2, #32
 80068c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f7ff ffc8 	bl	8006888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068f8:	bf00      	nop
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b21      	cmp	r3, #33	; 0x21
 8006912:	d144      	bne.n	800699e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800691c:	d11a      	bne.n	8006954 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006932:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d105      	bne.n	8006948 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	1c9a      	adds	r2, r3, #2
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	621a      	str	r2, [r3, #32]
 8006946:	e00e      	b.n	8006966 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a1b      	ldr	r3, [r3, #32]
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	621a      	str	r2, [r3, #32]
 8006952:	e008      	b.n	8006966 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a1b      	ldr	r3, [r3, #32]
 8006958:	1c59      	adds	r1, r3, #1
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	6211      	str	r1, [r2, #32]
 800695e:	781a      	ldrb	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800696a:	b29b      	uxth	r3, r3
 800696c:	3b01      	subs	r3, #1
 800696e:	b29b      	uxth	r3, r3
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	4619      	mov	r1, r3
 8006974:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10f      	bne.n	800699a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006988:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68da      	ldr	r2, [r3, #12]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006998:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	e000      	b.n	80069a0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800699e:	2302      	movs	r3, #2
  }
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68da      	ldr	r2, [r3, #12]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2220      	movs	r2, #32
 80069c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7ff ff47 	bl	8006860 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b22      	cmp	r3, #34	; 0x22
 80069ee:	d171      	bne.n	8006ad4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f8:	d123      	bne.n	8006a42 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fe:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10e      	bne.n	8006a26 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1e:	1c9a      	adds	r2, r3, #2
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	629a      	str	r2, [r3, #40]	; 0x28
 8006a24:	e029      	b.n	8006a7a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3a:	1c5a      	adds	r2, r3, #1
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	629a      	str	r2, [r3, #40]	; 0x28
 8006a40:	e01b      	b.n	8006a7a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10a      	bne.n	8006a60 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6858      	ldr	r0, [r3, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a54:	1c59      	adds	r1, r3, #1
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	6291      	str	r1, [r2, #40]	; 0x28
 8006a5a:	b2c2      	uxtb	r2, r0
 8006a5c:	701a      	strb	r2, [r3, #0]
 8006a5e:	e00c      	b.n	8006a7a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6c:	1c58      	adds	r0, r3, #1
 8006a6e:	6879      	ldr	r1, [r7, #4]
 8006a70:	6288      	str	r0, [r1, #40]	; 0x28
 8006a72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006a76:	b2d2      	uxtb	r2, r2
 8006a78:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	3b01      	subs	r3, #1
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	4619      	mov	r1, r3
 8006a88:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d120      	bne.n	8006ad0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68da      	ldr	r2, [r3, #12]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 0220 	bic.w	r2, r2, #32
 8006a9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68da      	ldr	r2, [r3, #12]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006aac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	695a      	ldr	r2, [r3, #20]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0201 	bic.w	r2, r2, #1
 8006abc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff fed4 	bl	8006874 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	e002      	b.n	8006ad6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	e000      	b.n	8006ad6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006ad4:	2302      	movs	r3, #2
  }
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
	...

08006ae0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae4:	b085      	sub	sp, #20
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	430a      	orrs	r2, r1
 8006afe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	431a      	orrs	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	69db      	ldr	r3, [r3, #28]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006b22:	f023 030c 	bic.w	r3, r3, #12
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	6812      	ldr	r2, [r2, #0]
 8006b2a:	68f9      	ldr	r1, [r7, #12]
 8006b2c:	430b      	orrs	r3, r1
 8006b2e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b4e:	f040 818b 	bne.w	8006e68 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4ac1      	ldr	r2, [pc, #772]	; (8006e5c <UART_SetConfig+0x37c>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d005      	beq.n	8006b68 <UART_SetConfig+0x88>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4abf      	ldr	r2, [pc, #764]	; (8006e60 <UART_SetConfig+0x380>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	f040 80bd 	bne.w	8006ce2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b68:	f7ff f902 	bl	8005d70 <HAL_RCC_GetPCLK2Freq>
 8006b6c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	461d      	mov	r5, r3
 8006b72:	f04f 0600 	mov.w	r6, #0
 8006b76:	46a8      	mov	r8, r5
 8006b78:	46b1      	mov	r9, r6
 8006b7a:	eb18 0308 	adds.w	r3, r8, r8
 8006b7e:	eb49 0409 	adc.w	r4, r9, r9
 8006b82:	4698      	mov	r8, r3
 8006b84:	46a1      	mov	r9, r4
 8006b86:	eb18 0805 	adds.w	r8, r8, r5
 8006b8a:	eb49 0906 	adc.w	r9, r9, r6
 8006b8e:	f04f 0100 	mov.w	r1, #0
 8006b92:	f04f 0200 	mov.w	r2, #0
 8006b96:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b9a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b9e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006ba2:	4688      	mov	r8, r1
 8006ba4:	4691      	mov	r9, r2
 8006ba6:	eb18 0005 	adds.w	r0, r8, r5
 8006baa:	eb49 0106 	adc.w	r1, r9, r6
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	461d      	mov	r5, r3
 8006bb4:	f04f 0600 	mov.w	r6, #0
 8006bb8:	196b      	adds	r3, r5, r5
 8006bba:	eb46 0406 	adc.w	r4, r6, r6
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	4623      	mov	r3, r4
 8006bc2:	f7fa f845 	bl	8000c50 <__aeabi_uldivmod>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	460c      	mov	r4, r1
 8006bca:	461a      	mov	r2, r3
 8006bcc:	4ba5      	ldr	r3, [pc, #660]	; (8006e64 <UART_SetConfig+0x384>)
 8006bce:	fba3 2302 	umull	r2, r3, r3, r2
 8006bd2:	095b      	lsrs	r3, r3, #5
 8006bd4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	461d      	mov	r5, r3
 8006bdc:	f04f 0600 	mov.w	r6, #0
 8006be0:	46a9      	mov	r9, r5
 8006be2:	46b2      	mov	sl, r6
 8006be4:	eb19 0309 	adds.w	r3, r9, r9
 8006be8:	eb4a 040a 	adc.w	r4, sl, sl
 8006bec:	4699      	mov	r9, r3
 8006bee:	46a2      	mov	sl, r4
 8006bf0:	eb19 0905 	adds.w	r9, r9, r5
 8006bf4:	eb4a 0a06 	adc.w	sl, sl, r6
 8006bf8:	f04f 0100 	mov.w	r1, #0
 8006bfc:	f04f 0200 	mov.w	r2, #0
 8006c00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c0c:	4689      	mov	r9, r1
 8006c0e:	4692      	mov	sl, r2
 8006c10:	eb19 0005 	adds.w	r0, r9, r5
 8006c14:	eb4a 0106 	adc.w	r1, sl, r6
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	461d      	mov	r5, r3
 8006c1e:	f04f 0600 	mov.w	r6, #0
 8006c22:	196b      	adds	r3, r5, r5
 8006c24:	eb46 0406 	adc.w	r4, r6, r6
 8006c28:	461a      	mov	r2, r3
 8006c2a:	4623      	mov	r3, r4
 8006c2c:	f7fa f810 	bl	8000c50 <__aeabi_uldivmod>
 8006c30:	4603      	mov	r3, r0
 8006c32:	460c      	mov	r4, r1
 8006c34:	461a      	mov	r2, r3
 8006c36:	4b8b      	ldr	r3, [pc, #556]	; (8006e64 <UART_SetConfig+0x384>)
 8006c38:	fba3 1302 	umull	r1, r3, r3, r2
 8006c3c:	095b      	lsrs	r3, r3, #5
 8006c3e:	2164      	movs	r1, #100	; 0x64
 8006c40:	fb01 f303 	mul.w	r3, r1, r3
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	3332      	adds	r3, #50	; 0x32
 8006c4a:	4a86      	ldr	r2, [pc, #536]	; (8006e64 <UART_SetConfig+0x384>)
 8006c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c50:	095b      	lsrs	r3, r3, #5
 8006c52:	005b      	lsls	r3, r3, #1
 8006c54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c58:	4498      	add	r8, r3
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	461d      	mov	r5, r3
 8006c5e:	f04f 0600 	mov.w	r6, #0
 8006c62:	46a9      	mov	r9, r5
 8006c64:	46b2      	mov	sl, r6
 8006c66:	eb19 0309 	adds.w	r3, r9, r9
 8006c6a:	eb4a 040a 	adc.w	r4, sl, sl
 8006c6e:	4699      	mov	r9, r3
 8006c70:	46a2      	mov	sl, r4
 8006c72:	eb19 0905 	adds.w	r9, r9, r5
 8006c76:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c7a:	f04f 0100 	mov.w	r1, #0
 8006c7e:	f04f 0200 	mov.w	r2, #0
 8006c82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c8e:	4689      	mov	r9, r1
 8006c90:	4692      	mov	sl, r2
 8006c92:	eb19 0005 	adds.w	r0, r9, r5
 8006c96:	eb4a 0106 	adc.w	r1, sl, r6
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	461d      	mov	r5, r3
 8006ca0:	f04f 0600 	mov.w	r6, #0
 8006ca4:	196b      	adds	r3, r5, r5
 8006ca6:	eb46 0406 	adc.w	r4, r6, r6
 8006caa:	461a      	mov	r2, r3
 8006cac:	4623      	mov	r3, r4
 8006cae:	f7f9 ffcf 	bl	8000c50 <__aeabi_uldivmod>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	460c      	mov	r4, r1
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	4b6a      	ldr	r3, [pc, #424]	; (8006e64 <UART_SetConfig+0x384>)
 8006cba:	fba3 1302 	umull	r1, r3, r3, r2
 8006cbe:	095b      	lsrs	r3, r3, #5
 8006cc0:	2164      	movs	r1, #100	; 0x64
 8006cc2:	fb01 f303 	mul.w	r3, r1, r3
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	00db      	lsls	r3, r3, #3
 8006cca:	3332      	adds	r3, #50	; 0x32
 8006ccc:	4a65      	ldr	r2, [pc, #404]	; (8006e64 <UART_SetConfig+0x384>)
 8006cce:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd2:	095b      	lsrs	r3, r3, #5
 8006cd4:	f003 0207 	and.w	r2, r3, #7
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4442      	add	r2, r8
 8006cde:	609a      	str	r2, [r3, #8]
 8006ce0:	e26f      	b.n	80071c2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ce2:	f7ff f831 	bl	8005d48 <HAL_RCC_GetPCLK1Freq>
 8006ce6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	461d      	mov	r5, r3
 8006cec:	f04f 0600 	mov.w	r6, #0
 8006cf0:	46a8      	mov	r8, r5
 8006cf2:	46b1      	mov	r9, r6
 8006cf4:	eb18 0308 	adds.w	r3, r8, r8
 8006cf8:	eb49 0409 	adc.w	r4, r9, r9
 8006cfc:	4698      	mov	r8, r3
 8006cfe:	46a1      	mov	r9, r4
 8006d00:	eb18 0805 	adds.w	r8, r8, r5
 8006d04:	eb49 0906 	adc.w	r9, r9, r6
 8006d08:	f04f 0100 	mov.w	r1, #0
 8006d0c:	f04f 0200 	mov.w	r2, #0
 8006d10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d1c:	4688      	mov	r8, r1
 8006d1e:	4691      	mov	r9, r2
 8006d20:	eb18 0005 	adds.w	r0, r8, r5
 8006d24:	eb49 0106 	adc.w	r1, r9, r6
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	461d      	mov	r5, r3
 8006d2e:	f04f 0600 	mov.w	r6, #0
 8006d32:	196b      	adds	r3, r5, r5
 8006d34:	eb46 0406 	adc.w	r4, r6, r6
 8006d38:	461a      	mov	r2, r3
 8006d3a:	4623      	mov	r3, r4
 8006d3c:	f7f9 ff88 	bl	8000c50 <__aeabi_uldivmod>
 8006d40:	4603      	mov	r3, r0
 8006d42:	460c      	mov	r4, r1
 8006d44:	461a      	mov	r2, r3
 8006d46:	4b47      	ldr	r3, [pc, #284]	; (8006e64 <UART_SetConfig+0x384>)
 8006d48:	fba3 2302 	umull	r2, r3, r3, r2
 8006d4c:	095b      	lsrs	r3, r3, #5
 8006d4e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	461d      	mov	r5, r3
 8006d56:	f04f 0600 	mov.w	r6, #0
 8006d5a:	46a9      	mov	r9, r5
 8006d5c:	46b2      	mov	sl, r6
 8006d5e:	eb19 0309 	adds.w	r3, r9, r9
 8006d62:	eb4a 040a 	adc.w	r4, sl, sl
 8006d66:	4699      	mov	r9, r3
 8006d68:	46a2      	mov	sl, r4
 8006d6a:	eb19 0905 	adds.w	r9, r9, r5
 8006d6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d72:	f04f 0100 	mov.w	r1, #0
 8006d76:	f04f 0200 	mov.w	r2, #0
 8006d7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d86:	4689      	mov	r9, r1
 8006d88:	4692      	mov	sl, r2
 8006d8a:	eb19 0005 	adds.w	r0, r9, r5
 8006d8e:	eb4a 0106 	adc.w	r1, sl, r6
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	461d      	mov	r5, r3
 8006d98:	f04f 0600 	mov.w	r6, #0
 8006d9c:	196b      	adds	r3, r5, r5
 8006d9e:	eb46 0406 	adc.w	r4, r6, r6
 8006da2:	461a      	mov	r2, r3
 8006da4:	4623      	mov	r3, r4
 8006da6:	f7f9 ff53 	bl	8000c50 <__aeabi_uldivmod>
 8006daa:	4603      	mov	r3, r0
 8006dac:	460c      	mov	r4, r1
 8006dae:	461a      	mov	r2, r3
 8006db0:	4b2c      	ldr	r3, [pc, #176]	; (8006e64 <UART_SetConfig+0x384>)
 8006db2:	fba3 1302 	umull	r1, r3, r3, r2
 8006db6:	095b      	lsrs	r3, r3, #5
 8006db8:	2164      	movs	r1, #100	; 0x64
 8006dba:	fb01 f303 	mul.w	r3, r1, r3
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	00db      	lsls	r3, r3, #3
 8006dc2:	3332      	adds	r3, #50	; 0x32
 8006dc4:	4a27      	ldr	r2, [pc, #156]	; (8006e64 <UART_SetConfig+0x384>)
 8006dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dca:	095b      	lsrs	r3, r3, #5
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006dd2:	4498      	add	r8, r3
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	461d      	mov	r5, r3
 8006dd8:	f04f 0600 	mov.w	r6, #0
 8006ddc:	46a9      	mov	r9, r5
 8006dde:	46b2      	mov	sl, r6
 8006de0:	eb19 0309 	adds.w	r3, r9, r9
 8006de4:	eb4a 040a 	adc.w	r4, sl, sl
 8006de8:	4699      	mov	r9, r3
 8006dea:	46a2      	mov	sl, r4
 8006dec:	eb19 0905 	adds.w	r9, r9, r5
 8006df0:	eb4a 0a06 	adc.w	sl, sl, r6
 8006df4:	f04f 0100 	mov.w	r1, #0
 8006df8:	f04f 0200 	mov.w	r2, #0
 8006dfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e08:	4689      	mov	r9, r1
 8006e0a:	4692      	mov	sl, r2
 8006e0c:	eb19 0005 	adds.w	r0, r9, r5
 8006e10:	eb4a 0106 	adc.w	r1, sl, r6
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	461d      	mov	r5, r3
 8006e1a:	f04f 0600 	mov.w	r6, #0
 8006e1e:	196b      	adds	r3, r5, r5
 8006e20:	eb46 0406 	adc.w	r4, r6, r6
 8006e24:	461a      	mov	r2, r3
 8006e26:	4623      	mov	r3, r4
 8006e28:	f7f9 ff12 	bl	8000c50 <__aeabi_uldivmod>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	460c      	mov	r4, r1
 8006e30:	461a      	mov	r2, r3
 8006e32:	4b0c      	ldr	r3, [pc, #48]	; (8006e64 <UART_SetConfig+0x384>)
 8006e34:	fba3 1302 	umull	r1, r3, r3, r2
 8006e38:	095b      	lsrs	r3, r3, #5
 8006e3a:	2164      	movs	r1, #100	; 0x64
 8006e3c:	fb01 f303 	mul.w	r3, r1, r3
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	3332      	adds	r3, #50	; 0x32
 8006e46:	4a07      	ldr	r2, [pc, #28]	; (8006e64 <UART_SetConfig+0x384>)
 8006e48:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4c:	095b      	lsrs	r3, r3, #5
 8006e4e:	f003 0207 	and.w	r2, r3, #7
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4442      	add	r2, r8
 8006e58:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006e5a:	e1b2      	b.n	80071c2 <UART_SetConfig+0x6e2>
 8006e5c:	40011000 	.word	0x40011000
 8006e60:	40011400 	.word	0x40011400
 8006e64:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4ad7      	ldr	r2, [pc, #860]	; (80071cc <UART_SetConfig+0x6ec>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d005      	beq.n	8006e7e <UART_SetConfig+0x39e>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4ad6      	ldr	r2, [pc, #856]	; (80071d0 <UART_SetConfig+0x6f0>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	f040 80d1 	bne.w	8007020 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e7e:	f7fe ff77 	bl	8005d70 <HAL_RCC_GetPCLK2Freq>
 8006e82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	469a      	mov	sl, r3
 8006e88:	f04f 0b00 	mov.w	fp, #0
 8006e8c:	46d0      	mov	r8, sl
 8006e8e:	46d9      	mov	r9, fp
 8006e90:	eb18 0308 	adds.w	r3, r8, r8
 8006e94:	eb49 0409 	adc.w	r4, r9, r9
 8006e98:	4698      	mov	r8, r3
 8006e9a:	46a1      	mov	r9, r4
 8006e9c:	eb18 080a 	adds.w	r8, r8, sl
 8006ea0:	eb49 090b 	adc.w	r9, r9, fp
 8006ea4:	f04f 0100 	mov.w	r1, #0
 8006ea8:	f04f 0200 	mov.w	r2, #0
 8006eac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006eb0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006eb4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006eb8:	4688      	mov	r8, r1
 8006eba:	4691      	mov	r9, r2
 8006ebc:	eb1a 0508 	adds.w	r5, sl, r8
 8006ec0:	eb4b 0609 	adc.w	r6, fp, r9
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	f04f 0200 	mov.w	r2, #0
 8006ece:	f04f 0300 	mov.w	r3, #0
 8006ed2:	f04f 0400 	mov.w	r4, #0
 8006ed6:	0094      	lsls	r4, r2, #2
 8006ed8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006edc:	008b      	lsls	r3, r1, #2
 8006ede:	461a      	mov	r2, r3
 8006ee0:	4623      	mov	r3, r4
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	4631      	mov	r1, r6
 8006ee6:	f7f9 feb3 	bl	8000c50 <__aeabi_uldivmod>
 8006eea:	4603      	mov	r3, r0
 8006eec:	460c      	mov	r4, r1
 8006eee:	461a      	mov	r2, r3
 8006ef0:	4bb8      	ldr	r3, [pc, #736]	; (80071d4 <UART_SetConfig+0x6f4>)
 8006ef2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ef6:	095b      	lsrs	r3, r3, #5
 8006ef8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	469b      	mov	fp, r3
 8006f00:	f04f 0c00 	mov.w	ip, #0
 8006f04:	46d9      	mov	r9, fp
 8006f06:	46e2      	mov	sl, ip
 8006f08:	eb19 0309 	adds.w	r3, r9, r9
 8006f0c:	eb4a 040a 	adc.w	r4, sl, sl
 8006f10:	4699      	mov	r9, r3
 8006f12:	46a2      	mov	sl, r4
 8006f14:	eb19 090b 	adds.w	r9, r9, fp
 8006f18:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f1c:	f04f 0100 	mov.w	r1, #0
 8006f20:	f04f 0200 	mov.w	r2, #0
 8006f24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f30:	4689      	mov	r9, r1
 8006f32:	4692      	mov	sl, r2
 8006f34:	eb1b 0509 	adds.w	r5, fp, r9
 8006f38:	eb4c 060a 	adc.w	r6, ip, sl
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	4619      	mov	r1, r3
 8006f42:	f04f 0200 	mov.w	r2, #0
 8006f46:	f04f 0300 	mov.w	r3, #0
 8006f4a:	f04f 0400 	mov.w	r4, #0
 8006f4e:	0094      	lsls	r4, r2, #2
 8006f50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f54:	008b      	lsls	r3, r1, #2
 8006f56:	461a      	mov	r2, r3
 8006f58:	4623      	mov	r3, r4
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	f7f9 fe77 	bl	8000c50 <__aeabi_uldivmod>
 8006f62:	4603      	mov	r3, r0
 8006f64:	460c      	mov	r4, r1
 8006f66:	461a      	mov	r2, r3
 8006f68:	4b9a      	ldr	r3, [pc, #616]	; (80071d4 <UART_SetConfig+0x6f4>)
 8006f6a:	fba3 1302 	umull	r1, r3, r3, r2
 8006f6e:	095b      	lsrs	r3, r3, #5
 8006f70:	2164      	movs	r1, #100	; 0x64
 8006f72:	fb01 f303 	mul.w	r3, r1, r3
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	011b      	lsls	r3, r3, #4
 8006f7a:	3332      	adds	r3, #50	; 0x32
 8006f7c:	4a95      	ldr	r2, [pc, #596]	; (80071d4 <UART_SetConfig+0x6f4>)
 8006f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f82:	095b      	lsrs	r3, r3, #5
 8006f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f88:	4498      	add	r8, r3
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	469b      	mov	fp, r3
 8006f8e:	f04f 0c00 	mov.w	ip, #0
 8006f92:	46d9      	mov	r9, fp
 8006f94:	46e2      	mov	sl, ip
 8006f96:	eb19 0309 	adds.w	r3, r9, r9
 8006f9a:	eb4a 040a 	adc.w	r4, sl, sl
 8006f9e:	4699      	mov	r9, r3
 8006fa0:	46a2      	mov	sl, r4
 8006fa2:	eb19 090b 	adds.w	r9, r9, fp
 8006fa6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006faa:	f04f 0100 	mov.w	r1, #0
 8006fae:	f04f 0200 	mov.w	r2, #0
 8006fb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006fba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006fbe:	4689      	mov	r9, r1
 8006fc0:	4692      	mov	sl, r2
 8006fc2:	eb1b 0509 	adds.w	r5, fp, r9
 8006fc6:	eb4c 060a 	adc.w	r6, ip, sl
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	f04f 0200 	mov.w	r2, #0
 8006fd4:	f04f 0300 	mov.w	r3, #0
 8006fd8:	f04f 0400 	mov.w	r4, #0
 8006fdc:	0094      	lsls	r4, r2, #2
 8006fde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006fe2:	008b      	lsls	r3, r1, #2
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	4623      	mov	r3, r4
 8006fe8:	4628      	mov	r0, r5
 8006fea:	4631      	mov	r1, r6
 8006fec:	f7f9 fe30 	bl	8000c50 <__aeabi_uldivmod>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	4b77      	ldr	r3, [pc, #476]	; (80071d4 <UART_SetConfig+0x6f4>)
 8006ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	2164      	movs	r1, #100	; 0x64
 8007000:	fb01 f303 	mul.w	r3, r1, r3
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	011b      	lsls	r3, r3, #4
 8007008:	3332      	adds	r3, #50	; 0x32
 800700a:	4a72      	ldr	r2, [pc, #456]	; (80071d4 <UART_SetConfig+0x6f4>)
 800700c:	fba2 2303 	umull	r2, r3, r2, r3
 8007010:	095b      	lsrs	r3, r3, #5
 8007012:	f003 020f 	and.w	r2, r3, #15
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4442      	add	r2, r8
 800701c:	609a      	str	r2, [r3, #8]
 800701e:	e0d0      	b.n	80071c2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007020:	f7fe fe92 	bl	8005d48 <HAL_RCC_GetPCLK1Freq>
 8007024:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	469a      	mov	sl, r3
 800702a:	f04f 0b00 	mov.w	fp, #0
 800702e:	46d0      	mov	r8, sl
 8007030:	46d9      	mov	r9, fp
 8007032:	eb18 0308 	adds.w	r3, r8, r8
 8007036:	eb49 0409 	adc.w	r4, r9, r9
 800703a:	4698      	mov	r8, r3
 800703c:	46a1      	mov	r9, r4
 800703e:	eb18 080a 	adds.w	r8, r8, sl
 8007042:	eb49 090b 	adc.w	r9, r9, fp
 8007046:	f04f 0100 	mov.w	r1, #0
 800704a:	f04f 0200 	mov.w	r2, #0
 800704e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007052:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007056:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800705a:	4688      	mov	r8, r1
 800705c:	4691      	mov	r9, r2
 800705e:	eb1a 0508 	adds.w	r5, sl, r8
 8007062:	eb4b 0609 	adc.w	r6, fp, r9
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	4619      	mov	r1, r3
 800706c:	f04f 0200 	mov.w	r2, #0
 8007070:	f04f 0300 	mov.w	r3, #0
 8007074:	f04f 0400 	mov.w	r4, #0
 8007078:	0094      	lsls	r4, r2, #2
 800707a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800707e:	008b      	lsls	r3, r1, #2
 8007080:	461a      	mov	r2, r3
 8007082:	4623      	mov	r3, r4
 8007084:	4628      	mov	r0, r5
 8007086:	4631      	mov	r1, r6
 8007088:	f7f9 fde2 	bl	8000c50 <__aeabi_uldivmod>
 800708c:	4603      	mov	r3, r0
 800708e:	460c      	mov	r4, r1
 8007090:	461a      	mov	r2, r3
 8007092:	4b50      	ldr	r3, [pc, #320]	; (80071d4 <UART_SetConfig+0x6f4>)
 8007094:	fba3 2302 	umull	r2, r3, r3, r2
 8007098:	095b      	lsrs	r3, r3, #5
 800709a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	469b      	mov	fp, r3
 80070a2:	f04f 0c00 	mov.w	ip, #0
 80070a6:	46d9      	mov	r9, fp
 80070a8:	46e2      	mov	sl, ip
 80070aa:	eb19 0309 	adds.w	r3, r9, r9
 80070ae:	eb4a 040a 	adc.w	r4, sl, sl
 80070b2:	4699      	mov	r9, r3
 80070b4:	46a2      	mov	sl, r4
 80070b6:	eb19 090b 	adds.w	r9, r9, fp
 80070ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80070be:	f04f 0100 	mov.w	r1, #0
 80070c2:	f04f 0200 	mov.w	r2, #0
 80070c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80070ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070d2:	4689      	mov	r9, r1
 80070d4:	4692      	mov	sl, r2
 80070d6:	eb1b 0509 	adds.w	r5, fp, r9
 80070da:	eb4c 060a 	adc.w	r6, ip, sl
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	4619      	mov	r1, r3
 80070e4:	f04f 0200 	mov.w	r2, #0
 80070e8:	f04f 0300 	mov.w	r3, #0
 80070ec:	f04f 0400 	mov.w	r4, #0
 80070f0:	0094      	lsls	r4, r2, #2
 80070f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80070f6:	008b      	lsls	r3, r1, #2
 80070f8:	461a      	mov	r2, r3
 80070fa:	4623      	mov	r3, r4
 80070fc:	4628      	mov	r0, r5
 80070fe:	4631      	mov	r1, r6
 8007100:	f7f9 fda6 	bl	8000c50 <__aeabi_uldivmod>
 8007104:	4603      	mov	r3, r0
 8007106:	460c      	mov	r4, r1
 8007108:	461a      	mov	r2, r3
 800710a:	4b32      	ldr	r3, [pc, #200]	; (80071d4 <UART_SetConfig+0x6f4>)
 800710c:	fba3 1302 	umull	r1, r3, r3, r2
 8007110:	095b      	lsrs	r3, r3, #5
 8007112:	2164      	movs	r1, #100	; 0x64
 8007114:	fb01 f303 	mul.w	r3, r1, r3
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	011b      	lsls	r3, r3, #4
 800711c:	3332      	adds	r3, #50	; 0x32
 800711e:	4a2d      	ldr	r2, [pc, #180]	; (80071d4 <UART_SetConfig+0x6f4>)
 8007120:	fba2 2303 	umull	r2, r3, r2, r3
 8007124:	095b      	lsrs	r3, r3, #5
 8007126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800712a:	4498      	add	r8, r3
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	469b      	mov	fp, r3
 8007130:	f04f 0c00 	mov.w	ip, #0
 8007134:	46d9      	mov	r9, fp
 8007136:	46e2      	mov	sl, ip
 8007138:	eb19 0309 	adds.w	r3, r9, r9
 800713c:	eb4a 040a 	adc.w	r4, sl, sl
 8007140:	4699      	mov	r9, r3
 8007142:	46a2      	mov	sl, r4
 8007144:	eb19 090b 	adds.w	r9, r9, fp
 8007148:	eb4a 0a0c 	adc.w	sl, sl, ip
 800714c:	f04f 0100 	mov.w	r1, #0
 8007150:	f04f 0200 	mov.w	r2, #0
 8007154:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007158:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800715c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007160:	4689      	mov	r9, r1
 8007162:	4692      	mov	sl, r2
 8007164:	eb1b 0509 	adds.w	r5, fp, r9
 8007168:	eb4c 060a 	adc.w	r6, ip, sl
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	4619      	mov	r1, r3
 8007172:	f04f 0200 	mov.w	r2, #0
 8007176:	f04f 0300 	mov.w	r3, #0
 800717a:	f04f 0400 	mov.w	r4, #0
 800717e:	0094      	lsls	r4, r2, #2
 8007180:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007184:	008b      	lsls	r3, r1, #2
 8007186:	461a      	mov	r2, r3
 8007188:	4623      	mov	r3, r4
 800718a:	4628      	mov	r0, r5
 800718c:	4631      	mov	r1, r6
 800718e:	f7f9 fd5f 	bl	8000c50 <__aeabi_uldivmod>
 8007192:	4603      	mov	r3, r0
 8007194:	460c      	mov	r4, r1
 8007196:	461a      	mov	r2, r3
 8007198:	4b0e      	ldr	r3, [pc, #56]	; (80071d4 <UART_SetConfig+0x6f4>)
 800719a:	fba3 1302 	umull	r1, r3, r3, r2
 800719e:	095b      	lsrs	r3, r3, #5
 80071a0:	2164      	movs	r1, #100	; 0x64
 80071a2:	fb01 f303 	mul.w	r3, r1, r3
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	011b      	lsls	r3, r3, #4
 80071aa:	3332      	adds	r3, #50	; 0x32
 80071ac:	4a09      	ldr	r2, [pc, #36]	; (80071d4 <UART_SetConfig+0x6f4>)
 80071ae:	fba2 2303 	umull	r2, r3, r2, r3
 80071b2:	095b      	lsrs	r3, r3, #5
 80071b4:	f003 020f 	and.w	r2, r3, #15
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4442      	add	r2, r8
 80071be:	609a      	str	r2, [r3, #8]
}
 80071c0:	e7ff      	b.n	80071c2 <UART_SetConfig+0x6e2>
 80071c2:	bf00      	nop
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071cc:	40011000 	.word	0x40011000
 80071d0:	40011400 	.word	0x40011400
 80071d4:	51eb851f 	.word	0x51eb851f

080071d8 <gcvt>:
 80071d8:	b530      	push	{r4, r5, lr}
 80071da:	ed2d 8b02 	vpush	{d8}
 80071de:	eeb0 8a40 	vmov.f32	s16, s0
 80071e2:	eef0 8a60 	vmov.f32	s17, s1
 80071e6:	460c      	mov	r4, r1
 80071e8:	2200      	movs	r2, #0
 80071ea:	b083      	sub	sp, #12
 80071ec:	4605      	mov	r5, r0
 80071ee:	2300      	movs	r3, #0
 80071f0:	ec51 0b10 	vmov	r0, r1, d0
 80071f4:	f7f9 fc26 	bl	8000a44 <__aeabi_dcmplt>
 80071f8:	4622      	mov	r2, r4
 80071fa:	b118      	cbz	r0, 8007204 <gcvt+0x2c>
 80071fc:	232d      	movs	r3, #45	; 0x2d
 80071fe:	f802 3b01 	strb.w	r3, [r2], #1
 8007202:	3d01      	subs	r5, #1
 8007204:	2300      	movs	r3, #0
 8007206:	4809      	ldr	r0, [pc, #36]	; (800722c <gcvt+0x54>)
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	4629      	mov	r1, r5
 800720c:	2367      	movs	r3, #103	; 0x67
 800720e:	eeb0 0a48 	vmov.f32	s0, s16
 8007212:	eef0 0a68 	vmov.f32	s1, s17
 8007216:	6800      	ldr	r0, [r0, #0]
 8007218:	f000 f8c2 	bl	80073a0 <_gcvt>
 800721c:	2800      	cmp	r0, #0
 800721e:	bf14      	ite	ne
 8007220:	4620      	movne	r0, r4
 8007222:	2000      	moveq	r0, #0
 8007224:	b003      	add	sp, #12
 8007226:	ecbd 8b02 	vpop	{d8}
 800722a:	bd30      	pop	{r4, r5, pc}
 800722c:	2000000c 	.word	0x2000000c

08007230 <__errno>:
 8007230:	4b01      	ldr	r3, [pc, #4]	; (8007238 <__errno+0x8>)
 8007232:	6818      	ldr	r0, [r3, #0]
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	2000000c 	.word	0x2000000c

0800723c <__libc_init_array>:
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	4e0d      	ldr	r6, [pc, #52]	; (8007274 <__libc_init_array+0x38>)
 8007240:	4c0d      	ldr	r4, [pc, #52]	; (8007278 <__libc_init_array+0x3c>)
 8007242:	1ba4      	subs	r4, r4, r6
 8007244:	10a4      	asrs	r4, r4, #2
 8007246:	2500      	movs	r5, #0
 8007248:	42a5      	cmp	r5, r4
 800724a:	d109      	bne.n	8007260 <__libc_init_array+0x24>
 800724c:	4e0b      	ldr	r6, [pc, #44]	; (800727c <__libc_init_array+0x40>)
 800724e:	4c0c      	ldr	r4, [pc, #48]	; (8007280 <__libc_init_array+0x44>)
 8007250:	f002 fb9c 	bl	800998c <_init>
 8007254:	1ba4      	subs	r4, r4, r6
 8007256:	10a4      	asrs	r4, r4, #2
 8007258:	2500      	movs	r5, #0
 800725a:	42a5      	cmp	r5, r4
 800725c:	d105      	bne.n	800726a <__libc_init_array+0x2e>
 800725e:	bd70      	pop	{r4, r5, r6, pc}
 8007260:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007264:	4798      	blx	r3
 8007266:	3501      	adds	r5, #1
 8007268:	e7ee      	b.n	8007248 <__libc_init_array+0xc>
 800726a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800726e:	4798      	blx	r3
 8007270:	3501      	adds	r5, #1
 8007272:	e7f2      	b.n	800725a <__libc_init_array+0x1e>
 8007274:	08009b38 	.word	0x08009b38
 8007278:	08009b38 	.word	0x08009b38
 800727c:	08009b38 	.word	0x08009b38
 8007280:	08009b3c 	.word	0x08009b3c

08007284 <memset>:
 8007284:	4402      	add	r2, r0
 8007286:	4603      	mov	r3, r0
 8007288:	4293      	cmp	r3, r2
 800728a:	d100      	bne.n	800728e <memset+0xa>
 800728c:	4770      	bx	lr
 800728e:	f803 1b01 	strb.w	r1, [r3], #1
 8007292:	e7f9      	b.n	8007288 <memset+0x4>

08007294 <strcat>:
 8007294:	b510      	push	{r4, lr}
 8007296:	4603      	mov	r3, r0
 8007298:	781a      	ldrb	r2, [r3, #0]
 800729a:	1c5c      	adds	r4, r3, #1
 800729c:	b93a      	cbnz	r2, 80072ae <strcat+0x1a>
 800729e:	3b01      	subs	r3, #1
 80072a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072a8:	2a00      	cmp	r2, #0
 80072aa:	d1f9      	bne.n	80072a0 <strcat+0xc>
 80072ac:	bd10      	pop	{r4, pc}
 80072ae:	4623      	mov	r3, r4
 80072b0:	e7f2      	b.n	8007298 <strcat+0x4>

080072b2 <print_e>:
 80072b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072b4:	b087      	sub	sp, #28
 80072b6:	ec43 2b10 	vmov	d0, r2, r3
 80072ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80072bc:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80072c0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80072c2:	ab04      	add	r3, sp, #16
 80072c4:	9301      	str	r3, [sp, #4]
 80072c6:	ab03      	add	r3, sp, #12
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	460f      	mov	r7, r1
 80072cc:	ab05      	add	r3, sp, #20
 80072ce:	2102      	movs	r1, #2
 80072d0:	1c62      	adds	r2, r4, #1
 80072d2:	f000 fd35 	bl	8007d40 <_dtoa_r>
 80072d6:	4601      	mov	r1, r0
 80072d8:	9805      	ldr	r0, [sp, #20]
 80072da:	f242 730f 	movw	r3, #9999	; 0x270f
 80072de:	4298      	cmp	r0, r3
 80072e0:	d104      	bne.n	80072ec <print_e+0x3a>
 80072e2:	4638      	mov	r0, r7
 80072e4:	f000 fc98 	bl	8007c18 <strcpy>
 80072e8:	b007      	add	sp, #28
 80072ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072ec:	780b      	ldrb	r3, [r1, #0]
 80072ee:	703b      	strb	r3, [r7, #0]
 80072f0:	2d00      	cmp	r5, #0
 80072f2:	d143      	bne.n	800737c <print_e+0xca>
 80072f4:	2c00      	cmp	r4, #0
 80072f6:	d141      	bne.n	800737c <print_e+0xca>
 80072f8:	1c7b      	adds	r3, r7, #1
 80072fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80072fe:	b10a      	cbz	r2, 8007304 <print_e+0x52>
 8007300:	2c00      	cmp	r4, #0
 8007302:	dc3f      	bgt.n	8007384 <print_e+0xd2>
 8007304:	2e67      	cmp	r6, #103	; 0x67
 8007306:	d044      	beq.n	8007392 <print_e+0xe0>
 8007308:	2e47      	cmp	r6, #71	; 0x47
 800730a:	d044      	beq.n	8007396 <print_e+0xe4>
 800730c:	461a      	mov	r2, r3
 800730e:	191d      	adds	r5, r3, r4
 8007310:	2730      	movs	r7, #48	; 0x30
 8007312:	1aa9      	subs	r1, r5, r2
 8007314:	2900      	cmp	r1, #0
 8007316:	dc39      	bgt.n	800738c <print_e+0xda>
 8007318:	2c00      	cmp	r4, #0
 800731a:	bfa8      	it	ge
 800731c:	191b      	addge	r3, r3, r4
 800731e:	1e41      	subs	r1, r0, #1
 8007320:	2900      	cmp	r1, #0
 8007322:	bfb8      	it	lt
 8007324:	f1c0 0001 	rsblt	r0, r0, #1
 8007328:	9105      	str	r1, [sp, #20]
 800732a:	bfb8      	it	lt
 800732c:	9005      	strlt	r0, [sp, #20]
 800732e:	461a      	mov	r2, r3
 8007330:	9805      	ldr	r0, [sp, #20]
 8007332:	f802 6b02 	strb.w	r6, [r2], #2
 8007336:	bfb5      	itete	lt
 8007338:	212d      	movlt	r1, #45	; 0x2d
 800733a:	212b      	movge	r1, #43	; 0x2b
 800733c:	7059      	strblt	r1, [r3, #1]
 800733e:	7059      	strbge	r1, [r3, #1]
 8007340:	2863      	cmp	r0, #99	; 0x63
 8007342:	dd0b      	ble.n	800735c <print_e+0xaa>
 8007344:	2164      	movs	r1, #100	; 0x64
 8007346:	fb90 f1f1 	sdiv	r1, r0, r1
 800734a:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800734e:	1cda      	adds	r2, r3, #3
 8007350:	709c      	strb	r4, [r3, #2]
 8007352:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8007356:	fb03 0101 	mla	r1, r3, r1, r0
 800735a:	9105      	str	r1, [sp, #20]
 800735c:	9905      	ldr	r1, [sp, #20]
 800735e:	230a      	movs	r3, #10
 8007360:	fb91 f3f3 	sdiv	r3, r1, r3
 8007364:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007368:	7010      	strb	r0, [r2, #0]
 800736a:	f06f 0009 	mvn.w	r0, #9
 800736e:	fb00 1303 	mla	r3, r0, r3, r1
 8007372:	3330      	adds	r3, #48	; 0x30
 8007374:	7053      	strb	r3, [r2, #1]
 8007376:	2300      	movs	r3, #0
 8007378:	7093      	strb	r3, [r2, #2]
 800737a:	e7b5      	b.n	80072e8 <print_e+0x36>
 800737c:	222e      	movs	r2, #46	; 0x2e
 800737e:	1cbb      	adds	r3, r7, #2
 8007380:	707a      	strb	r2, [r7, #1]
 8007382:	e7ba      	b.n	80072fa <print_e+0x48>
 8007384:	f803 2b01 	strb.w	r2, [r3], #1
 8007388:	3c01      	subs	r4, #1
 800738a:	e7b6      	b.n	80072fa <print_e+0x48>
 800738c:	f802 7b01 	strb.w	r7, [r2], #1
 8007390:	e7bf      	b.n	8007312 <print_e+0x60>
 8007392:	2665      	movs	r6, #101	; 0x65
 8007394:	e7c3      	b.n	800731e <print_e+0x6c>
 8007396:	2645      	movs	r6, #69	; 0x45
 8007398:	e7c1      	b.n	800731e <print_e+0x6c>
 800739a:	0000      	movs	r0, r0
 800739c:	0000      	movs	r0, r0
	...

080073a0 <_gcvt>:
 80073a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a4:	ec55 4b10 	vmov	r4, r5, d0
 80073a8:	b088      	sub	sp, #32
 80073aa:	4681      	mov	r9, r0
 80073ac:	460f      	mov	r7, r1
 80073ae:	4616      	mov	r6, r2
 80073b0:	469a      	mov	sl, r3
 80073b2:	2200      	movs	r2, #0
 80073b4:	2300      	movs	r3, #0
 80073b6:	ee10 0a10 	vmov	r0, s0
 80073ba:	4629      	mov	r1, r5
 80073bc:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80073c0:	f7f9 fb40 	bl	8000a44 <__aeabi_dcmplt>
 80073c4:	b110      	cbz	r0, 80073cc <_gcvt+0x2c>
 80073c6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80073ca:	461d      	mov	r5, r3
 80073cc:	2200      	movs	r2, #0
 80073ce:	2300      	movs	r3, #0
 80073d0:	4620      	mov	r0, r4
 80073d2:	4629      	mov	r1, r5
 80073d4:	f7f9 fb2c 	bl	8000a30 <__aeabi_dcmpeq>
 80073d8:	b138      	cbz	r0, 80073ea <_gcvt+0x4a>
 80073da:	2330      	movs	r3, #48	; 0x30
 80073dc:	7033      	strb	r3, [r6, #0]
 80073de:	2300      	movs	r3, #0
 80073e0:	7073      	strb	r3, [r6, #1]
 80073e2:	4630      	mov	r0, r6
 80073e4:	b008      	add	sp, #32
 80073e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ea:	a350      	add	r3, pc, #320	; (adr r3, 800752c <_gcvt+0x18c>)
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	4620      	mov	r0, r4
 80073f2:	4629      	mov	r1, r5
 80073f4:	f7f9 fb30 	bl	8000a58 <__aeabi_dcmple>
 80073f8:	b150      	cbz	r0, 8007410 <_gcvt+0x70>
 80073fa:	3f01      	subs	r7, #1
 80073fc:	e9cd a801 	strd	sl, r8, [sp, #4]
 8007400:	9700      	str	r7, [sp, #0]
 8007402:	4622      	mov	r2, r4
 8007404:	462b      	mov	r3, r5
 8007406:	4631      	mov	r1, r6
 8007408:	4648      	mov	r0, r9
 800740a:	f7ff ff52 	bl	80072b2 <print_e>
 800740e:	e7e8      	b.n	80073e2 <_gcvt+0x42>
 8007410:	4638      	mov	r0, r7
 8007412:	f000 fb6b 	bl	8007aec <_mprec_log10>
 8007416:	4622      	mov	r2, r4
 8007418:	462b      	mov	r3, r5
 800741a:	ec51 0b10 	vmov	r0, r1, d0
 800741e:	f7f9 fb1b 	bl	8000a58 <__aeabi_dcmple>
 8007422:	2800      	cmp	r0, #0
 8007424:	d1e9      	bne.n	80073fa <_gcvt+0x5a>
 8007426:	2200      	movs	r2, #0
 8007428:	4b3f      	ldr	r3, [pc, #252]	; (8007528 <_gcvt+0x188>)
 800742a:	4620      	mov	r0, r4
 800742c:	4629      	mov	r1, r5
 800742e:	f7f9 fb09 	bl	8000a44 <__aeabi_dcmplt>
 8007432:	aa07      	add	r2, sp, #28
 8007434:	ab06      	add	r3, sp, #24
 8007436:	e9cd 3200 	strd	r3, r2, [sp]
 800743a:	ab05      	add	r3, sp, #20
 800743c:	463a      	mov	r2, r7
 800743e:	b360      	cbz	r0, 800749a <_gcvt+0xfa>
 8007440:	2103      	movs	r1, #3
 8007442:	ec45 4b10 	vmov	d0, r4, r5
 8007446:	4648      	mov	r0, r9
 8007448:	f000 fc7a 	bl	8007d40 <_dtoa_r>
 800744c:	9a05      	ldr	r2, [sp, #20]
 800744e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007452:	429a      	cmp	r2, r3
 8007454:	d023      	beq.n	800749e <_gcvt+0xfe>
 8007456:	4633      	mov	r3, r6
 8007458:	4437      	add	r7, r6
 800745a:	4601      	mov	r1, r0
 800745c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007460:	9d05      	ldr	r5, [sp, #20]
 8007462:	1afc      	subs	r4, r7, r3
 8007464:	b32a      	cbz	r2, 80074b2 <_gcvt+0x112>
 8007466:	2d00      	cmp	r5, #0
 8007468:	dc1e      	bgt.n	80074a8 <_gcvt+0x108>
 800746a:	f1b8 0f00 	cmp.w	r8, #0
 800746e:	d102      	bne.n	8007476 <_gcvt+0xd6>
 8007470:	780a      	ldrb	r2, [r1, #0]
 8007472:	2a00      	cmp	r2, #0
 8007474:	d045      	beq.n	8007502 <_gcvt+0x162>
 8007476:	429e      	cmp	r6, r3
 8007478:	bf02      	ittt	eq
 800747a:	1c73      	addeq	r3, r6, #1
 800747c:	2230      	moveq	r2, #48	; 0x30
 800747e:	7032      	strbeq	r2, [r6, #0]
 8007480:	222e      	movs	r2, #46	; 0x2e
 8007482:	701a      	strb	r2, [r3, #0]
 8007484:	9a05      	ldr	r2, [sp, #20]
 8007486:	3301      	adds	r3, #1
 8007488:	2000      	movs	r0, #0
 800748a:	2730      	movs	r7, #48	; 0x30
 800748c:	2a00      	cmp	r2, #0
 800748e:	4615      	mov	r5, r2
 8007490:	db24      	blt.n	80074dc <_gcvt+0x13c>
 8007492:	b100      	cbz	r0, 8007496 <_gcvt+0xf6>
 8007494:	9205      	str	r2, [sp, #20]
 8007496:	1e4a      	subs	r2, r1, #1
 8007498:	e02b      	b.n	80074f2 <_gcvt+0x152>
 800749a:	2102      	movs	r1, #2
 800749c:	e7d1      	b.n	8007442 <_gcvt+0xa2>
 800749e:	4601      	mov	r1, r0
 80074a0:	4630      	mov	r0, r6
 80074a2:	f000 fbb9 	bl	8007c18 <strcpy>
 80074a6:	e79c      	b.n	80073e2 <_gcvt+0x42>
 80074a8:	3d01      	subs	r5, #1
 80074aa:	f803 2b01 	strb.w	r2, [r3], #1
 80074ae:	9505      	str	r5, [sp, #20]
 80074b0:	e7d3      	b.n	800745a <_gcvt+0xba>
 80074b2:	1b2d      	subs	r5, r5, r4
 80074b4:	2730      	movs	r7, #48	; 0x30
 80074b6:	e005      	b.n	80074c4 <_gcvt+0x124>
 80074b8:	2c00      	cmp	r4, #0
 80074ba:	dd06      	ble.n	80074ca <_gcvt+0x12a>
 80074bc:	f803 7b01 	strb.w	r7, [r3], #1
 80074c0:	3c01      	subs	r4, #1
 80074c2:	2201      	movs	r2, #1
 80074c4:	1928      	adds	r0, r5, r4
 80074c6:	2800      	cmp	r0, #0
 80074c8:	dcf6      	bgt.n	80074b8 <_gcvt+0x118>
 80074ca:	2a00      	cmp	r2, #0
 80074cc:	d0cd      	beq.n	800746a <_gcvt+0xca>
 80074ce:	9005      	str	r0, [sp, #20]
 80074d0:	e7cb      	b.n	800746a <_gcvt+0xca>
 80074d2:	f803 7b01 	strb.w	r7, [r3], #1
 80074d6:	3c01      	subs	r4, #1
 80074d8:	2001      	movs	r0, #1
 80074da:	e7d7      	b.n	800748c <_gcvt+0xec>
 80074dc:	2c00      	cmp	r4, #0
 80074de:	f102 0201 	add.w	r2, r2, #1
 80074e2:	dcf6      	bgt.n	80074d2 <_gcvt+0x132>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	d0d6      	beq.n	8007496 <_gcvt+0xf6>
 80074e8:	9505      	str	r5, [sp, #20]
 80074ea:	e7d4      	b.n	8007496 <_gcvt+0xf6>
 80074ec:	f803 1b01 	strb.w	r1, [r3], #1
 80074f0:	3c01      	subs	r4, #1
 80074f2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80074f6:	b109      	cbz	r1, 80074fc <_gcvt+0x15c>
 80074f8:	2c00      	cmp	r4, #0
 80074fa:	dcf7      	bgt.n	80074ec <_gcvt+0x14c>
 80074fc:	f1b8 0f00 	cmp.w	r8, #0
 8007500:	d10b      	bne.n	800751a <_gcvt+0x17a>
 8007502:	2200      	movs	r2, #0
 8007504:	701a      	strb	r2, [r3, #0]
 8007506:	e76c      	b.n	80073e2 <_gcvt+0x42>
 8007508:	f802 5b01 	strb.w	r5, [r2], #1
 800750c:	1a81      	subs	r1, r0, r2
 800750e:	2900      	cmp	r1, #0
 8007510:	dcfa      	bgt.n	8007508 <_gcvt+0x168>
 8007512:	2c00      	cmp	r4, #0
 8007514:	bfa8      	it	ge
 8007516:	191b      	addge	r3, r3, r4
 8007518:	e7f3      	b.n	8007502 <_gcvt+0x162>
 800751a:	461a      	mov	r2, r3
 800751c:	1918      	adds	r0, r3, r4
 800751e:	2530      	movs	r5, #48	; 0x30
 8007520:	e7f4      	b.n	800750c <_gcvt+0x16c>
 8007522:	bf00      	nop
 8007524:	f3af 8000 	nop.w
 8007528:	3ff00000 	.word	0x3ff00000
 800752c:	eb1c432d 	.word	0xeb1c432d
 8007530:	3f1a36e2 	.word	0x3f1a36e2

08007534 <_Balloc>:
 8007534:	b570      	push	{r4, r5, r6, lr}
 8007536:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007538:	4604      	mov	r4, r0
 800753a:	460e      	mov	r6, r1
 800753c:	b93d      	cbnz	r5, 800754e <_Balloc+0x1a>
 800753e:	2010      	movs	r0, #16
 8007540:	f001 f9b6 	bl	80088b0 <malloc>
 8007544:	6260      	str	r0, [r4, #36]	; 0x24
 8007546:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800754a:	6005      	str	r5, [r0, #0]
 800754c:	60c5      	str	r5, [r0, #12]
 800754e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007550:	68eb      	ldr	r3, [r5, #12]
 8007552:	b183      	cbz	r3, 8007576 <_Balloc+0x42>
 8007554:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800755c:	b9b8      	cbnz	r0, 800758e <_Balloc+0x5a>
 800755e:	2101      	movs	r1, #1
 8007560:	fa01 f506 	lsl.w	r5, r1, r6
 8007564:	1d6a      	adds	r2, r5, #5
 8007566:	0092      	lsls	r2, r2, #2
 8007568:	4620      	mov	r0, r4
 800756a:	f000 fadd 	bl	8007b28 <_calloc_r>
 800756e:	b160      	cbz	r0, 800758a <_Balloc+0x56>
 8007570:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007574:	e00e      	b.n	8007594 <_Balloc+0x60>
 8007576:	2221      	movs	r2, #33	; 0x21
 8007578:	2104      	movs	r1, #4
 800757a:	4620      	mov	r0, r4
 800757c:	f000 fad4 	bl	8007b28 <_calloc_r>
 8007580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007582:	60e8      	str	r0, [r5, #12]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1e4      	bne.n	8007554 <_Balloc+0x20>
 800758a:	2000      	movs	r0, #0
 800758c:	bd70      	pop	{r4, r5, r6, pc}
 800758e:	6802      	ldr	r2, [r0, #0]
 8007590:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007594:	2300      	movs	r3, #0
 8007596:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800759a:	e7f7      	b.n	800758c <_Balloc+0x58>

0800759c <_Bfree>:
 800759c:	b570      	push	{r4, r5, r6, lr}
 800759e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80075a0:	4606      	mov	r6, r0
 80075a2:	460d      	mov	r5, r1
 80075a4:	b93c      	cbnz	r4, 80075b6 <_Bfree+0x1a>
 80075a6:	2010      	movs	r0, #16
 80075a8:	f001 f982 	bl	80088b0 <malloc>
 80075ac:	6270      	str	r0, [r6, #36]	; 0x24
 80075ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075b2:	6004      	str	r4, [r0, #0]
 80075b4:	60c4      	str	r4, [r0, #12]
 80075b6:	b13d      	cbz	r5, 80075c8 <_Bfree+0x2c>
 80075b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80075ba:	686a      	ldr	r2, [r5, #4]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075c2:	6029      	str	r1, [r5, #0]
 80075c4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80075c8:	bd70      	pop	{r4, r5, r6, pc}

080075ca <__multadd>:
 80075ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ce:	690d      	ldr	r5, [r1, #16]
 80075d0:	461f      	mov	r7, r3
 80075d2:	4606      	mov	r6, r0
 80075d4:	460c      	mov	r4, r1
 80075d6:	f101 0c14 	add.w	ip, r1, #20
 80075da:	2300      	movs	r3, #0
 80075dc:	f8dc 0000 	ldr.w	r0, [ip]
 80075e0:	b281      	uxth	r1, r0
 80075e2:	fb02 7101 	mla	r1, r2, r1, r7
 80075e6:	0c0f      	lsrs	r7, r1, #16
 80075e8:	0c00      	lsrs	r0, r0, #16
 80075ea:	fb02 7000 	mla	r0, r2, r0, r7
 80075ee:	b289      	uxth	r1, r1
 80075f0:	3301      	adds	r3, #1
 80075f2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80075f6:	429d      	cmp	r5, r3
 80075f8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80075fc:	f84c 1b04 	str.w	r1, [ip], #4
 8007600:	dcec      	bgt.n	80075dc <__multadd+0x12>
 8007602:	b1d7      	cbz	r7, 800763a <__multadd+0x70>
 8007604:	68a3      	ldr	r3, [r4, #8]
 8007606:	42ab      	cmp	r3, r5
 8007608:	dc12      	bgt.n	8007630 <__multadd+0x66>
 800760a:	6861      	ldr	r1, [r4, #4]
 800760c:	4630      	mov	r0, r6
 800760e:	3101      	adds	r1, #1
 8007610:	f7ff ff90 	bl	8007534 <_Balloc>
 8007614:	6922      	ldr	r2, [r4, #16]
 8007616:	3202      	adds	r2, #2
 8007618:	f104 010c 	add.w	r1, r4, #12
 800761c:	4680      	mov	r8, r0
 800761e:	0092      	lsls	r2, r2, #2
 8007620:	300c      	adds	r0, #12
 8007622:	f001 f94d 	bl	80088c0 <memcpy>
 8007626:	4621      	mov	r1, r4
 8007628:	4630      	mov	r0, r6
 800762a:	f7ff ffb7 	bl	800759c <_Bfree>
 800762e:	4644      	mov	r4, r8
 8007630:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007634:	3501      	adds	r5, #1
 8007636:	615f      	str	r7, [r3, #20]
 8007638:	6125      	str	r5, [r4, #16]
 800763a:	4620      	mov	r0, r4
 800763c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007640 <__hi0bits>:
 8007640:	0c02      	lsrs	r2, r0, #16
 8007642:	0412      	lsls	r2, r2, #16
 8007644:	4603      	mov	r3, r0
 8007646:	b9b2      	cbnz	r2, 8007676 <__hi0bits+0x36>
 8007648:	0403      	lsls	r3, r0, #16
 800764a:	2010      	movs	r0, #16
 800764c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007650:	bf04      	itt	eq
 8007652:	021b      	lsleq	r3, r3, #8
 8007654:	3008      	addeq	r0, #8
 8007656:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800765a:	bf04      	itt	eq
 800765c:	011b      	lsleq	r3, r3, #4
 800765e:	3004      	addeq	r0, #4
 8007660:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007664:	bf04      	itt	eq
 8007666:	009b      	lsleq	r3, r3, #2
 8007668:	3002      	addeq	r0, #2
 800766a:	2b00      	cmp	r3, #0
 800766c:	db06      	blt.n	800767c <__hi0bits+0x3c>
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	d503      	bpl.n	800767a <__hi0bits+0x3a>
 8007672:	3001      	adds	r0, #1
 8007674:	4770      	bx	lr
 8007676:	2000      	movs	r0, #0
 8007678:	e7e8      	b.n	800764c <__hi0bits+0xc>
 800767a:	2020      	movs	r0, #32
 800767c:	4770      	bx	lr

0800767e <__lo0bits>:
 800767e:	6803      	ldr	r3, [r0, #0]
 8007680:	f013 0207 	ands.w	r2, r3, #7
 8007684:	4601      	mov	r1, r0
 8007686:	d00b      	beq.n	80076a0 <__lo0bits+0x22>
 8007688:	07da      	lsls	r2, r3, #31
 800768a:	d423      	bmi.n	80076d4 <__lo0bits+0x56>
 800768c:	0798      	lsls	r0, r3, #30
 800768e:	bf49      	itett	mi
 8007690:	085b      	lsrmi	r3, r3, #1
 8007692:	089b      	lsrpl	r3, r3, #2
 8007694:	2001      	movmi	r0, #1
 8007696:	600b      	strmi	r3, [r1, #0]
 8007698:	bf5c      	itt	pl
 800769a:	600b      	strpl	r3, [r1, #0]
 800769c:	2002      	movpl	r0, #2
 800769e:	4770      	bx	lr
 80076a0:	b298      	uxth	r0, r3
 80076a2:	b9a8      	cbnz	r0, 80076d0 <__lo0bits+0x52>
 80076a4:	0c1b      	lsrs	r3, r3, #16
 80076a6:	2010      	movs	r0, #16
 80076a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80076ac:	bf04      	itt	eq
 80076ae:	0a1b      	lsreq	r3, r3, #8
 80076b0:	3008      	addeq	r0, #8
 80076b2:	071a      	lsls	r2, r3, #28
 80076b4:	bf04      	itt	eq
 80076b6:	091b      	lsreq	r3, r3, #4
 80076b8:	3004      	addeq	r0, #4
 80076ba:	079a      	lsls	r2, r3, #30
 80076bc:	bf04      	itt	eq
 80076be:	089b      	lsreq	r3, r3, #2
 80076c0:	3002      	addeq	r0, #2
 80076c2:	07da      	lsls	r2, r3, #31
 80076c4:	d402      	bmi.n	80076cc <__lo0bits+0x4e>
 80076c6:	085b      	lsrs	r3, r3, #1
 80076c8:	d006      	beq.n	80076d8 <__lo0bits+0x5a>
 80076ca:	3001      	adds	r0, #1
 80076cc:	600b      	str	r3, [r1, #0]
 80076ce:	4770      	bx	lr
 80076d0:	4610      	mov	r0, r2
 80076d2:	e7e9      	b.n	80076a8 <__lo0bits+0x2a>
 80076d4:	2000      	movs	r0, #0
 80076d6:	4770      	bx	lr
 80076d8:	2020      	movs	r0, #32
 80076da:	4770      	bx	lr

080076dc <__i2b>:
 80076dc:	b510      	push	{r4, lr}
 80076de:	460c      	mov	r4, r1
 80076e0:	2101      	movs	r1, #1
 80076e2:	f7ff ff27 	bl	8007534 <_Balloc>
 80076e6:	2201      	movs	r2, #1
 80076e8:	6144      	str	r4, [r0, #20]
 80076ea:	6102      	str	r2, [r0, #16]
 80076ec:	bd10      	pop	{r4, pc}

080076ee <__multiply>:
 80076ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f2:	4614      	mov	r4, r2
 80076f4:	690a      	ldr	r2, [r1, #16]
 80076f6:	6923      	ldr	r3, [r4, #16]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	bfb8      	it	lt
 80076fc:	460b      	movlt	r3, r1
 80076fe:	4688      	mov	r8, r1
 8007700:	bfbc      	itt	lt
 8007702:	46a0      	movlt	r8, r4
 8007704:	461c      	movlt	r4, r3
 8007706:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800770a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800770e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007712:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007716:	eb07 0609 	add.w	r6, r7, r9
 800771a:	42b3      	cmp	r3, r6
 800771c:	bfb8      	it	lt
 800771e:	3101      	addlt	r1, #1
 8007720:	f7ff ff08 	bl	8007534 <_Balloc>
 8007724:	f100 0514 	add.w	r5, r0, #20
 8007728:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800772c:	462b      	mov	r3, r5
 800772e:	2200      	movs	r2, #0
 8007730:	4573      	cmp	r3, lr
 8007732:	d316      	bcc.n	8007762 <__multiply+0x74>
 8007734:	f104 0214 	add.w	r2, r4, #20
 8007738:	f108 0114 	add.w	r1, r8, #20
 800773c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007740:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	9b00      	ldr	r3, [sp, #0]
 8007748:	9201      	str	r2, [sp, #4]
 800774a:	4293      	cmp	r3, r2
 800774c:	d80c      	bhi.n	8007768 <__multiply+0x7a>
 800774e:	2e00      	cmp	r6, #0
 8007750:	dd03      	ble.n	800775a <__multiply+0x6c>
 8007752:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007756:	2b00      	cmp	r3, #0
 8007758:	d05d      	beq.n	8007816 <__multiply+0x128>
 800775a:	6106      	str	r6, [r0, #16]
 800775c:	b003      	add	sp, #12
 800775e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007762:	f843 2b04 	str.w	r2, [r3], #4
 8007766:	e7e3      	b.n	8007730 <__multiply+0x42>
 8007768:	f8b2 b000 	ldrh.w	fp, [r2]
 800776c:	f1bb 0f00 	cmp.w	fp, #0
 8007770:	d023      	beq.n	80077ba <__multiply+0xcc>
 8007772:	4689      	mov	r9, r1
 8007774:	46ac      	mov	ip, r5
 8007776:	f04f 0800 	mov.w	r8, #0
 800777a:	f859 4b04 	ldr.w	r4, [r9], #4
 800777e:	f8dc a000 	ldr.w	sl, [ip]
 8007782:	b2a3      	uxth	r3, r4
 8007784:	fa1f fa8a 	uxth.w	sl, sl
 8007788:	fb0b a303 	mla	r3, fp, r3, sl
 800778c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007790:	f8dc 4000 	ldr.w	r4, [ip]
 8007794:	4443      	add	r3, r8
 8007796:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800779a:	fb0b 840a 	mla	r4, fp, sl, r8
 800779e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80077a2:	46e2      	mov	sl, ip
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80077aa:	454f      	cmp	r7, r9
 80077ac:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80077b0:	f84a 3b04 	str.w	r3, [sl], #4
 80077b4:	d82b      	bhi.n	800780e <__multiply+0x120>
 80077b6:	f8cc 8004 	str.w	r8, [ip, #4]
 80077ba:	9b01      	ldr	r3, [sp, #4]
 80077bc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80077c0:	3204      	adds	r2, #4
 80077c2:	f1ba 0f00 	cmp.w	sl, #0
 80077c6:	d020      	beq.n	800780a <__multiply+0x11c>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	4689      	mov	r9, r1
 80077cc:	46a8      	mov	r8, r5
 80077ce:	f04f 0b00 	mov.w	fp, #0
 80077d2:	f8b9 c000 	ldrh.w	ip, [r9]
 80077d6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80077da:	fb0a 440c 	mla	r4, sl, ip, r4
 80077de:	445c      	add	r4, fp
 80077e0:	46c4      	mov	ip, r8
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80077e8:	f84c 3b04 	str.w	r3, [ip], #4
 80077ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80077f0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80077f4:	0c1b      	lsrs	r3, r3, #16
 80077f6:	fb0a b303 	mla	r3, sl, r3, fp
 80077fa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80077fe:	454f      	cmp	r7, r9
 8007800:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007804:	d805      	bhi.n	8007812 <__multiply+0x124>
 8007806:	f8c8 3004 	str.w	r3, [r8, #4]
 800780a:	3504      	adds	r5, #4
 800780c:	e79b      	b.n	8007746 <__multiply+0x58>
 800780e:	46d4      	mov	ip, sl
 8007810:	e7b3      	b.n	800777a <__multiply+0x8c>
 8007812:	46e0      	mov	r8, ip
 8007814:	e7dd      	b.n	80077d2 <__multiply+0xe4>
 8007816:	3e01      	subs	r6, #1
 8007818:	e799      	b.n	800774e <__multiply+0x60>
	...

0800781c <__pow5mult>:
 800781c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007820:	4615      	mov	r5, r2
 8007822:	f012 0203 	ands.w	r2, r2, #3
 8007826:	4606      	mov	r6, r0
 8007828:	460f      	mov	r7, r1
 800782a:	d007      	beq.n	800783c <__pow5mult+0x20>
 800782c:	3a01      	subs	r2, #1
 800782e:	4c21      	ldr	r4, [pc, #132]	; (80078b4 <__pow5mult+0x98>)
 8007830:	2300      	movs	r3, #0
 8007832:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007836:	f7ff fec8 	bl	80075ca <__multadd>
 800783a:	4607      	mov	r7, r0
 800783c:	10ad      	asrs	r5, r5, #2
 800783e:	d035      	beq.n	80078ac <__pow5mult+0x90>
 8007840:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007842:	b93c      	cbnz	r4, 8007854 <__pow5mult+0x38>
 8007844:	2010      	movs	r0, #16
 8007846:	f001 f833 	bl	80088b0 <malloc>
 800784a:	6270      	str	r0, [r6, #36]	; 0x24
 800784c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007850:	6004      	str	r4, [r0, #0]
 8007852:	60c4      	str	r4, [r0, #12]
 8007854:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007858:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800785c:	b94c      	cbnz	r4, 8007872 <__pow5mult+0x56>
 800785e:	f240 2171 	movw	r1, #625	; 0x271
 8007862:	4630      	mov	r0, r6
 8007864:	f7ff ff3a 	bl	80076dc <__i2b>
 8007868:	2300      	movs	r3, #0
 800786a:	f8c8 0008 	str.w	r0, [r8, #8]
 800786e:	4604      	mov	r4, r0
 8007870:	6003      	str	r3, [r0, #0]
 8007872:	f04f 0800 	mov.w	r8, #0
 8007876:	07eb      	lsls	r3, r5, #31
 8007878:	d50a      	bpl.n	8007890 <__pow5mult+0x74>
 800787a:	4639      	mov	r1, r7
 800787c:	4622      	mov	r2, r4
 800787e:	4630      	mov	r0, r6
 8007880:	f7ff ff35 	bl	80076ee <__multiply>
 8007884:	4639      	mov	r1, r7
 8007886:	4681      	mov	r9, r0
 8007888:	4630      	mov	r0, r6
 800788a:	f7ff fe87 	bl	800759c <_Bfree>
 800788e:	464f      	mov	r7, r9
 8007890:	106d      	asrs	r5, r5, #1
 8007892:	d00b      	beq.n	80078ac <__pow5mult+0x90>
 8007894:	6820      	ldr	r0, [r4, #0]
 8007896:	b938      	cbnz	r0, 80078a8 <__pow5mult+0x8c>
 8007898:	4622      	mov	r2, r4
 800789a:	4621      	mov	r1, r4
 800789c:	4630      	mov	r0, r6
 800789e:	f7ff ff26 	bl	80076ee <__multiply>
 80078a2:	6020      	str	r0, [r4, #0]
 80078a4:	f8c0 8000 	str.w	r8, [r0]
 80078a8:	4604      	mov	r4, r0
 80078aa:	e7e4      	b.n	8007876 <__pow5mult+0x5a>
 80078ac:	4638      	mov	r0, r7
 80078ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078b2:	bf00      	nop
 80078b4:	08009ad0 	.word	0x08009ad0

080078b8 <__lshift>:
 80078b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078bc:	460c      	mov	r4, r1
 80078be:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078c2:	6923      	ldr	r3, [r4, #16]
 80078c4:	6849      	ldr	r1, [r1, #4]
 80078c6:	eb0a 0903 	add.w	r9, sl, r3
 80078ca:	68a3      	ldr	r3, [r4, #8]
 80078cc:	4607      	mov	r7, r0
 80078ce:	4616      	mov	r6, r2
 80078d0:	f109 0501 	add.w	r5, r9, #1
 80078d4:	42ab      	cmp	r3, r5
 80078d6:	db32      	blt.n	800793e <__lshift+0x86>
 80078d8:	4638      	mov	r0, r7
 80078da:	f7ff fe2b 	bl	8007534 <_Balloc>
 80078de:	2300      	movs	r3, #0
 80078e0:	4680      	mov	r8, r0
 80078e2:	f100 0114 	add.w	r1, r0, #20
 80078e6:	461a      	mov	r2, r3
 80078e8:	4553      	cmp	r3, sl
 80078ea:	db2b      	blt.n	8007944 <__lshift+0x8c>
 80078ec:	6920      	ldr	r0, [r4, #16]
 80078ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078f2:	f104 0314 	add.w	r3, r4, #20
 80078f6:	f016 021f 	ands.w	r2, r6, #31
 80078fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078fe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007902:	d025      	beq.n	8007950 <__lshift+0x98>
 8007904:	f1c2 0e20 	rsb	lr, r2, #32
 8007908:	2000      	movs	r0, #0
 800790a:	681e      	ldr	r6, [r3, #0]
 800790c:	468a      	mov	sl, r1
 800790e:	4096      	lsls	r6, r2
 8007910:	4330      	orrs	r0, r6
 8007912:	f84a 0b04 	str.w	r0, [sl], #4
 8007916:	f853 0b04 	ldr.w	r0, [r3], #4
 800791a:	459c      	cmp	ip, r3
 800791c:	fa20 f00e 	lsr.w	r0, r0, lr
 8007920:	d814      	bhi.n	800794c <__lshift+0x94>
 8007922:	6048      	str	r0, [r1, #4]
 8007924:	b108      	cbz	r0, 800792a <__lshift+0x72>
 8007926:	f109 0502 	add.w	r5, r9, #2
 800792a:	3d01      	subs	r5, #1
 800792c:	4638      	mov	r0, r7
 800792e:	f8c8 5010 	str.w	r5, [r8, #16]
 8007932:	4621      	mov	r1, r4
 8007934:	f7ff fe32 	bl	800759c <_Bfree>
 8007938:	4640      	mov	r0, r8
 800793a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800793e:	3101      	adds	r1, #1
 8007940:	005b      	lsls	r3, r3, #1
 8007942:	e7c7      	b.n	80078d4 <__lshift+0x1c>
 8007944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007948:	3301      	adds	r3, #1
 800794a:	e7cd      	b.n	80078e8 <__lshift+0x30>
 800794c:	4651      	mov	r1, sl
 800794e:	e7dc      	b.n	800790a <__lshift+0x52>
 8007950:	3904      	subs	r1, #4
 8007952:	f853 2b04 	ldr.w	r2, [r3], #4
 8007956:	f841 2f04 	str.w	r2, [r1, #4]!
 800795a:	459c      	cmp	ip, r3
 800795c:	d8f9      	bhi.n	8007952 <__lshift+0x9a>
 800795e:	e7e4      	b.n	800792a <__lshift+0x72>

08007960 <__mcmp>:
 8007960:	6903      	ldr	r3, [r0, #16]
 8007962:	690a      	ldr	r2, [r1, #16]
 8007964:	1a9b      	subs	r3, r3, r2
 8007966:	b530      	push	{r4, r5, lr}
 8007968:	d10c      	bne.n	8007984 <__mcmp+0x24>
 800796a:	0092      	lsls	r2, r2, #2
 800796c:	3014      	adds	r0, #20
 800796e:	3114      	adds	r1, #20
 8007970:	1884      	adds	r4, r0, r2
 8007972:	4411      	add	r1, r2
 8007974:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007978:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800797c:	4295      	cmp	r5, r2
 800797e:	d003      	beq.n	8007988 <__mcmp+0x28>
 8007980:	d305      	bcc.n	800798e <__mcmp+0x2e>
 8007982:	2301      	movs	r3, #1
 8007984:	4618      	mov	r0, r3
 8007986:	bd30      	pop	{r4, r5, pc}
 8007988:	42a0      	cmp	r0, r4
 800798a:	d3f3      	bcc.n	8007974 <__mcmp+0x14>
 800798c:	e7fa      	b.n	8007984 <__mcmp+0x24>
 800798e:	f04f 33ff 	mov.w	r3, #4294967295
 8007992:	e7f7      	b.n	8007984 <__mcmp+0x24>

08007994 <__mdiff>:
 8007994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007998:	460d      	mov	r5, r1
 800799a:	4607      	mov	r7, r0
 800799c:	4611      	mov	r1, r2
 800799e:	4628      	mov	r0, r5
 80079a0:	4614      	mov	r4, r2
 80079a2:	f7ff ffdd 	bl	8007960 <__mcmp>
 80079a6:	1e06      	subs	r6, r0, #0
 80079a8:	d108      	bne.n	80079bc <__mdiff+0x28>
 80079aa:	4631      	mov	r1, r6
 80079ac:	4638      	mov	r0, r7
 80079ae:	f7ff fdc1 	bl	8007534 <_Balloc>
 80079b2:	2301      	movs	r3, #1
 80079b4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80079b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079bc:	bfa4      	itt	ge
 80079be:	4623      	movge	r3, r4
 80079c0:	462c      	movge	r4, r5
 80079c2:	4638      	mov	r0, r7
 80079c4:	6861      	ldr	r1, [r4, #4]
 80079c6:	bfa6      	itte	ge
 80079c8:	461d      	movge	r5, r3
 80079ca:	2600      	movge	r6, #0
 80079cc:	2601      	movlt	r6, #1
 80079ce:	f7ff fdb1 	bl	8007534 <_Balloc>
 80079d2:	692b      	ldr	r3, [r5, #16]
 80079d4:	60c6      	str	r6, [r0, #12]
 80079d6:	6926      	ldr	r6, [r4, #16]
 80079d8:	f105 0914 	add.w	r9, r5, #20
 80079dc:	f104 0214 	add.w	r2, r4, #20
 80079e0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80079e4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80079e8:	f100 0514 	add.w	r5, r0, #20
 80079ec:	f04f 0e00 	mov.w	lr, #0
 80079f0:	f852 ab04 	ldr.w	sl, [r2], #4
 80079f4:	f859 4b04 	ldr.w	r4, [r9], #4
 80079f8:	fa1e f18a 	uxtah	r1, lr, sl
 80079fc:	b2a3      	uxth	r3, r4
 80079fe:	1ac9      	subs	r1, r1, r3
 8007a00:	0c23      	lsrs	r3, r4, #16
 8007a02:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007a06:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007a0a:	b289      	uxth	r1, r1
 8007a0c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007a10:	45c8      	cmp	r8, r9
 8007a12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007a16:	4694      	mov	ip, r2
 8007a18:	f845 3b04 	str.w	r3, [r5], #4
 8007a1c:	d8e8      	bhi.n	80079f0 <__mdiff+0x5c>
 8007a1e:	45bc      	cmp	ip, r7
 8007a20:	d304      	bcc.n	8007a2c <__mdiff+0x98>
 8007a22:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007a26:	b183      	cbz	r3, 8007a4a <__mdiff+0xb6>
 8007a28:	6106      	str	r6, [r0, #16]
 8007a2a:	e7c5      	b.n	80079b8 <__mdiff+0x24>
 8007a2c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007a30:	fa1e f381 	uxtah	r3, lr, r1
 8007a34:	141a      	asrs	r2, r3, #16
 8007a36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a40:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007a44:	f845 3b04 	str.w	r3, [r5], #4
 8007a48:	e7e9      	b.n	8007a1e <__mdiff+0x8a>
 8007a4a:	3e01      	subs	r6, #1
 8007a4c:	e7e9      	b.n	8007a22 <__mdiff+0x8e>

08007a4e <__d2b>:
 8007a4e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a52:	460e      	mov	r6, r1
 8007a54:	2101      	movs	r1, #1
 8007a56:	ec59 8b10 	vmov	r8, r9, d0
 8007a5a:	4615      	mov	r5, r2
 8007a5c:	f7ff fd6a 	bl	8007534 <_Balloc>
 8007a60:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007a64:	4607      	mov	r7, r0
 8007a66:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a6a:	bb34      	cbnz	r4, 8007aba <__d2b+0x6c>
 8007a6c:	9301      	str	r3, [sp, #4]
 8007a6e:	f1b8 0300 	subs.w	r3, r8, #0
 8007a72:	d027      	beq.n	8007ac4 <__d2b+0x76>
 8007a74:	a802      	add	r0, sp, #8
 8007a76:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007a7a:	f7ff fe00 	bl	800767e <__lo0bits>
 8007a7e:	9900      	ldr	r1, [sp, #0]
 8007a80:	b1f0      	cbz	r0, 8007ac0 <__d2b+0x72>
 8007a82:	9a01      	ldr	r2, [sp, #4]
 8007a84:	f1c0 0320 	rsb	r3, r0, #32
 8007a88:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8c:	430b      	orrs	r3, r1
 8007a8e:	40c2      	lsrs	r2, r0
 8007a90:	617b      	str	r3, [r7, #20]
 8007a92:	9201      	str	r2, [sp, #4]
 8007a94:	9b01      	ldr	r3, [sp, #4]
 8007a96:	61bb      	str	r3, [r7, #24]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	bf14      	ite	ne
 8007a9c:	2102      	movne	r1, #2
 8007a9e:	2101      	moveq	r1, #1
 8007aa0:	6139      	str	r1, [r7, #16]
 8007aa2:	b1c4      	cbz	r4, 8007ad6 <__d2b+0x88>
 8007aa4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007aa8:	4404      	add	r4, r0
 8007aaa:	6034      	str	r4, [r6, #0]
 8007aac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ab0:	6028      	str	r0, [r5, #0]
 8007ab2:	4638      	mov	r0, r7
 8007ab4:	b003      	add	sp, #12
 8007ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007abe:	e7d5      	b.n	8007a6c <__d2b+0x1e>
 8007ac0:	6179      	str	r1, [r7, #20]
 8007ac2:	e7e7      	b.n	8007a94 <__d2b+0x46>
 8007ac4:	a801      	add	r0, sp, #4
 8007ac6:	f7ff fdda 	bl	800767e <__lo0bits>
 8007aca:	9b01      	ldr	r3, [sp, #4]
 8007acc:	617b      	str	r3, [r7, #20]
 8007ace:	2101      	movs	r1, #1
 8007ad0:	6139      	str	r1, [r7, #16]
 8007ad2:	3020      	adds	r0, #32
 8007ad4:	e7e5      	b.n	8007aa2 <__d2b+0x54>
 8007ad6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007ada:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ade:	6030      	str	r0, [r6, #0]
 8007ae0:	6918      	ldr	r0, [r3, #16]
 8007ae2:	f7ff fdad 	bl	8007640 <__hi0bits>
 8007ae6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007aea:	e7e1      	b.n	8007ab0 <__d2b+0x62>

08007aec <_mprec_log10>:
 8007aec:	2817      	cmp	r0, #23
 8007aee:	b5d0      	push	{r4, r6, r7, lr}
 8007af0:	4604      	mov	r4, r0
 8007af2:	dc07      	bgt.n	8007b04 <_mprec_log10+0x18>
 8007af4:	4b09      	ldr	r3, [pc, #36]	; (8007b1c <_mprec_log10+0x30>)
 8007af6:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8007afa:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007afe:	ec41 0b10 	vmov	d0, r0, r1
 8007b02:	bdd0      	pop	{r4, r6, r7, pc}
 8007b04:	4906      	ldr	r1, [pc, #24]	; (8007b20 <_mprec_log10+0x34>)
 8007b06:	4f07      	ldr	r7, [pc, #28]	; (8007b24 <_mprec_log10+0x38>)
 8007b08:	2000      	movs	r0, #0
 8007b0a:	2600      	movs	r6, #0
 8007b0c:	4632      	mov	r2, r6
 8007b0e:	463b      	mov	r3, r7
 8007b10:	f7f8 fd26 	bl	8000560 <__aeabi_dmul>
 8007b14:	3c01      	subs	r4, #1
 8007b16:	d1f9      	bne.n	8007b0c <_mprec_log10+0x20>
 8007b18:	e7f1      	b.n	8007afe <_mprec_log10+0x12>
 8007b1a:	bf00      	nop
 8007b1c:	08009a08 	.word	0x08009a08
 8007b20:	3ff00000 	.word	0x3ff00000
 8007b24:	40240000 	.word	0x40240000

08007b28 <_calloc_r>:
 8007b28:	b538      	push	{r3, r4, r5, lr}
 8007b2a:	fb02 f401 	mul.w	r4, r2, r1
 8007b2e:	4621      	mov	r1, r4
 8007b30:	f000 f808 	bl	8007b44 <_malloc_r>
 8007b34:	4605      	mov	r5, r0
 8007b36:	b118      	cbz	r0, 8007b40 <_calloc_r+0x18>
 8007b38:	4622      	mov	r2, r4
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	f7ff fba2 	bl	8007284 <memset>
 8007b40:	4628      	mov	r0, r5
 8007b42:	bd38      	pop	{r3, r4, r5, pc}

08007b44 <_malloc_r>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	1ccd      	adds	r5, r1, #3
 8007b48:	f025 0503 	bic.w	r5, r5, #3
 8007b4c:	3508      	adds	r5, #8
 8007b4e:	2d0c      	cmp	r5, #12
 8007b50:	bf38      	it	cc
 8007b52:	250c      	movcc	r5, #12
 8007b54:	2d00      	cmp	r5, #0
 8007b56:	4606      	mov	r6, r0
 8007b58:	db01      	blt.n	8007b5e <_malloc_r+0x1a>
 8007b5a:	42a9      	cmp	r1, r5
 8007b5c:	d903      	bls.n	8007b66 <_malloc_r+0x22>
 8007b5e:	230c      	movs	r3, #12
 8007b60:	6033      	str	r3, [r6, #0]
 8007b62:	2000      	movs	r0, #0
 8007b64:	bd70      	pop	{r4, r5, r6, pc}
 8007b66:	f000 feb6 	bl	80088d6 <__malloc_lock>
 8007b6a:	4a21      	ldr	r2, [pc, #132]	; (8007bf0 <_malloc_r+0xac>)
 8007b6c:	6814      	ldr	r4, [r2, #0]
 8007b6e:	4621      	mov	r1, r4
 8007b70:	b991      	cbnz	r1, 8007b98 <_malloc_r+0x54>
 8007b72:	4c20      	ldr	r4, [pc, #128]	; (8007bf4 <_malloc_r+0xb0>)
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	b91b      	cbnz	r3, 8007b80 <_malloc_r+0x3c>
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f000 f83d 	bl	8007bf8 <_sbrk_r>
 8007b7e:	6020      	str	r0, [r4, #0]
 8007b80:	4629      	mov	r1, r5
 8007b82:	4630      	mov	r0, r6
 8007b84:	f000 f838 	bl	8007bf8 <_sbrk_r>
 8007b88:	1c43      	adds	r3, r0, #1
 8007b8a:	d124      	bne.n	8007bd6 <_malloc_r+0x92>
 8007b8c:	230c      	movs	r3, #12
 8007b8e:	6033      	str	r3, [r6, #0]
 8007b90:	4630      	mov	r0, r6
 8007b92:	f000 fea1 	bl	80088d8 <__malloc_unlock>
 8007b96:	e7e4      	b.n	8007b62 <_malloc_r+0x1e>
 8007b98:	680b      	ldr	r3, [r1, #0]
 8007b9a:	1b5b      	subs	r3, r3, r5
 8007b9c:	d418      	bmi.n	8007bd0 <_malloc_r+0x8c>
 8007b9e:	2b0b      	cmp	r3, #11
 8007ba0:	d90f      	bls.n	8007bc2 <_malloc_r+0x7e>
 8007ba2:	600b      	str	r3, [r1, #0]
 8007ba4:	50cd      	str	r5, [r1, r3]
 8007ba6:	18cc      	adds	r4, r1, r3
 8007ba8:	4630      	mov	r0, r6
 8007baa:	f000 fe95 	bl	80088d8 <__malloc_unlock>
 8007bae:	f104 000b 	add.w	r0, r4, #11
 8007bb2:	1d23      	adds	r3, r4, #4
 8007bb4:	f020 0007 	bic.w	r0, r0, #7
 8007bb8:	1ac3      	subs	r3, r0, r3
 8007bba:	d0d3      	beq.n	8007b64 <_malloc_r+0x20>
 8007bbc:	425a      	negs	r2, r3
 8007bbe:	50e2      	str	r2, [r4, r3]
 8007bc0:	e7d0      	b.n	8007b64 <_malloc_r+0x20>
 8007bc2:	428c      	cmp	r4, r1
 8007bc4:	684b      	ldr	r3, [r1, #4]
 8007bc6:	bf16      	itet	ne
 8007bc8:	6063      	strne	r3, [r4, #4]
 8007bca:	6013      	streq	r3, [r2, #0]
 8007bcc:	460c      	movne	r4, r1
 8007bce:	e7eb      	b.n	8007ba8 <_malloc_r+0x64>
 8007bd0:	460c      	mov	r4, r1
 8007bd2:	6849      	ldr	r1, [r1, #4]
 8007bd4:	e7cc      	b.n	8007b70 <_malloc_r+0x2c>
 8007bd6:	1cc4      	adds	r4, r0, #3
 8007bd8:	f024 0403 	bic.w	r4, r4, #3
 8007bdc:	42a0      	cmp	r0, r4
 8007bde:	d005      	beq.n	8007bec <_malloc_r+0xa8>
 8007be0:	1a21      	subs	r1, r4, r0
 8007be2:	4630      	mov	r0, r6
 8007be4:	f000 f808 	bl	8007bf8 <_sbrk_r>
 8007be8:	3001      	adds	r0, #1
 8007bea:	d0cf      	beq.n	8007b8c <_malloc_r+0x48>
 8007bec:	6025      	str	r5, [r4, #0]
 8007bee:	e7db      	b.n	8007ba8 <_malloc_r+0x64>
 8007bf0:	20000098 	.word	0x20000098
 8007bf4:	2000009c 	.word	0x2000009c

08007bf8 <_sbrk_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4c06      	ldr	r4, [pc, #24]	; (8007c14 <_sbrk_r+0x1c>)
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	4605      	mov	r5, r0
 8007c00:	4608      	mov	r0, r1
 8007c02:	6023      	str	r3, [r4, #0]
 8007c04:	f7fa fc52 	bl	80024ac <_sbrk>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_sbrk_r+0x1a>
 8007c0c:	6823      	ldr	r3, [r4, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_sbrk_r+0x1a>
 8007c10:	602b      	str	r3, [r5, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	200001ec 	.word	0x200001ec

08007c18 <strcpy>:
 8007c18:	4603      	mov	r3, r0
 8007c1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c1e:	f803 2b01 	strb.w	r2, [r3], #1
 8007c22:	2a00      	cmp	r2, #0
 8007c24:	d1f9      	bne.n	8007c1a <strcpy+0x2>
 8007c26:	4770      	bx	lr

08007c28 <quorem>:
 8007c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2c:	6903      	ldr	r3, [r0, #16]
 8007c2e:	690c      	ldr	r4, [r1, #16]
 8007c30:	42a3      	cmp	r3, r4
 8007c32:	4680      	mov	r8, r0
 8007c34:	f2c0 8082 	blt.w	8007d3c <quorem+0x114>
 8007c38:	3c01      	subs	r4, #1
 8007c3a:	f101 0714 	add.w	r7, r1, #20
 8007c3e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007c42:	f100 0614 	add.w	r6, r0, #20
 8007c46:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007c4a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007c4e:	eb06 030c 	add.w	r3, r6, ip
 8007c52:	3501      	adds	r5, #1
 8007c54:	eb07 090c 	add.w	r9, r7, ip
 8007c58:	9301      	str	r3, [sp, #4]
 8007c5a:	fbb0 f5f5 	udiv	r5, r0, r5
 8007c5e:	b395      	cbz	r5, 8007cc6 <quorem+0x9e>
 8007c60:	f04f 0a00 	mov.w	sl, #0
 8007c64:	4638      	mov	r0, r7
 8007c66:	46b6      	mov	lr, r6
 8007c68:	46d3      	mov	fp, sl
 8007c6a:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c6e:	b293      	uxth	r3, r2
 8007c70:	fb05 a303 	mla	r3, r5, r3, sl
 8007c74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	ebab 0303 	sub.w	r3, fp, r3
 8007c7e:	0c12      	lsrs	r2, r2, #16
 8007c80:	f8de b000 	ldr.w	fp, [lr]
 8007c84:	fb05 a202 	mla	r2, r5, r2, sl
 8007c88:	fa13 f38b 	uxtah	r3, r3, fp
 8007c8c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007c90:	fa1f fb82 	uxth.w	fp, r2
 8007c94:	f8de 2000 	ldr.w	r2, [lr]
 8007c98:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007c9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ca6:	4581      	cmp	r9, r0
 8007ca8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007cac:	f84e 3b04 	str.w	r3, [lr], #4
 8007cb0:	d2db      	bcs.n	8007c6a <quorem+0x42>
 8007cb2:	f856 300c 	ldr.w	r3, [r6, ip]
 8007cb6:	b933      	cbnz	r3, 8007cc6 <quorem+0x9e>
 8007cb8:	9b01      	ldr	r3, [sp, #4]
 8007cba:	3b04      	subs	r3, #4
 8007cbc:	429e      	cmp	r6, r3
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	d330      	bcc.n	8007d24 <quorem+0xfc>
 8007cc2:	f8c8 4010 	str.w	r4, [r8, #16]
 8007cc6:	4640      	mov	r0, r8
 8007cc8:	f7ff fe4a 	bl	8007960 <__mcmp>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	db25      	blt.n	8007d1c <quorem+0xf4>
 8007cd0:	3501      	adds	r5, #1
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	f04f 0c00 	mov.w	ip, #0
 8007cd8:	f857 2b04 	ldr.w	r2, [r7], #4
 8007cdc:	f8d0 e000 	ldr.w	lr, [r0]
 8007ce0:	b293      	uxth	r3, r2
 8007ce2:	ebac 0303 	sub.w	r3, ip, r3
 8007ce6:	0c12      	lsrs	r2, r2, #16
 8007ce8:	fa13 f38e 	uxtah	r3, r3, lr
 8007cec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007cf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cfa:	45b9      	cmp	r9, r7
 8007cfc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d00:	f840 3b04 	str.w	r3, [r0], #4
 8007d04:	d2e8      	bcs.n	8007cd8 <quorem+0xb0>
 8007d06:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007d0a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007d0e:	b92a      	cbnz	r2, 8007d1c <quorem+0xf4>
 8007d10:	3b04      	subs	r3, #4
 8007d12:	429e      	cmp	r6, r3
 8007d14:	461a      	mov	r2, r3
 8007d16:	d30b      	bcc.n	8007d30 <quorem+0x108>
 8007d18:	f8c8 4010 	str.w	r4, [r8, #16]
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	b003      	add	sp, #12
 8007d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d24:	6812      	ldr	r2, [r2, #0]
 8007d26:	3b04      	subs	r3, #4
 8007d28:	2a00      	cmp	r2, #0
 8007d2a:	d1ca      	bne.n	8007cc2 <quorem+0x9a>
 8007d2c:	3c01      	subs	r4, #1
 8007d2e:	e7c5      	b.n	8007cbc <quorem+0x94>
 8007d30:	6812      	ldr	r2, [r2, #0]
 8007d32:	3b04      	subs	r3, #4
 8007d34:	2a00      	cmp	r2, #0
 8007d36:	d1ef      	bne.n	8007d18 <quorem+0xf0>
 8007d38:	3c01      	subs	r4, #1
 8007d3a:	e7ea      	b.n	8007d12 <quorem+0xea>
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	e7ee      	b.n	8007d1e <quorem+0xf6>

08007d40 <_dtoa_r>:
 8007d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d44:	ec57 6b10 	vmov	r6, r7, d0
 8007d48:	b097      	sub	sp, #92	; 0x5c
 8007d4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d4c:	9106      	str	r1, [sp, #24]
 8007d4e:	4604      	mov	r4, r0
 8007d50:	920b      	str	r2, [sp, #44]	; 0x2c
 8007d52:	9312      	str	r3, [sp, #72]	; 0x48
 8007d54:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007d58:	e9cd 6700 	strd	r6, r7, [sp]
 8007d5c:	b93d      	cbnz	r5, 8007d6e <_dtoa_r+0x2e>
 8007d5e:	2010      	movs	r0, #16
 8007d60:	f000 fda6 	bl	80088b0 <malloc>
 8007d64:	6260      	str	r0, [r4, #36]	; 0x24
 8007d66:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d6a:	6005      	str	r5, [r0, #0]
 8007d6c:	60c5      	str	r5, [r0, #12]
 8007d6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d70:	6819      	ldr	r1, [r3, #0]
 8007d72:	b151      	cbz	r1, 8007d8a <_dtoa_r+0x4a>
 8007d74:	685a      	ldr	r2, [r3, #4]
 8007d76:	604a      	str	r2, [r1, #4]
 8007d78:	2301      	movs	r3, #1
 8007d7a:	4093      	lsls	r3, r2
 8007d7c:	608b      	str	r3, [r1, #8]
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f7ff fc0c 	bl	800759c <_Bfree>
 8007d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d86:	2200      	movs	r2, #0
 8007d88:	601a      	str	r2, [r3, #0]
 8007d8a:	1e3b      	subs	r3, r7, #0
 8007d8c:	bfbb      	ittet	lt
 8007d8e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d92:	9301      	strlt	r3, [sp, #4]
 8007d94:	2300      	movge	r3, #0
 8007d96:	2201      	movlt	r2, #1
 8007d98:	bfac      	ite	ge
 8007d9a:	f8c8 3000 	strge.w	r3, [r8]
 8007d9e:	f8c8 2000 	strlt.w	r2, [r8]
 8007da2:	4baf      	ldr	r3, [pc, #700]	; (8008060 <_dtoa_r+0x320>)
 8007da4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007da8:	ea33 0308 	bics.w	r3, r3, r8
 8007dac:	d114      	bne.n	8007dd8 <_dtoa_r+0x98>
 8007dae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007db0:	f242 730f 	movw	r3, #9999	; 0x270f
 8007db4:	6013      	str	r3, [r2, #0]
 8007db6:	9b00      	ldr	r3, [sp, #0]
 8007db8:	b923      	cbnz	r3, 8007dc4 <_dtoa_r+0x84>
 8007dba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	f000 8542 	beq.w	8008848 <_dtoa_r+0xb08>
 8007dc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dc6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008074 <_dtoa_r+0x334>
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 8544 	beq.w	8008858 <_dtoa_r+0xb18>
 8007dd0:	f10b 0303 	add.w	r3, fp, #3
 8007dd4:	f000 bd3e 	b.w	8008854 <_dtoa_r+0xb14>
 8007dd8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	2300      	movs	r3, #0
 8007de0:	4630      	mov	r0, r6
 8007de2:	4639      	mov	r1, r7
 8007de4:	f7f8 fe24 	bl	8000a30 <__aeabi_dcmpeq>
 8007de8:	4681      	mov	r9, r0
 8007dea:	b168      	cbz	r0, 8007e08 <_dtoa_r+0xc8>
 8007dec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007dee:	2301      	movs	r3, #1
 8007df0:	6013      	str	r3, [r2, #0]
 8007df2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 8524 	beq.w	8008842 <_dtoa_r+0xb02>
 8007dfa:	4b9a      	ldr	r3, [pc, #616]	; (8008064 <_dtoa_r+0x324>)
 8007dfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007dfe:	f103 3bff 	add.w	fp, r3, #4294967295
 8007e02:	6013      	str	r3, [r2, #0]
 8007e04:	f000 bd28 	b.w	8008858 <_dtoa_r+0xb18>
 8007e08:	aa14      	add	r2, sp, #80	; 0x50
 8007e0a:	a915      	add	r1, sp, #84	; 0x54
 8007e0c:	ec47 6b10 	vmov	d0, r6, r7
 8007e10:	4620      	mov	r0, r4
 8007e12:	f7ff fe1c 	bl	8007a4e <__d2b>
 8007e16:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007e1a:	9004      	str	r0, [sp, #16]
 8007e1c:	2d00      	cmp	r5, #0
 8007e1e:	d07c      	beq.n	8007f1a <_dtoa_r+0x1da>
 8007e20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007e24:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007e28:	46b2      	mov	sl, r6
 8007e2a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007e2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e32:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007e36:	2200      	movs	r2, #0
 8007e38:	4b8b      	ldr	r3, [pc, #556]	; (8008068 <_dtoa_r+0x328>)
 8007e3a:	4650      	mov	r0, sl
 8007e3c:	4659      	mov	r1, fp
 8007e3e:	f7f8 f9d7 	bl	80001f0 <__aeabi_dsub>
 8007e42:	a381      	add	r3, pc, #516	; (adr r3, 8008048 <_dtoa_r+0x308>)
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f7f8 fb8a 	bl	8000560 <__aeabi_dmul>
 8007e4c:	a380      	add	r3, pc, #512	; (adr r3, 8008050 <_dtoa_r+0x310>)
 8007e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e52:	f7f8 f9cf 	bl	80001f4 <__adddf3>
 8007e56:	4606      	mov	r6, r0
 8007e58:	4628      	mov	r0, r5
 8007e5a:	460f      	mov	r7, r1
 8007e5c:	f7f8 fb16 	bl	800048c <__aeabi_i2d>
 8007e60:	a37d      	add	r3, pc, #500	; (adr r3, 8008058 <_dtoa_r+0x318>)
 8007e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e66:	f7f8 fb7b 	bl	8000560 <__aeabi_dmul>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4630      	mov	r0, r6
 8007e70:	4639      	mov	r1, r7
 8007e72:	f7f8 f9bf 	bl	80001f4 <__adddf3>
 8007e76:	4606      	mov	r6, r0
 8007e78:	460f      	mov	r7, r1
 8007e7a:	f7f8 fe21 	bl	8000ac0 <__aeabi_d2iz>
 8007e7e:	2200      	movs	r2, #0
 8007e80:	4682      	mov	sl, r0
 8007e82:	2300      	movs	r3, #0
 8007e84:	4630      	mov	r0, r6
 8007e86:	4639      	mov	r1, r7
 8007e88:	f7f8 fddc 	bl	8000a44 <__aeabi_dcmplt>
 8007e8c:	b148      	cbz	r0, 8007ea2 <_dtoa_r+0x162>
 8007e8e:	4650      	mov	r0, sl
 8007e90:	f7f8 fafc 	bl	800048c <__aeabi_i2d>
 8007e94:	4632      	mov	r2, r6
 8007e96:	463b      	mov	r3, r7
 8007e98:	f7f8 fdca 	bl	8000a30 <__aeabi_dcmpeq>
 8007e9c:	b908      	cbnz	r0, 8007ea2 <_dtoa_r+0x162>
 8007e9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ea2:	f1ba 0f16 	cmp.w	sl, #22
 8007ea6:	d859      	bhi.n	8007f5c <_dtoa_r+0x21c>
 8007ea8:	4970      	ldr	r1, [pc, #448]	; (800806c <_dtoa_r+0x32c>)
 8007eaa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007eae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007eb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007eb6:	f7f8 fde3 	bl	8000a80 <__aeabi_dcmpgt>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	d050      	beq.n	8007f60 <_dtoa_r+0x220>
 8007ebe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ec6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ec8:	1b5d      	subs	r5, r3, r5
 8007eca:	f1b5 0801 	subs.w	r8, r5, #1
 8007ece:	bf49      	itett	mi
 8007ed0:	f1c5 0301 	rsbmi	r3, r5, #1
 8007ed4:	2300      	movpl	r3, #0
 8007ed6:	9305      	strmi	r3, [sp, #20]
 8007ed8:	f04f 0800 	movmi.w	r8, #0
 8007edc:	bf58      	it	pl
 8007ede:	9305      	strpl	r3, [sp, #20]
 8007ee0:	f1ba 0f00 	cmp.w	sl, #0
 8007ee4:	db3e      	blt.n	8007f64 <_dtoa_r+0x224>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	44d0      	add	r8, sl
 8007eea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007eee:	9307      	str	r3, [sp, #28]
 8007ef0:	9b06      	ldr	r3, [sp, #24]
 8007ef2:	2b09      	cmp	r3, #9
 8007ef4:	f200 8090 	bhi.w	8008018 <_dtoa_r+0x2d8>
 8007ef8:	2b05      	cmp	r3, #5
 8007efa:	bfc4      	itt	gt
 8007efc:	3b04      	subgt	r3, #4
 8007efe:	9306      	strgt	r3, [sp, #24]
 8007f00:	9b06      	ldr	r3, [sp, #24]
 8007f02:	f1a3 0302 	sub.w	r3, r3, #2
 8007f06:	bfcc      	ite	gt
 8007f08:	2500      	movgt	r5, #0
 8007f0a:	2501      	movle	r5, #1
 8007f0c:	2b03      	cmp	r3, #3
 8007f0e:	f200 808f 	bhi.w	8008030 <_dtoa_r+0x2f0>
 8007f12:	e8df f003 	tbb	[pc, r3]
 8007f16:	7f7d      	.short	0x7f7d
 8007f18:	7131      	.short	0x7131
 8007f1a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007f1e:	441d      	add	r5, r3
 8007f20:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007f24:	2820      	cmp	r0, #32
 8007f26:	dd13      	ble.n	8007f50 <_dtoa_r+0x210>
 8007f28:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007f2c:	9b00      	ldr	r3, [sp, #0]
 8007f2e:	fa08 f800 	lsl.w	r8, r8, r0
 8007f32:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007f36:	fa23 f000 	lsr.w	r0, r3, r0
 8007f3a:	ea48 0000 	orr.w	r0, r8, r0
 8007f3e:	f7f8 fa95 	bl	800046c <__aeabi_ui2d>
 8007f42:	2301      	movs	r3, #1
 8007f44:	4682      	mov	sl, r0
 8007f46:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007f4a:	3d01      	subs	r5, #1
 8007f4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f4e:	e772      	b.n	8007e36 <_dtoa_r+0xf6>
 8007f50:	9b00      	ldr	r3, [sp, #0]
 8007f52:	f1c0 0020 	rsb	r0, r0, #32
 8007f56:	fa03 f000 	lsl.w	r0, r3, r0
 8007f5a:	e7f0      	b.n	8007f3e <_dtoa_r+0x1fe>
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e7b1      	b.n	8007ec4 <_dtoa_r+0x184>
 8007f60:	900f      	str	r0, [sp, #60]	; 0x3c
 8007f62:	e7b0      	b.n	8007ec6 <_dtoa_r+0x186>
 8007f64:	9b05      	ldr	r3, [sp, #20]
 8007f66:	eba3 030a 	sub.w	r3, r3, sl
 8007f6a:	9305      	str	r3, [sp, #20]
 8007f6c:	f1ca 0300 	rsb	r3, sl, #0
 8007f70:	9307      	str	r3, [sp, #28]
 8007f72:	2300      	movs	r3, #0
 8007f74:	930e      	str	r3, [sp, #56]	; 0x38
 8007f76:	e7bb      	b.n	8007ef0 <_dtoa_r+0x1b0>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	930a      	str	r3, [sp, #40]	; 0x28
 8007f7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	dd59      	ble.n	8008036 <_dtoa_r+0x2f6>
 8007f82:	9302      	str	r3, [sp, #8]
 8007f84:	4699      	mov	r9, r3
 8007f86:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007f88:	2200      	movs	r2, #0
 8007f8a:	6072      	str	r2, [r6, #4]
 8007f8c:	2204      	movs	r2, #4
 8007f8e:	f102 0014 	add.w	r0, r2, #20
 8007f92:	4298      	cmp	r0, r3
 8007f94:	6871      	ldr	r1, [r6, #4]
 8007f96:	d953      	bls.n	8008040 <_dtoa_r+0x300>
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f7ff facb 	bl	8007534 <_Balloc>
 8007f9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fa0:	6030      	str	r0, [r6, #0]
 8007fa2:	f1b9 0f0e 	cmp.w	r9, #14
 8007fa6:	f8d3 b000 	ldr.w	fp, [r3]
 8007faa:	f200 80e6 	bhi.w	800817a <_dtoa_r+0x43a>
 8007fae:	2d00      	cmp	r5, #0
 8007fb0:	f000 80e3 	beq.w	800817a <_dtoa_r+0x43a>
 8007fb4:	ed9d 7b00 	vldr	d7, [sp]
 8007fb8:	f1ba 0f00 	cmp.w	sl, #0
 8007fbc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007fc0:	dd74      	ble.n	80080ac <_dtoa_r+0x36c>
 8007fc2:	4a2a      	ldr	r2, [pc, #168]	; (800806c <_dtoa_r+0x32c>)
 8007fc4:	f00a 030f 	and.w	r3, sl, #15
 8007fc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007fcc:	ed93 7b00 	vldr	d7, [r3]
 8007fd0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007fd4:	06f0      	lsls	r0, r6, #27
 8007fd6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007fda:	d565      	bpl.n	80080a8 <_dtoa_r+0x368>
 8007fdc:	4b24      	ldr	r3, [pc, #144]	; (8008070 <_dtoa_r+0x330>)
 8007fde:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007fe2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fe6:	f7f8 fbe5 	bl	80007b4 <__aeabi_ddiv>
 8007fea:	e9cd 0100 	strd	r0, r1, [sp]
 8007fee:	f006 060f 	and.w	r6, r6, #15
 8007ff2:	2503      	movs	r5, #3
 8007ff4:	4f1e      	ldr	r7, [pc, #120]	; (8008070 <_dtoa_r+0x330>)
 8007ff6:	e04c      	b.n	8008092 <_dtoa_r+0x352>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	930a      	str	r3, [sp, #40]	; 0x28
 8007ffc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ffe:	4453      	add	r3, sl
 8008000:	f103 0901 	add.w	r9, r3, #1
 8008004:	9302      	str	r3, [sp, #8]
 8008006:	464b      	mov	r3, r9
 8008008:	2b01      	cmp	r3, #1
 800800a:	bfb8      	it	lt
 800800c:	2301      	movlt	r3, #1
 800800e:	e7ba      	b.n	8007f86 <_dtoa_r+0x246>
 8008010:	2300      	movs	r3, #0
 8008012:	e7b2      	b.n	8007f7a <_dtoa_r+0x23a>
 8008014:	2300      	movs	r3, #0
 8008016:	e7f0      	b.n	8007ffa <_dtoa_r+0x2ba>
 8008018:	2501      	movs	r5, #1
 800801a:	2300      	movs	r3, #0
 800801c:	9306      	str	r3, [sp, #24]
 800801e:	950a      	str	r5, [sp, #40]	; 0x28
 8008020:	f04f 33ff 	mov.w	r3, #4294967295
 8008024:	9302      	str	r3, [sp, #8]
 8008026:	4699      	mov	r9, r3
 8008028:	2200      	movs	r2, #0
 800802a:	2312      	movs	r3, #18
 800802c:	920b      	str	r2, [sp, #44]	; 0x2c
 800802e:	e7aa      	b.n	8007f86 <_dtoa_r+0x246>
 8008030:	2301      	movs	r3, #1
 8008032:	930a      	str	r3, [sp, #40]	; 0x28
 8008034:	e7f4      	b.n	8008020 <_dtoa_r+0x2e0>
 8008036:	2301      	movs	r3, #1
 8008038:	9302      	str	r3, [sp, #8]
 800803a:	4699      	mov	r9, r3
 800803c:	461a      	mov	r2, r3
 800803e:	e7f5      	b.n	800802c <_dtoa_r+0x2ec>
 8008040:	3101      	adds	r1, #1
 8008042:	6071      	str	r1, [r6, #4]
 8008044:	0052      	lsls	r2, r2, #1
 8008046:	e7a2      	b.n	8007f8e <_dtoa_r+0x24e>
 8008048:	636f4361 	.word	0x636f4361
 800804c:	3fd287a7 	.word	0x3fd287a7
 8008050:	8b60c8b3 	.word	0x8b60c8b3
 8008054:	3fc68a28 	.word	0x3fc68a28
 8008058:	509f79fb 	.word	0x509f79fb
 800805c:	3fd34413 	.word	0x3fd34413
 8008060:	7ff00000 	.word	0x7ff00000
 8008064:	08009aea 	.word	0x08009aea
 8008068:	3ff80000 	.word	0x3ff80000
 800806c:	08009a08 	.word	0x08009a08
 8008070:	080099e0 	.word	0x080099e0
 8008074:	08009ae5 	.word	0x08009ae5
 8008078:	07f1      	lsls	r1, r6, #31
 800807a:	d508      	bpl.n	800808e <_dtoa_r+0x34e>
 800807c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008084:	f7f8 fa6c 	bl	8000560 <__aeabi_dmul>
 8008088:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800808c:	3501      	adds	r5, #1
 800808e:	1076      	asrs	r6, r6, #1
 8008090:	3708      	adds	r7, #8
 8008092:	2e00      	cmp	r6, #0
 8008094:	d1f0      	bne.n	8008078 <_dtoa_r+0x338>
 8008096:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800809a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800809e:	f7f8 fb89 	bl	80007b4 <__aeabi_ddiv>
 80080a2:	e9cd 0100 	strd	r0, r1, [sp]
 80080a6:	e01a      	b.n	80080de <_dtoa_r+0x39e>
 80080a8:	2502      	movs	r5, #2
 80080aa:	e7a3      	b.n	8007ff4 <_dtoa_r+0x2b4>
 80080ac:	f000 80a0 	beq.w	80081f0 <_dtoa_r+0x4b0>
 80080b0:	f1ca 0600 	rsb	r6, sl, #0
 80080b4:	4b9f      	ldr	r3, [pc, #636]	; (8008334 <_dtoa_r+0x5f4>)
 80080b6:	4fa0      	ldr	r7, [pc, #640]	; (8008338 <_dtoa_r+0x5f8>)
 80080b8:	f006 020f 	and.w	r2, r6, #15
 80080bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080c8:	f7f8 fa4a 	bl	8000560 <__aeabi_dmul>
 80080cc:	e9cd 0100 	strd	r0, r1, [sp]
 80080d0:	1136      	asrs	r6, r6, #4
 80080d2:	2300      	movs	r3, #0
 80080d4:	2502      	movs	r5, #2
 80080d6:	2e00      	cmp	r6, #0
 80080d8:	d17f      	bne.n	80081da <_dtoa_r+0x49a>
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1e1      	bne.n	80080a2 <_dtoa_r+0x362>
 80080de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 8087 	beq.w	80081f4 <_dtoa_r+0x4b4>
 80080e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80080ea:	2200      	movs	r2, #0
 80080ec:	4b93      	ldr	r3, [pc, #588]	; (800833c <_dtoa_r+0x5fc>)
 80080ee:	4630      	mov	r0, r6
 80080f0:	4639      	mov	r1, r7
 80080f2:	f7f8 fca7 	bl	8000a44 <__aeabi_dcmplt>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d07c      	beq.n	80081f4 <_dtoa_r+0x4b4>
 80080fa:	f1b9 0f00 	cmp.w	r9, #0
 80080fe:	d079      	beq.n	80081f4 <_dtoa_r+0x4b4>
 8008100:	9b02      	ldr	r3, [sp, #8]
 8008102:	2b00      	cmp	r3, #0
 8008104:	dd35      	ble.n	8008172 <_dtoa_r+0x432>
 8008106:	f10a 33ff 	add.w	r3, sl, #4294967295
 800810a:	9308      	str	r3, [sp, #32]
 800810c:	4639      	mov	r1, r7
 800810e:	2200      	movs	r2, #0
 8008110:	4b8b      	ldr	r3, [pc, #556]	; (8008340 <_dtoa_r+0x600>)
 8008112:	4630      	mov	r0, r6
 8008114:	f7f8 fa24 	bl	8000560 <__aeabi_dmul>
 8008118:	e9cd 0100 	strd	r0, r1, [sp]
 800811c:	9f02      	ldr	r7, [sp, #8]
 800811e:	3501      	adds	r5, #1
 8008120:	4628      	mov	r0, r5
 8008122:	f7f8 f9b3 	bl	800048c <__aeabi_i2d>
 8008126:	e9dd 2300 	ldrd	r2, r3, [sp]
 800812a:	f7f8 fa19 	bl	8000560 <__aeabi_dmul>
 800812e:	2200      	movs	r2, #0
 8008130:	4b84      	ldr	r3, [pc, #528]	; (8008344 <_dtoa_r+0x604>)
 8008132:	f7f8 f85f 	bl	80001f4 <__adddf3>
 8008136:	4605      	mov	r5, r0
 8008138:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800813c:	2f00      	cmp	r7, #0
 800813e:	d15d      	bne.n	80081fc <_dtoa_r+0x4bc>
 8008140:	2200      	movs	r2, #0
 8008142:	4b81      	ldr	r3, [pc, #516]	; (8008348 <_dtoa_r+0x608>)
 8008144:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008148:	f7f8 f852 	bl	80001f0 <__aeabi_dsub>
 800814c:	462a      	mov	r2, r5
 800814e:	4633      	mov	r3, r6
 8008150:	e9cd 0100 	strd	r0, r1, [sp]
 8008154:	f7f8 fc94 	bl	8000a80 <__aeabi_dcmpgt>
 8008158:	2800      	cmp	r0, #0
 800815a:	f040 8288 	bne.w	800866e <_dtoa_r+0x92e>
 800815e:	462a      	mov	r2, r5
 8008160:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008164:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008168:	f7f8 fc6c 	bl	8000a44 <__aeabi_dcmplt>
 800816c:	2800      	cmp	r0, #0
 800816e:	f040 827c 	bne.w	800866a <_dtoa_r+0x92a>
 8008172:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008176:	e9cd 2300 	strd	r2, r3, [sp]
 800817a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800817c:	2b00      	cmp	r3, #0
 800817e:	f2c0 8150 	blt.w	8008422 <_dtoa_r+0x6e2>
 8008182:	f1ba 0f0e 	cmp.w	sl, #14
 8008186:	f300 814c 	bgt.w	8008422 <_dtoa_r+0x6e2>
 800818a:	4b6a      	ldr	r3, [pc, #424]	; (8008334 <_dtoa_r+0x5f4>)
 800818c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008190:	ed93 7b00 	vldr	d7, [r3]
 8008194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008196:	2b00      	cmp	r3, #0
 8008198:	ed8d 7b02 	vstr	d7, [sp, #8]
 800819c:	f280 80d8 	bge.w	8008350 <_dtoa_r+0x610>
 80081a0:	f1b9 0f00 	cmp.w	r9, #0
 80081a4:	f300 80d4 	bgt.w	8008350 <_dtoa_r+0x610>
 80081a8:	f040 825e 	bne.w	8008668 <_dtoa_r+0x928>
 80081ac:	2200      	movs	r2, #0
 80081ae:	4b66      	ldr	r3, [pc, #408]	; (8008348 <_dtoa_r+0x608>)
 80081b0:	ec51 0b17 	vmov	r0, r1, d7
 80081b4:	f7f8 f9d4 	bl	8000560 <__aeabi_dmul>
 80081b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081bc:	f7f8 fc56 	bl	8000a6c <__aeabi_dcmpge>
 80081c0:	464f      	mov	r7, r9
 80081c2:	464e      	mov	r6, r9
 80081c4:	2800      	cmp	r0, #0
 80081c6:	f040 8234 	bne.w	8008632 <_dtoa_r+0x8f2>
 80081ca:	2331      	movs	r3, #49	; 0x31
 80081cc:	f10b 0501 	add.w	r5, fp, #1
 80081d0:	f88b 3000 	strb.w	r3, [fp]
 80081d4:	f10a 0a01 	add.w	sl, sl, #1
 80081d8:	e22f      	b.n	800863a <_dtoa_r+0x8fa>
 80081da:	07f2      	lsls	r2, r6, #31
 80081dc:	d505      	bpl.n	80081ea <_dtoa_r+0x4aa>
 80081de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081e2:	f7f8 f9bd 	bl	8000560 <__aeabi_dmul>
 80081e6:	3501      	adds	r5, #1
 80081e8:	2301      	movs	r3, #1
 80081ea:	1076      	asrs	r6, r6, #1
 80081ec:	3708      	adds	r7, #8
 80081ee:	e772      	b.n	80080d6 <_dtoa_r+0x396>
 80081f0:	2502      	movs	r5, #2
 80081f2:	e774      	b.n	80080de <_dtoa_r+0x39e>
 80081f4:	f8cd a020 	str.w	sl, [sp, #32]
 80081f8:	464f      	mov	r7, r9
 80081fa:	e791      	b.n	8008120 <_dtoa_r+0x3e0>
 80081fc:	4b4d      	ldr	r3, [pc, #308]	; (8008334 <_dtoa_r+0x5f4>)
 80081fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008202:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008208:	2b00      	cmp	r3, #0
 800820a:	d047      	beq.n	800829c <_dtoa_r+0x55c>
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	2000      	movs	r0, #0
 8008212:	494e      	ldr	r1, [pc, #312]	; (800834c <_dtoa_r+0x60c>)
 8008214:	f7f8 face 	bl	80007b4 <__aeabi_ddiv>
 8008218:	462a      	mov	r2, r5
 800821a:	4633      	mov	r3, r6
 800821c:	f7f7 ffe8 	bl	80001f0 <__aeabi_dsub>
 8008220:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008224:	465d      	mov	r5, fp
 8008226:	e9dd 0100 	ldrd	r0, r1, [sp]
 800822a:	f7f8 fc49 	bl	8000ac0 <__aeabi_d2iz>
 800822e:	4606      	mov	r6, r0
 8008230:	f7f8 f92c 	bl	800048c <__aeabi_i2d>
 8008234:	4602      	mov	r2, r0
 8008236:	460b      	mov	r3, r1
 8008238:	e9dd 0100 	ldrd	r0, r1, [sp]
 800823c:	f7f7 ffd8 	bl	80001f0 <__aeabi_dsub>
 8008240:	3630      	adds	r6, #48	; 0x30
 8008242:	f805 6b01 	strb.w	r6, [r5], #1
 8008246:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800824a:	e9cd 0100 	strd	r0, r1, [sp]
 800824e:	f7f8 fbf9 	bl	8000a44 <__aeabi_dcmplt>
 8008252:	2800      	cmp	r0, #0
 8008254:	d163      	bne.n	800831e <_dtoa_r+0x5de>
 8008256:	e9dd 2300 	ldrd	r2, r3, [sp]
 800825a:	2000      	movs	r0, #0
 800825c:	4937      	ldr	r1, [pc, #220]	; (800833c <_dtoa_r+0x5fc>)
 800825e:	f7f7 ffc7 	bl	80001f0 <__aeabi_dsub>
 8008262:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008266:	f7f8 fbed 	bl	8000a44 <__aeabi_dcmplt>
 800826a:	2800      	cmp	r0, #0
 800826c:	f040 80b7 	bne.w	80083de <_dtoa_r+0x69e>
 8008270:	eba5 030b 	sub.w	r3, r5, fp
 8008274:	429f      	cmp	r7, r3
 8008276:	f77f af7c 	ble.w	8008172 <_dtoa_r+0x432>
 800827a:	2200      	movs	r2, #0
 800827c:	4b30      	ldr	r3, [pc, #192]	; (8008340 <_dtoa_r+0x600>)
 800827e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008282:	f7f8 f96d 	bl	8000560 <__aeabi_dmul>
 8008286:	2200      	movs	r2, #0
 8008288:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800828c:	4b2c      	ldr	r3, [pc, #176]	; (8008340 <_dtoa_r+0x600>)
 800828e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008292:	f7f8 f965 	bl	8000560 <__aeabi_dmul>
 8008296:	e9cd 0100 	strd	r0, r1, [sp]
 800829a:	e7c4      	b.n	8008226 <_dtoa_r+0x4e6>
 800829c:	462a      	mov	r2, r5
 800829e:	4633      	mov	r3, r6
 80082a0:	f7f8 f95e 	bl	8000560 <__aeabi_dmul>
 80082a4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80082a8:	eb0b 0507 	add.w	r5, fp, r7
 80082ac:	465e      	mov	r6, fp
 80082ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082b2:	f7f8 fc05 	bl	8000ac0 <__aeabi_d2iz>
 80082b6:	4607      	mov	r7, r0
 80082b8:	f7f8 f8e8 	bl	800048c <__aeabi_i2d>
 80082bc:	3730      	adds	r7, #48	; 0x30
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082c6:	f7f7 ff93 	bl	80001f0 <__aeabi_dsub>
 80082ca:	f806 7b01 	strb.w	r7, [r6], #1
 80082ce:	42ae      	cmp	r6, r5
 80082d0:	e9cd 0100 	strd	r0, r1, [sp]
 80082d4:	f04f 0200 	mov.w	r2, #0
 80082d8:	d126      	bne.n	8008328 <_dtoa_r+0x5e8>
 80082da:	4b1c      	ldr	r3, [pc, #112]	; (800834c <_dtoa_r+0x60c>)
 80082dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082e0:	f7f7 ff88 	bl	80001f4 <__adddf3>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082ec:	f7f8 fbc8 	bl	8000a80 <__aeabi_dcmpgt>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	d174      	bne.n	80083de <_dtoa_r+0x69e>
 80082f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80082f8:	2000      	movs	r0, #0
 80082fa:	4914      	ldr	r1, [pc, #80]	; (800834c <_dtoa_r+0x60c>)
 80082fc:	f7f7 ff78 	bl	80001f0 <__aeabi_dsub>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008308:	f7f8 fb9c 	bl	8000a44 <__aeabi_dcmplt>
 800830c:	2800      	cmp	r0, #0
 800830e:	f43f af30 	beq.w	8008172 <_dtoa_r+0x432>
 8008312:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008316:	2b30      	cmp	r3, #48	; 0x30
 8008318:	f105 32ff 	add.w	r2, r5, #4294967295
 800831c:	d002      	beq.n	8008324 <_dtoa_r+0x5e4>
 800831e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008322:	e04a      	b.n	80083ba <_dtoa_r+0x67a>
 8008324:	4615      	mov	r5, r2
 8008326:	e7f4      	b.n	8008312 <_dtoa_r+0x5d2>
 8008328:	4b05      	ldr	r3, [pc, #20]	; (8008340 <_dtoa_r+0x600>)
 800832a:	f7f8 f919 	bl	8000560 <__aeabi_dmul>
 800832e:	e9cd 0100 	strd	r0, r1, [sp]
 8008332:	e7bc      	b.n	80082ae <_dtoa_r+0x56e>
 8008334:	08009a08 	.word	0x08009a08
 8008338:	080099e0 	.word	0x080099e0
 800833c:	3ff00000 	.word	0x3ff00000
 8008340:	40240000 	.word	0x40240000
 8008344:	401c0000 	.word	0x401c0000
 8008348:	40140000 	.word	0x40140000
 800834c:	3fe00000 	.word	0x3fe00000
 8008350:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008354:	465d      	mov	r5, fp
 8008356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800835a:	4630      	mov	r0, r6
 800835c:	4639      	mov	r1, r7
 800835e:	f7f8 fa29 	bl	80007b4 <__aeabi_ddiv>
 8008362:	f7f8 fbad 	bl	8000ac0 <__aeabi_d2iz>
 8008366:	4680      	mov	r8, r0
 8008368:	f7f8 f890 	bl	800048c <__aeabi_i2d>
 800836c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008370:	f7f8 f8f6 	bl	8000560 <__aeabi_dmul>
 8008374:	4602      	mov	r2, r0
 8008376:	460b      	mov	r3, r1
 8008378:	4630      	mov	r0, r6
 800837a:	4639      	mov	r1, r7
 800837c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008380:	f7f7 ff36 	bl	80001f0 <__aeabi_dsub>
 8008384:	f805 6b01 	strb.w	r6, [r5], #1
 8008388:	eba5 060b 	sub.w	r6, r5, fp
 800838c:	45b1      	cmp	r9, r6
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	d139      	bne.n	8008408 <_dtoa_r+0x6c8>
 8008394:	f7f7 ff2e 	bl	80001f4 <__adddf3>
 8008398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800839c:	4606      	mov	r6, r0
 800839e:	460f      	mov	r7, r1
 80083a0:	f7f8 fb6e 	bl	8000a80 <__aeabi_dcmpgt>
 80083a4:	b9c8      	cbnz	r0, 80083da <_dtoa_r+0x69a>
 80083a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083aa:	4630      	mov	r0, r6
 80083ac:	4639      	mov	r1, r7
 80083ae:	f7f8 fb3f 	bl	8000a30 <__aeabi_dcmpeq>
 80083b2:	b110      	cbz	r0, 80083ba <_dtoa_r+0x67a>
 80083b4:	f018 0f01 	tst.w	r8, #1
 80083b8:	d10f      	bne.n	80083da <_dtoa_r+0x69a>
 80083ba:	9904      	ldr	r1, [sp, #16]
 80083bc:	4620      	mov	r0, r4
 80083be:	f7ff f8ed 	bl	800759c <_Bfree>
 80083c2:	2300      	movs	r3, #0
 80083c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083c6:	702b      	strb	r3, [r5, #0]
 80083c8:	f10a 0301 	add.w	r3, sl, #1
 80083cc:	6013      	str	r3, [r2, #0]
 80083ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 8241 	beq.w	8008858 <_dtoa_r+0xb18>
 80083d6:	601d      	str	r5, [r3, #0]
 80083d8:	e23e      	b.n	8008858 <_dtoa_r+0xb18>
 80083da:	f8cd a020 	str.w	sl, [sp, #32]
 80083de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80083e2:	2a39      	cmp	r2, #57	; 0x39
 80083e4:	f105 33ff 	add.w	r3, r5, #4294967295
 80083e8:	d108      	bne.n	80083fc <_dtoa_r+0x6bc>
 80083ea:	459b      	cmp	fp, r3
 80083ec:	d10a      	bne.n	8008404 <_dtoa_r+0x6c4>
 80083ee:	9b08      	ldr	r3, [sp, #32]
 80083f0:	3301      	adds	r3, #1
 80083f2:	9308      	str	r3, [sp, #32]
 80083f4:	2330      	movs	r3, #48	; 0x30
 80083f6:	f88b 3000 	strb.w	r3, [fp]
 80083fa:	465b      	mov	r3, fp
 80083fc:	781a      	ldrb	r2, [r3, #0]
 80083fe:	3201      	adds	r2, #1
 8008400:	701a      	strb	r2, [r3, #0]
 8008402:	e78c      	b.n	800831e <_dtoa_r+0x5de>
 8008404:	461d      	mov	r5, r3
 8008406:	e7ea      	b.n	80083de <_dtoa_r+0x69e>
 8008408:	2200      	movs	r2, #0
 800840a:	4b9b      	ldr	r3, [pc, #620]	; (8008678 <_dtoa_r+0x938>)
 800840c:	f7f8 f8a8 	bl	8000560 <__aeabi_dmul>
 8008410:	2200      	movs	r2, #0
 8008412:	2300      	movs	r3, #0
 8008414:	4606      	mov	r6, r0
 8008416:	460f      	mov	r7, r1
 8008418:	f7f8 fb0a 	bl	8000a30 <__aeabi_dcmpeq>
 800841c:	2800      	cmp	r0, #0
 800841e:	d09a      	beq.n	8008356 <_dtoa_r+0x616>
 8008420:	e7cb      	b.n	80083ba <_dtoa_r+0x67a>
 8008422:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008424:	2a00      	cmp	r2, #0
 8008426:	f000 808b 	beq.w	8008540 <_dtoa_r+0x800>
 800842a:	9a06      	ldr	r2, [sp, #24]
 800842c:	2a01      	cmp	r2, #1
 800842e:	dc6e      	bgt.n	800850e <_dtoa_r+0x7ce>
 8008430:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008432:	2a00      	cmp	r2, #0
 8008434:	d067      	beq.n	8008506 <_dtoa_r+0x7c6>
 8008436:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800843a:	9f07      	ldr	r7, [sp, #28]
 800843c:	9d05      	ldr	r5, [sp, #20]
 800843e:	9a05      	ldr	r2, [sp, #20]
 8008440:	2101      	movs	r1, #1
 8008442:	441a      	add	r2, r3
 8008444:	4620      	mov	r0, r4
 8008446:	9205      	str	r2, [sp, #20]
 8008448:	4498      	add	r8, r3
 800844a:	f7ff f947 	bl	80076dc <__i2b>
 800844e:	4606      	mov	r6, r0
 8008450:	2d00      	cmp	r5, #0
 8008452:	dd0c      	ble.n	800846e <_dtoa_r+0x72e>
 8008454:	f1b8 0f00 	cmp.w	r8, #0
 8008458:	dd09      	ble.n	800846e <_dtoa_r+0x72e>
 800845a:	4545      	cmp	r5, r8
 800845c:	9a05      	ldr	r2, [sp, #20]
 800845e:	462b      	mov	r3, r5
 8008460:	bfa8      	it	ge
 8008462:	4643      	movge	r3, r8
 8008464:	1ad2      	subs	r2, r2, r3
 8008466:	9205      	str	r2, [sp, #20]
 8008468:	1aed      	subs	r5, r5, r3
 800846a:	eba8 0803 	sub.w	r8, r8, r3
 800846e:	9b07      	ldr	r3, [sp, #28]
 8008470:	b1eb      	cbz	r3, 80084ae <_dtoa_r+0x76e>
 8008472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008474:	2b00      	cmp	r3, #0
 8008476:	d067      	beq.n	8008548 <_dtoa_r+0x808>
 8008478:	b18f      	cbz	r7, 800849e <_dtoa_r+0x75e>
 800847a:	4631      	mov	r1, r6
 800847c:	463a      	mov	r2, r7
 800847e:	4620      	mov	r0, r4
 8008480:	f7ff f9cc 	bl	800781c <__pow5mult>
 8008484:	9a04      	ldr	r2, [sp, #16]
 8008486:	4601      	mov	r1, r0
 8008488:	4606      	mov	r6, r0
 800848a:	4620      	mov	r0, r4
 800848c:	f7ff f92f 	bl	80076ee <__multiply>
 8008490:	9904      	ldr	r1, [sp, #16]
 8008492:	9008      	str	r0, [sp, #32]
 8008494:	4620      	mov	r0, r4
 8008496:	f7ff f881 	bl	800759c <_Bfree>
 800849a:	9b08      	ldr	r3, [sp, #32]
 800849c:	9304      	str	r3, [sp, #16]
 800849e:	9b07      	ldr	r3, [sp, #28]
 80084a0:	1bda      	subs	r2, r3, r7
 80084a2:	d004      	beq.n	80084ae <_dtoa_r+0x76e>
 80084a4:	9904      	ldr	r1, [sp, #16]
 80084a6:	4620      	mov	r0, r4
 80084a8:	f7ff f9b8 	bl	800781c <__pow5mult>
 80084ac:	9004      	str	r0, [sp, #16]
 80084ae:	2101      	movs	r1, #1
 80084b0:	4620      	mov	r0, r4
 80084b2:	f7ff f913 	bl	80076dc <__i2b>
 80084b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084b8:	4607      	mov	r7, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 81d0 	beq.w	8008860 <_dtoa_r+0xb20>
 80084c0:	461a      	mov	r2, r3
 80084c2:	4601      	mov	r1, r0
 80084c4:	4620      	mov	r0, r4
 80084c6:	f7ff f9a9 	bl	800781c <__pow5mult>
 80084ca:	9b06      	ldr	r3, [sp, #24]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	4607      	mov	r7, r0
 80084d0:	dc40      	bgt.n	8008554 <_dtoa_r+0x814>
 80084d2:	9b00      	ldr	r3, [sp, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d139      	bne.n	800854c <_dtoa_r+0x80c>
 80084d8:	9b01      	ldr	r3, [sp, #4]
 80084da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d136      	bne.n	8008550 <_dtoa_r+0x810>
 80084e2:	9b01      	ldr	r3, [sp, #4]
 80084e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084e8:	0d1b      	lsrs	r3, r3, #20
 80084ea:	051b      	lsls	r3, r3, #20
 80084ec:	b12b      	cbz	r3, 80084fa <_dtoa_r+0x7ba>
 80084ee:	9b05      	ldr	r3, [sp, #20]
 80084f0:	3301      	adds	r3, #1
 80084f2:	9305      	str	r3, [sp, #20]
 80084f4:	f108 0801 	add.w	r8, r8, #1
 80084f8:	2301      	movs	r3, #1
 80084fa:	9307      	str	r3, [sp, #28]
 80084fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d12a      	bne.n	8008558 <_dtoa_r+0x818>
 8008502:	2001      	movs	r0, #1
 8008504:	e030      	b.n	8008568 <_dtoa_r+0x828>
 8008506:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008508:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800850c:	e795      	b.n	800843a <_dtoa_r+0x6fa>
 800850e:	9b07      	ldr	r3, [sp, #28]
 8008510:	f109 37ff 	add.w	r7, r9, #4294967295
 8008514:	42bb      	cmp	r3, r7
 8008516:	bfbf      	itttt	lt
 8008518:	9b07      	ldrlt	r3, [sp, #28]
 800851a:	9707      	strlt	r7, [sp, #28]
 800851c:	1afa      	sublt	r2, r7, r3
 800851e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008520:	bfbb      	ittet	lt
 8008522:	189b      	addlt	r3, r3, r2
 8008524:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008526:	1bdf      	subge	r7, r3, r7
 8008528:	2700      	movlt	r7, #0
 800852a:	f1b9 0f00 	cmp.w	r9, #0
 800852e:	bfb5      	itete	lt
 8008530:	9b05      	ldrlt	r3, [sp, #20]
 8008532:	9d05      	ldrge	r5, [sp, #20]
 8008534:	eba3 0509 	sublt.w	r5, r3, r9
 8008538:	464b      	movge	r3, r9
 800853a:	bfb8      	it	lt
 800853c:	2300      	movlt	r3, #0
 800853e:	e77e      	b.n	800843e <_dtoa_r+0x6fe>
 8008540:	9f07      	ldr	r7, [sp, #28]
 8008542:	9d05      	ldr	r5, [sp, #20]
 8008544:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008546:	e783      	b.n	8008450 <_dtoa_r+0x710>
 8008548:	9a07      	ldr	r2, [sp, #28]
 800854a:	e7ab      	b.n	80084a4 <_dtoa_r+0x764>
 800854c:	2300      	movs	r3, #0
 800854e:	e7d4      	b.n	80084fa <_dtoa_r+0x7ba>
 8008550:	9b00      	ldr	r3, [sp, #0]
 8008552:	e7d2      	b.n	80084fa <_dtoa_r+0x7ba>
 8008554:	2300      	movs	r3, #0
 8008556:	9307      	str	r3, [sp, #28]
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800855e:	6918      	ldr	r0, [r3, #16]
 8008560:	f7ff f86e 	bl	8007640 <__hi0bits>
 8008564:	f1c0 0020 	rsb	r0, r0, #32
 8008568:	4440      	add	r0, r8
 800856a:	f010 001f 	ands.w	r0, r0, #31
 800856e:	d047      	beq.n	8008600 <_dtoa_r+0x8c0>
 8008570:	f1c0 0320 	rsb	r3, r0, #32
 8008574:	2b04      	cmp	r3, #4
 8008576:	dd3b      	ble.n	80085f0 <_dtoa_r+0x8b0>
 8008578:	9b05      	ldr	r3, [sp, #20]
 800857a:	f1c0 001c 	rsb	r0, r0, #28
 800857e:	4403      	add	r3, r0
 8008580:	9305      	str	r3, [sp, #20]
 8008582:	4405      	add	r5, r0
 8008584:	4480      	add	r8, r0
 8008586:	9b05      	ldr	r3, [sp, #20]
 8008588:	2b00      	cmp	r3, #0
 800858a:	dd05      	ble.n	8008598 <_dtoa_r+0x858>
 800858c:	461a      	mov	r2, r3
 800858e:	9904      	ldr	r1, [sp, #16]
 8008590:	4620      	mov	r0, r4
 8008592:	f7ff f991 	bl	80078b8 <__lshift>
 8008596:	9004      	str	r0, [sp, #16]
 8008598:	f1b8 0f00 	cmp.w	r8, #0
 800859c:	dd05      	ble.n	80085aa <_dtoa_r+0x86a>
 800859e:	4639      	mov	r1, r7
 80085a0:	4642      	mov	r2, r8
 80085a2:	4620      	mov	r0, r4
 80085a4:	f7ff f988 	bl	80078b8 <__lshift>
 80085a8:	4607      	mov	r7, r0
 80085aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085ac:	b353      	cbz	r3, 8008604 <_dtoa_r+0x8c4>
 80085ae:	4639      	mov	r1, r7
 80085b0:	9804      	ldr	r0, [sp, #16]
 80085b2:	f7ff f9d5 	bl	8007960 <__mcmp>
 80085b6:	2800      	cmp	r0, #0
 80085b8:	da24      	bge.n	8008604 <_dtoa_r+0x8c4>
 80085ba:	2300      	movs	r3, #0
 80085bc:	220a      	movs	r2, #10
 80085be:	9904      	ldr	r1, [sp, #16]
 80085c0:	4620      	mov	r0, r4
 80085c2:	f7ff f802 	bl	80075ca <__multadd>
 80085c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085c8:	9004      	str	r0, [sp, #16]
 80085ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f000 814d 	beq.w	800886e <_dtoa_r+0xb2e>
 80085d4:	2300      	movs	r3, #0
 80085d6:	4631      	mov	r1, r6
 80085d8:	220a      	movs	r2, #10
 80085da:	4620      	mov	r0, r4
 80085dc:	f7fe fff5 	bl	80075ca <__multadd>
 80085e0:	9b02      	ldr	r3, [sp, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	4606      	mov	r6, r0
 80085e6:	dc4f      	bgt.n	8008688 <_dtoa_r+0x948>
 80085e8:	9b06      	ldr	r3, [sp, #24]
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	dd4c      	ble.n	8008688 <_dtoa_r+0x948>
 80085ee:	e011      	b.n	8008614 <_dtoa_r+0x8d4>
 80085f0:	d0c9      	beq.n	8008586 <_dtoa_r+0x846>
 80085f2:	9a05      	ldr	r2, [sp, #20]
 80085f4:	331c      	adds	r3, #28
 80085f6:	441a      	add	r2, r3
 80085f8:	9205      	str	r2, [sp, #20]
 80085fa:	441d      	add	r5, r3
 80085fc:	4498      	add	r8, r3
 80085fe:	e7c2      	b.n	8008586 <_dtoa_r+0x846>
 8008600:	4603      	mov	r3, r0
 8008602:	e7f6      	b.n	80085f2 <_dtoa_r+0x8b2>
 8008604:	f1b9 0f00 	cmp.w	r9, #0
 8008608:	dc38      	bgt.n	800867c <_dtoa_r+0x93c>
 800860a:	9b06      	ldr	r3, [sp, #24]
 800860c:	2b02      	cmp	r3, #2
 800860e:	dd35      	ble.n	800867c <_dtoa_r+0x93c>
 8008610:	f8cd 9008 	str.w	r9, [sp, #8]
 8008614:	9b02      	ldr	r3, [sp, #8]
 8008616:	b963      	cbnz	r3, 8008632 <_dtoa_r+0x8f2>
 8008618:	4639      	mov	r1, r7
 800861a:	2205      	movs	r2, #5
 800861c:	4620      	mov	r0, r4
 800861e:	f7fe ffd4 	bl	80075ca <__multadd>
 8008622:	4601      	mov	r1, r0
 8008624:	4607      	mov	r7, r0
 8008626:	9804      	ldr	r0, [sp, #16]
 8008628:	f7ff f99a 	bl	8007960 <__mcmp>
 800862c:	2800      	cmp	r0, #0
 800862e:	f73f adcc 	bgt.w	80081ca <_dtoa_r+0x48a>
 8008632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008634:	465d      	mov	r5, fp
 8008636:	ea6f 0a03 	mvn.w	sl, r3
 800863a:	f04f 0900 	mov.w	r9, #0
 800863e:	4639      	mov	r1, r7
 8008640:	4620      	mov	r0, r4
 8008642:	f7fe ffab 	bl	800759c <_Bfree>
 8008646:	2e00      	cmp	r6, #0
 8008648:	f43f aeb7 	beq.w	80083ba <_dtoa_r+0x67a>
 800864c:	f1b9 0f00 	cmp.w	r9, #0
 8008650:	d005      	beq.n	800865e <_dtoa_r+0x91e>
 8008652:	45b1      	cmp	r9, r6
 8008654:	d003      	beq.n	800865e <_dtoa_r+0x91e>
 8008656:	4649      	mov	r1, r9
 8008658:	4620      	mov	r0, r4
 800865a:	f7fe ff9f 	bl	800759c <_Bfree>
 800865e:	4631      	mov	r1, r6
 8008660:	4620      	mov	r0, r4
 8008662:	f7fe ff9b 	bl	800759c <_Bfree>
 8008666:	e6a8      	b.n	80083ba <_dtoa_r+0x67a>
 8008668:	2700      	movs	r7, #0
 800866a:	463e      	mov	r6, r7
 800866c:	e7e1      	b.n	8008632 <_dtoa_r+0x8f2>
 800866e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008672:	463e      	mov	r6, r7
 8008674:	e5a9      	b.n	80081ca <_dtoa_r+0x48a>
 8008676:	bf00      	nop
 8008678:	40240000 	.word	0x40240000
 800867c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800867e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008682:	2b00      	cmp	r3, #0
 8008684:	f000 80fa 	beq.w	800887c <_dtoa_r+0xb3c>
 8008688:	2d00      	cmp	r5, #0
 800868a:	dd05      	ble.n	8008698 <_dtoa_r+0x958>
 800868c:	4631      	mov	r1, r6
 800868e:	462a      	mov	r2, r5
 8008690:	4620      	mov	r0, r4
 8008692:	f7ff f911 	bl	80078b8 <__lshift>
 8008696:	4606      	mov	r6, r0
 8008698:	9b07      	ldr	r3, [sp, #28]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d04c      	beq.n	8008738 <_dtoa_r+0x9f8>
 800869e:	6871      	ldr	r1, [r6, #4]
 80086a0:	4620      	mov	r0, r4
 80086a2:	f7fe ff47 	bl	8007534 <_Balloc>
 80086a6:	6932      	ldr	r2, [r6, #16]
 80086a8:	3202      	adds	r2, #2
 80086aa:	4605      	mov	r5, r0
 80086ac:	0092      	lsls	r2, r2, #2
 80086ae:	f106 010c 	add.w	r1, r6, #12
 80086b2:	300c      	adds	r0, #12
 80086b4:	f000 f904 	bl	80088c0 <memcpy>
 80086b8:	2201      	movs	r2, #1
 80086ba:	4629      	mov	r1, r5
 80086bc:	4620      	mov	r0, r4
 80086be:	f7ff f8fb 	bl	80078b8 <__lshift>
 80086c2:	9b00      	ldr	r3, [sp, #0]
 80086c4:	f8cd b014 	str.w	fp, [sp, #20]
 80086c8:	f003 0301 	and.w	r3, r3, #1
 80086cc:	46b1      	mov	r9, r6
 80086ce:	9307      	str	r3, [sp, #28]
 80086d0:	4606      	mov	r6, r0
 80086d2:	4639      	mov	r1, r7
 80086d4:	9804      	ldr	r0, [sp, #16]
 80086d6:	f7ff faa7 	bl	8007c28 <quorem>
 80086da:	4649      	mov	r1, r9
 80086dc:	4605      	mov	r5, r0
 80086de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80086e2:	9804      	ldr	r0, [sp, #16]
 80086e4:	f7ff f93c 	bl	8007960 <__mcmp>
 80086e8:	4632      	mov	r2, r6
 80086ea:	9000      	str	r0, [sp, #0]
 80086ec:	4639      	mov	r1, r7
 80086ee:	4620      	mov	r0, r4
 80086f0:	f7ff f950 	bl	8007994 <__mdiff>
 80086f4:	68c3      	ldr	r3, [r0, #12]
 80086f6:	4602      	mov	r2, r0
 80086f8:	bb03      	cbnz	r3, 800873c <_dtoa_r+0x9fc>
 80086fa:	4601      	mov	r1, r0
 80086fc:	9008      	str	r0, [sp, #32]
 80086fe:	9804      	ldr	r0, [sp, #16]
 8008700:	f7ff f92e 	bl	8007960 <__mcmp>
 8008704:	9a08      	ldr	r2, [sp, #32]
 8008706:	4603      	mov	r3, r0
 8008708:	4611      	mov	r1, r2
 800870a:	4620      	mov	r0, r4
 800870c:	9308      	str	r3, [sp, #32]
 800870e:	f7fe ff45 	bl	800759c <_Bfree>
 8008712:	9b08      	ldr	r3, [sp, #32]
 8008714:	b9a3      	cbnz	r3, 8008740 <_dtoa_r+0xa00>
 8008716:	9a06      	ldr	r2, [sp, #24]
 8008718:	b992      	cbnz	r2, 8008740 <_dtoa_r+0xa00>
 800871a:	9a07      	ldr	r2, [sp, #28]
 800871c:	b982      	cbnz	r2, 8008740 <_dtoa_r+0xa00>
 800871e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008722:	d029      	beq.n	8008778 <_dtoa_r+0xa38>
 8008724:	9b00      	ldr	r3, [sp, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	dd01      	ble.n	800872e <_dtoa_r+0x9ee>
 800872a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800872e:	9b05      	ldr	r3, [sp, #20]
 8008730:	1c5d      	adds	r5, r3, #1
 8008732:	f883 8000 	strb.w	r8, [r3]
 8008736:	e782      	b.n	800863e <_dtoa_r+0x8fe>
 8008738:	4630      	mov	r0, r6
 800873a:	e7c2      	b.n	80086c2 <_dtoa_r+0x982>
 800873c:	2301      	movs	r3, #1
 800873e:	e7e3      	b.n	8008708 <_dtoa_r+0x9c8>
 8008740:	9a00      	ldr	r2, [sp, #0]
 8008742:	2a00      	cmp	r2, #0
 8008744:	db04      	blt.n	8008750 <_dtoa_r+0xa10>
 8008746:	d125      	bne.n	8008794 <_dtoa_r+0xa54>
 8008748:	9a06      	ldr	r2, [sp, #24]
 800874a:	bb1a      	cbnz	r2, 8008794 <_dtoa_r+0xa54>
 800874c:	9a07      	ldr	r2, [sp, #28]
 800874e:	bb0a      	cbnz	r2, 8008794 <_dtoa_r+0xa54>
 8008750:	2b00      	cmp	r3, #0
 8008752:	ddec      	ble.n	800872e <_dtoa_r+0x9ee>
 8008754:	2201      	movs	r2, #1
 8008756:	9904      	ldr	r1, [sp, #16]
 8008758:	4620      	mov	r0, r4
 800875a:	f7ff f8ad 	bl	80078b8 <__lshift>
 800875e:	4639      	mov	r1, r7
 8008760:	9004      	str	r0, [sp, #16]
 8008762:	f7ff f8fd 	bl	8007960 <__mcmp>
 8008766:	2800      	cmp	r0, #0
 8008768:	dc03      	bgt.n	8008772 <_dtoa_r+0xa32>
 800876a:	d1e0      	bne.n	800872e <_dtoa_r+0x9ee>
 800876c:	f018 0f01 	tst.w	r8, #1
 8008770:	d0dd      	beq.n	800872e <_dtoa_r+0x9ee>
 8008772:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008776:	d1d8      	bne.n	800872a <_dtoa_r+0x9ea>
 8008778:	9b05      	ldr	r3, [sp, #20]
 800877a:	9a05      	ldr	r2, [sp, #20]
 800877c:	1c5d      	adds	r5, r3, #1
 800877e:	2339      	movs	r3, #57	; 0x39
 8008780:	7013      	strb	r3, [r2, #0]
 8008782:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008786:	2b39      	cmp	r3, #57	; 0x39
 8008788:	f105 32ff 	add.w	r2, r5, #4294967295
 800878c:	d04f      	beq.n	800882e <_dtoa_r+0xaee>
 800878e:	3301      	adds	r3, #1
 8008790:	7013      	strb	r3, [r2, #0]
 8008792:	e754      	b.n	800863e <_dtoa_r+0x8fe>
 8008794:	9a05      	ldr	r2, [sp, #20]
 8008796:	2b00      	cmp	r3, #0
 8008798:	f102 0501 	add.w	r5, r2, #1
 800879c:	dd06      	ble.n	80087ac <_dtoa_r+0xa6c>
 800879e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80087a2:	d0e9      	beq.n	8008778 <_dtoa_r+0xa38>
 80087a4:	f108 0801 	add.w	r8, r8, #1
 80087a8:	9b05      	ldr	r3, [sp, #20]
 80087aa:	e7c2      	b.n	8008732 <_dtoa_r+0x9f2>
 80087ac:	9a02      	ldr	r2, [sp, #8]
 80087ae:	f805 8c01 	strb.w	r8, [r5, #-1]
 80087b2:	eba5 030b 	sub.w	r3, r5, fp
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d021      	beq.n	80087fe <_dtoa_r+0xabe>
 80087ba:	2300      	movs	r3, #0
 80087bc:	220a      	movs	r2, #10
 80087be:	9904      	ldr	r1, [sp, #16]
 80087c0:	4620      	mov	r0, r4
 80087c2:	f7fe ff02 	bl	80075ca <__multadd>
 80087c6:	45b1      	cmp	r9, r6
 80087c8:	9004      	str	r0, [sp, #16]
 80087ca:	f04f 0300 	mov.w	r3, #0
 80087ce:	f04f 020a 	mov.w	r2, #10
 80087d2:	4649      	mov	r1, r9
 80087d4:	4620      	mov	r0, r4
 80087d6:	d105      	bne.n	80087e4 <_dtoa_r+0xaa4>
 80087d8:	f7fe fef7 	bl	80075ca <__multadd>
 80087dc:	4681      	mov	r9, r0
 80087de:	4606      	mov	r6, r0
 80087e0:	9505      	str	r5, [sp, #20]
 80087e2:	e776      	b.n	80086d2 <_dtoa_r+0x992>
 80087e4:	f7fe fef1 	bl	80075ca <__multadd>
 80087e8:	4631      	mov	r1, r6
 80087ea:	4681      	mov	r9, r0
 80087ec:	2300      	movs	r3, #0
 80087ee:	220a      	movs	r2, #10
 80087f0:	4620      	mov	r0, r4
 80087f2:	f7fe feea 	bl	80075ca <__multadd>
 80087f6:	4606      	mov	r6, r0
 80087f8:	e7f2      	b.n	80087e0 <_dtoa_r+0xaa0>
 80087fa:	f04f 0900 	mov.w	r9, #0
 80087fe:	2201      	movs	r2, #1
 8008800:	9904      	ldr	r1, [sp, #16]
 8008802:	4620      	mov	r0, r4
 8008804:	f7ff f858 	bl	80078b8 <__lshift>
 8008808:	4639      	mov	r1, r7
 800880a:	9004      	str	r0, [sp, #16]
 800880c:	f7ff f8a8 	bl	8007960 <__mcmp>
 8008810:	2800      	cmp	r0, #0
 8008812:	dcb6      	bgt.n	8008782 <_dtoa_r+0xa42>
 8008814:	d102      	bne.n	800881c <_dtoa_r+0xadc>
 8008816:	f018 0f01 	tst.w	r8, #1
 800881a:	d1b2      	bne.n	8008782 <_dtoa_r+0xa42>
 800881c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008820:	2b30      	cmp	r3, #48	; 0x30
 8008822:	f105 32ff 	add.w	r2, r5, #4294967295
 8008826:	f47f af0a 	bne.w	800863e <_dtoa_r+0x8fe>
 800882a:	4615      	mov	r5, r2
 800882c:	e7f6      	b.n	800881c <_dtoa_r+0xadc>
 800882e:	4593      	cmp	fp, r2
 8008830:	d105      	bne.n	800883e <_dtoa_r+0xafe>
 8008832:	2331      	movs	r3, #49	; 0x31
 8008834:	f10a 0a01 	add.w	sl, sl, #1
 8008838:	f88b 3000 	strb.w	r3, [fp]
 800883c:	e6ff      	b.n	800863e <_dtoa_r+0x8fe>
 800883e:	4615      	mov	r5, r2
 8008840:	e79f      	b.n	8008782 <_dtoa_r+0xa42>
 8008842:	f8df b064 	ldr.w	fp, [pc, #100]	; 80088a8 <_dtoa_r+0xb68>
 8008846:	e007      	b.n	8008858 <_dtoa_r+0xb18>
 8008848:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800884a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80088ac <_dtoa_r+0xb6c>
 800884e:	b11b      	cbz	r3, 8008858 <_dtoa_r+0xb18>
 8008850:	f10b 0308 	add.w	r3, fp, #8
 8008854:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008856:	6013      	str	r3, [r2, #0]
 8008858:	4658      	mov	r0, fp
 800885a:	b017      	add	sp, #92	; 0x5c
 800885c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008860:	9b06      	ldr	r3, [sp, #24]
 8008862:	2b01      	cmp	r3, #1
 8008864:	f77f ae35 	ble.w	80084d2 <_dtoa_r+0x792>
 8008868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800886a:	9307      	str	r3, [sp, #28]
 800886c:	e649      	b.n	8008502 <_dtoa_r+0x7c2>
 800886e:	9b02      	ldr	r3, [sp, #8]
 8008870:	2b00      	cmp	r3, #0
 8008872:	dc03      	bgt.n	800887c <_dtoa_r+0xb3c>
 8008874:	9b06      	ldr	r3, [sp, #24]
 8008876:	2b02      	cmp	r3, #2
 8008878:	f73f aecc 	bgt.w	8008614 <_dtoa_r+0x8d4>
 800887c:	465d      	mov	r5, fp
 800887e:	4639      	mov	r1, r7
 8008880:	9804      	ldr	r0, [sp, #16]
 8008882:	f7ff f9d1 	bl	8007c28 <quorem>
 8008886:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800888a:	f805 8b01 	strb.w	r8, [r5], #1
 800888e:	9a02      	ldr	r2, [sp, #8]
 8008890:	eba5 030b 	sub.w	r3, r5, fp
 8008894:	429a      	cmp	r2, r3
 8008896:	ddb0      	ble.n	80087fa <_dtoa_r+0xaba>
 8008898:	2300      	movs	r3, #0
 800889a:	220a      	movs	r2, #10
 800889c:	9904      	ldr	r1, [sp, #16]
 800889e:	4620      	mov	r0, r4
 80088a0:	f7fe fe93 	bl	80075ca <__multadd>
 80088a4:	9004      	str	r0, [sp, #16]
 80088a6:	e7ea      	b.n	800887e <_dtoa_r+0xb3e>
 80088a8:	08009ae9 	.word	0x08009ae9
 80088ac:	08009adc 	.word	0x08009adc

080088b0 <malloc>:
 80088b0:	4b02      	ldr	r3, [pc, #8]	; (80088bc <malloc+0xc>)
 80088b2:	4601      	mov	r1, r0
 80088b4:	6818      	ldr	r0, [r3, #0]
 80088b6:	f7ff b945 	b.w	8007b44 <_malloc_r>
 80088ba:	bf00      	nop
 80088bc:	2000000c 	.word	0x2000000c

080088c0 <memcpy>:
 80088c0:	b510      	push	{r4, lr}
 80088c2:	1e43      	subs	r3, r0, #1
 80088c4:	440a      	add	r2, r1
 80088c6:	4291      	cmp	r1, r2
 80088c8:	d100      	bne.n	80088cc <memcpy+0xc>
 80088ca:	bd10      	pop	{r4, pc}
 80088cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088d4:	e7f7      	b.n	80088c6 <memcpy+0x6>

080088d6 <__malloc_lock>:
 80088d6:	4770      	bx	lr

080088d8 <__malloc_unlock>:
 80088d8:	4770      	bx	lr
	...

080088dc <pow>:
 80088dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e0:	ed2d 8b04 	vpush	{d8-d9}
 80088e4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8008bb8 <pow+0x2dc>
 80088e8:	b08d      	sub	sp, #52	; 0x34
 80088ea:	ec57 6b10 	vmov	r6, r7, d0
 80088ee:	ec55 4b11 	vmov	r4, r5, d1
 80088f2:	f000 f965 	bl	8008bc0 <__ieee754_pow>
 80088f6:	f999 3000 	ldrsb.w	r3, [r9]
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	3301      	adds	r3, #1
 80088fe:	eeb0 8a40 	vmov.f32	s16, s0
 8008902:	eef0 8a60 	vmov.f32	s17, s1
 8008906:	46c8      	mov	r8, r9
 8008908:	d05f      	beq.n	80089ca <pow+0xee>
 800890a:	4622      	mov	r2, r4
 800890c:	462b      	mov	r3, r5
 800890e:	4620      	mov	r0, r4
 8008910:	4629      	mov	r1, r5
 8008912:	f7f8 f8bf 	bl	8000a94 <__aeabi_dcmpun>
 8008916:	4683      	mov	fp, r0
 8008918:	2800      	cmp	r0, #0
 800891a:	d156      	bne.n	80089ca <pow+0xee>
 800891c:	4632      	mov	r2, r6
 800891e:	463b      	mov	r3, r7
 8008920:	4630      	mov	r0, r6
 8008922:	4639      	mov	r1, r7
 8008924:	f7f8 f8b6 	bl	8000a94 <__aeabi_dcmpun>
 8008928:	9001      	str	r0, [sp, #4]
 800892a:	b1e8      	cbz	r0, 8008968 <pow+0x8c>
 800892c:	2200      	movs	r2, #0
 800892e:	2300      	movs	r3, #0
 8008930:	4620      	mov	r0, r4
 8008932:	4629      	mov	r1, r5
 8008934:	f7f8 f87c 	bl	8000a30 <__aeabi_dcmpeq>
 8008938:	2800      	cmp	r0, #0
 800893a:	d046      	beq.n	80089ca <pow+0xee>
 800893c:	2301      	movs	r3, #1
 800893e:	9302      	str	r3, [sp, #8]
 8008940:	4b96      	ldr	r3, [pc, #600]	; (8008b9c <pow+0x2c0>)
 8008942:	9303      	str	r3, [sp, #12]
 8008944:	4b96      	ldr	r3, [pc, #600]	; (8008ba0 <pow+0x2c4>)
 8008946:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800894a:	2200      	movs	r2, #0
 800894c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008950:	9b00      	ldr	r3, [sp, #0]
 8008952:	2b02      	cmp	r3, #2
 8008954:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008958:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800895c:	d033      	beq.n	80089c6 <pow+0xea>
 800895e:	a802      	add	r0, sp, #8
 8008960:	f000 fefd 	bl	800975e <matherr>
 8008964:	bb48      	cbnz	r0, 80089ba <pow+0xde>
 8008966:	e05d      	b.n	8008a24 <pow+0x148>
 8008968:	f04f 0a00 	mov.w	sl, #0
 800896c:	f04f 0b00 	mov.w	fp, #0
 8008970:	4652      	mov	r2, sl
 8008972:	465b      	mov	r3, fp
 8008974:	4630      	mov	r0, r6
 8008976:	4639      	mov	r1, r7
 8008978:	f7f8 f85a 	bl	8000a30 <__aeabi_dcmpeq>
 800897c:	ec4b ab19 	vmov	d9, sl, fp
 8008980:	2800      	cmp	r0, #0
 8008982:	d054      	beq.n	8008a2e <pow+0x152>
 8008984:	4652      	mov	r2, sl
 8008986:	465b      	mov	r3, fp
 8008988:	4620      	mov	r0, r4
 800898a:	4629      	mov	r1, r5
 800898c:	f7f8 f850 	bl	8000a30 <__aeabi_dcmpeq>
 8008990:	4680      	mov	r8, r0
 8008992:	b318      	cbz	r0, 80089dc <pow+0x100>
 8008994:	2301      	movs	r3, #1
 8008996:	9302      	str	r3, [sp, #8]
 8008998:	4b80      	ldr	r3, [pc, #512]	; (8008b9c <pow+0x2c0>)
 800899a:	9303      	str	r3, [sp, #12]
 800899c:	9b01      	ldr	r3, [sp, #4]
 800899e:	930a      	str	r3, [sp, #40]	; 0x28
 80089a0:	9b00      	ldr	r3, [sp, #0]
 80089a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80089a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80089aa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d0d5      	beq.n	800895e <pow+0x82>
 80089b2:	4b7b      	ldr	r3, [pc, #492]	; (8008ba0 <pow+0x2c4>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80089ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089bc:	b11b      	cbz	r3, 80089c6 <pow+0xea>
 80089be:	f7fe fc37 	bl	8007230 <__errno>
 80089c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089c4:	6003      	str	r3, [r0, #0]
 80089c6:	ed9d 8b08 	vldr	d8, [sp, #32]
 80089ca:	eeb0 0a48 	vmov.f32	s0, s16
 80089ce:	eef0 0a68 	vmov.f32	s1, s17
 80089d2:	b00d      	add	sp, #52	; 0x34
 80089d4:	ecbd 8b04 	vpop	{d8-d9}
 80089d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089dc:	ec45 4b10 	vmov	d0, r4, r5
 80089e0:	f000 feb5 	bl	800974e <finite>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	d0f0      	beq.n	80089ca <pow+0xee>
 80089e8:	4652      	mov	r2, sl
 80089ea:	465b      	mov	r3, fp
 80089ec:	4620      	mov	r0, r4
 80089ee:	4629      	mov	r1, r5
 80089f0:	f7f8 f828 	bl	8000a44 <__aeabi_dcmplt>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d0e8      	beq.n	80089ca <pow+0xee>
 80089f8:	2301      	movs	r3, #1
 80089fa:	9302      	str	r3, [sp, #8]
 80089fc:	4b67      	ldr	r3, [pc, #412]	; (8008b9c <pow+0x2c0>)
 80089fe:	9303      	str	r3, [sp, #12]
 8008a00:	f999 3000 	ldrsb.w	r3, [r9]
 8008a04:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8008a08:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008a0c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008a10:	b913      	cbnz	r3, 8008a18 <pow+0x13c>
 8008a12:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008a16:	e7a2      	b.n	800895e <pow+0x82>
 8008a18:	4962      	ldr	r1, [pc, #392]	; (8008ba4 <pow+0x2c8>)
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d19c      	bne.n	800895e <pow+0x82>
 8008a24:	f7fe fc04 	bl	8007230 <__errno>
 8008a28:	2321      	movs	r3, #33	; 0x21
 8008a2a:	6003      	str	r3, [r0, #0]
 8008a2c:	e7c5      	b.n	80089ba <pow+0xde>
 8008a2e:	eeb0 0a48 	vmov.f32	s0, s16
 8008a32:	eef0 0a68 	vmov.f32	s1, s17
 8008a36:	f000 fe8a 	bl	800974e <finite>
 8008a3a:	9000      	str	r0, [sp, #0]
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	f040 8081 	bne.w	8008b44 <pow+0x268>
 8008a42:	ec47 6b10 	vmov	d0, r6, r7
 8008a46:	f000 fe82 	bl	800974e <finite>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d07a      	beq.n	8008b44 <pow+0x268>
 8008a4e:	ec45 4b10 	vmov	d0, r4, r5
 8008a52:	f000 fe7c 	bl	800974e <finite>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d074      	beq.n	8008b44 <pow+0x268>
 8008a5a:	ec53 2b18 	vmov	r2, r3, d8
 8008a5e:	ee18 0a10 	vmov	r0, s16
 8008a62:	4619      	mov	r1, r3
 8008a64:	f7f8 f816 	bl	8000a94 <__aeabi_dcmpun>
 8008a68:	f999 9000 	ldrsb.w	r9, [r9]
 8008a6c:	4b4b      	ldr	r3, [pc, #300]	; (8008b9c <pow+0x2c0>)
 8008a6e:	b1b0      	cbz	r0, 8008a9e <pow+0x1c2>
 8008a70:	2201      	movs	r2, #1
 8008a72:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a76:	9b00      	ldr	r3, [sp, #0]
 8008a78:	930a      	str	r3, [sp, #40]	; 0x28
 8008a7a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008a7e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008a82:	f1b9 0f00 	cmp.w	r9, #0
 8008a86:	d0c4      	beq.n	8008a12 <pow+0x136>
 8008a88:	4652      	mov	r2, sl
 8008a8a:	465b      	mov	r3, fp
 8008a8c:	4650      	mov	r0, sl
 8008a8e:	4659      	mov	r1, fp
 8008a90:	f7f7 fe90 	bl	80007b4 <__aeabi_ddiv>
 8008a94:	f1b9 0f02 	cmp.w	r9, #2
 8008a98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008a9c:	e7c1      	b.n	8008a22 <pow+0x146>
 8008a9e:	2203      	movs	r2, #3
 8008aa0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008aa4:	900a      	str	r0, [sp, #40]	; 0x28
 8008aa6:	4629      	mov	r1, r5
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	2200      	movs	r2, #0
 8008aac:	4b3e      	ldr	r3, [pc, #248]	; (8008ba8 <pow+0x2cc>)
 8008aae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008ab2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008ab6:	f7f7 fd53 	bl	8000560 <__aeabi_dmul>
 8008aba:	4604      	mov	r4, r0
 8008abc:	460d      	mov	r5, r1
 8008abe:	f1b9 0f00 	cmp.w	r9, #0
 8008ac2:	d124      	bne.n	8008b0e <pow+0x232>
 8008ac4:	4b39      	ldr	r3, [pc, #228]	; (8008bac <pow+0x2d0>)
 8008ac6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008aca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008ace:	4630      	mov	r0, r6
 8008ad0:	4652      	mov	r2, sl
 8008ad2:	465b      	mov	r3, fp
 8008ad4:	4639      	mov	r1, r7
 8008ad6:	f7f7 ffb5 	bl	8000a44 <__aeabi_dcmplt>
 8008ada:	2800      	cmp	r0, #0
 8008adc:	d056      	beq.n	8008b8c <pow+0x2b0>
 8008ade:	ec45 4b10 	vmov	d0, r4, r5
 8008ae2:	f000 fe49 	bl	8009778 <rint>
 8008ae6:	4622      	mov	r2, r4
 8008ae8:	462b      	mov	r3, r5
 8008aea:	ec51 0b10 	vmov	r0, r1, d0
 8008aee:	f7f7 ff9f 	bl	8000a30 <__aeabi_dcmpeq>
 8008af2:	b920      	cbnz	r0, 8008afe <pow+0x222>
 8008af4:	4b2e      	ldr	r3, [pc, #184]	; (8008bb0 <pow+0x2d4>)
 8008af6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008afa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008afe:	f998 3000 	ldrsb.w	r3, [r8]
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d142      	bne.n	8008b8c <pow+0x2b0>
 8008b06:	f7fe fb93 	bl	8007230 <__errno>
 8008b0a:	2322      	movs	r3, #34	; 0x22
 8008b0c:	e78d      	b.n	8008a2a <pow+0x14e>
 8008b0e:	4b29      	ldr	r3, [pc, #164]	; (8008bb4 <pow+0x2d8>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008b16:	4630      	mov	r0, r6
 8008b18:	4652      	mov	r2, sl
 8008b1a:	465b      	mov	r3, fp
 8008b1c:	4639      	mov	r1, r7
 8008b1e:	f7f7 ff91 	bl	8000a44 <__aeabi_dcmplt>
 8008b22:	2800      	cmp	r0, #0
 8008b24:	d0eb      	beq.n	8008afe <pow+0x222>
 8008b26:	ec45 4b10 	vmov	d0, r4, r5
 8008b2a:	f000 fe25 	bl	8009778 <rint>
 8008b2e:	4622      	mov	r2, r4
 8008b30:	462b      	mov	r3, r5
 8008b32:	ec51 0b10 	vmov	r0, r1, d0
 8008b36:	f7f7 ff7b 	bl	8000a30 <__aeabi_dcmpeq>
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	d1df      	bne.n	8008afe <pow+0x222>
 8008b3e:	2200      	movs	r2, #0
 8008b40:	4b18      	ldr	r3, [pc, #96]	; (8008ba4 <pow+0x2c8>)
 8008b42:	e7da      	b.n	8008afa <pow+0x21e>
 8008b44:	2200      	movs	r2, #0
 8008b46:	2300      	movs	r3, #0
 8008b48:	ec51 0b18 	vmov	r0, r1, d8
 8008b4c:	f7f7 ff70 	bl	8000a30 <__aeabi_dcmpeq>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	f43f af3a 	beq.w	80089ca <pow+0xee>
 8008b56:	ec47 6b10 	vmov	d0, r6, r7
 8008b5a:	f000 fdf8 	bl	800974e <finite>
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	f43f af33 	beq.w	80089ca <pow+0xee>
 8008b64:	ec45 4b10 	vmov	d0, r4, r5
 8008b68:	f000 fdf1 	bl	800974e <finite>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	f43f af2c 	beq.w	80089ca <pow+0xee>
 8008b72:	2304      	movs	r3, #4
 8008b74:	9302      	str	r3, [sp, #8]
 8008b76:	4b09      	ldr	r3, [pc, #36]	; (8008b9c <pow+0x2c0>)
 8008b78:	9303      	str	r3, [sp, #12]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	930a      	str	r3, [sp, #40]	; 0x28
 8008b7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008b82:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008b86:	ed8d 9b08 	vstr	d9, [sp, #32]
 8008b8a:	e7b8      	b.n	8008afe <pow+0x222>
 8008b8c:	a802      	add	r0, sp, #8
 8008b8e:	f000 fde6 	bl	800975e <matherr>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	f47f af11 	bne.w	80089ba <pow+0xde>
 8008b98:	e7b5      	b.n	8008b06 <pow+0x22a>
 8008b9a:	bf00      	nop
 8008b9c:	08009aeb 	.word	0x08009aeb
 8008ba0:	3ff00000 	.word	0x3ff00000
 8008ba4:	fff00000 	.word	0xfff00000
 8008ba8:	3fe00000 	.word	0x3fe00000
 8008bac:	47efffff 	.word	0x47efffff
 8008bb0:	c7efffff 	.word	0xc7efffff
 8008bb4:	7ff00000 	.word	0x7ff00000
 8008bb8:	20000070 	.word	0x20000070
 8008bbc:	00000000 	.word	0x00000000

08008bc0 <__ieee754_pow>:
 8008bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc4:	b091      	sub	sp, #68	; 0x44
 8008bc6:	ed8d 1b00 	vstr	d1, [sp]
 8008bca:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008bce:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008bd2:	ea58 0302 	orrs.w	r3, r8, r2
 8008bd6:	ec57 6b10 	vmov	r6, r7, d0
 8008bda:	f000 84be 	beq.w	800955a <__ieee754_pow+0x99a>
 8008bde:	4b7a      	ldr	r3, [pc, #488]	; (8008dc8 <__ieee754_pow+0x208>)
 8008be0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008be4:	429c      	cmp	r4, r3
 8008be6:	463d      	mov	r5, r7
 8008be8:	ee10 aa10 	vmov	sl, s0
 8008bec:	dc09      	bgt.n	8008c02 <__ieee754_pow+0x42>
 8008bee:	d103      	bne.n	8008bf8 <__ieee754_pow+0x38>
 8008bf0:	b93e      	cbnz	r6, 8008c02 <__ieee754_pow+0x42>
 8008bf2:	45a0      	cmp	r8, r4
 8008bf4:	dc0d      	bgt.n	8008c12 <__ieee754_pow+0x52>
 8008bf6:	e001      	b.n	8008bfc <__ieee754_pow+0x3c>
 8008bf8:	4598      	cmp	r8, r3
 8008bfa:	dc02      	bgt.n	8008c02 <__ieee754_pow+0x42>
 8008bfc:	4598      	cmp	r8, r3
 8008bfe:	d10e      	bne.n	8008c1e <__ieee754_pow+0x5e>
 8008c00:	b16a      	cbz	r2, 8008c1e <__ieee754_pow+0x5e>
 8008c02:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008c06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008c0a:	ea54 030a 	orrs.w	r3, r4, sl
 8008c0e:	f000 84a4 	beq.w	800955a <__ieee754_pow+0x99a>
 8008c12:	486e      	ldr	r0, [pc, #440]	; (8008dcc <__ieee754_pow+0x20c>)
 8008c14:	b011      	add	sp, #68	; 0x44
 8008c16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1a:	f000 bda5 	b.w	8009768 <nan>
 8008c1e:	2d00      	cmp	r5, #0
 8008c20:	da53      	bge.n	8008cca <__ieee754_pow+0x10a>
 8008c22:	4b6b      	ldr	r3, [pc, #428]	; (8008dd0 <__ieee754_pow+0x210>)
 8008c24:	4598      	cmp	r8, r3
 8008c26:	dc4d      	bgt.n	8008cc4 <__ieee754_pow+0x104>
 8008c28:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008c2c:	4598      	cmp	r8, r3
 8008c2e:	dd4c      	ble.n	8008cca <__ieee754_pow+0x10a>
 8008c30:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008c34:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008c38:	2b14      	cmp	r3, #20
 8008c3a:	dd26      	ble.n	8008c8a <__ieee754_pow+0xca>
 8008c3c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008c40:	fa22 f103 	lsr.w	r1, r2, r3
 8008c44:	fa01 f303 	lsl.w	r3, r1, r3
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d13e      	bne.n	8008cca <__ieee754_pow+0x10a>
 8008c4c:	f001 0101 	and.w	r1, r1, #1
 8008c50:	f1c1 0b02 	rsb	fp, r1, #2
 8008c54:	2a00      	cmp	r2, #0
 8008c56:	d15b      	bne.n	8008d10 <__ieee754_pow+0x150>
 8008c58:	4b5b      	ldr	r3, [pc, #364]	; (8008dc8 <__ieee754_pow+0x208>)
 8008c5a:	4598      	cmp	r8, r3
 8008c5c:	d124      	bne.n	8008ca8 <__ieee754_pow+0xe8>
 8008c5e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008c62:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008c66:	ea53 030a 	orrs.w	r3, r3, sl
 8008c6a:	f000 8476 	beq.w	800955a <__ieee754_pow+0x99a>
 8008c6e:	4b59      	ldr	r3, [pc, #356]	; (8008dd4 <__ieee754_pow+0x214>)
 8008c70:	429c      	cmp	r4, r3
 8008c72:	dd2d      	ble.n	8008cd0 <__ieee754_pow+0x110>
 8008c74:	f1b9 0f00 	cmp.w	r9, #0
 8008c78:	f280 8473 	bge.w	8009562 <__ieee754_pow+0x9a2>
 8008c7c:	2000      	movs	r0, #0
 8008c7e:	2100      	movs	r1, #0
 8008c80:	ec41 0b10 	vmov	d0, r0, r1
 8008c84:	b011      	add	sp, #68	; 0x44
 8008c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c8a:	2a00      	cmp	r2, #0
 8008c8c:	d13e      	bne.n	8008d0c <__ieee754_pow+0x14c>
 8008c8e:	f1c3 0314 	rsb	r3, r3, #20
 8008c92:	fa48 f103 	asr.w	r1, r8, r3
 8008c96:	fa01 f303 	lsl.w	r3, r1, r3
 8008c9a:	4543      	cmp	r3, r8
 8008c9c:	f040 8469 	bne.w	8009572 <__ieee754_pow+0x9b2>
 8008ca0:	f001 0101 	and.w	r1, r1, #1
 8008ca4:	f1c1 0b02 	rsb	fp, r1, #2
 8008ca8:	4b4b      	ldr	r3, [pc, #300]	; (8008dd8 <__ieee754_pow+0x218>)
 8008caa:	4598      	cmp	r8, r3
 8008cac:	d118      	bne.n	8008ce0 <__ieee754_pow+0x120>
 8008cae:	f1b9 0f00 	cmp.w	r9, #0
 8008cb2:	f280 845a 	bge.w	800956a <__ieee754_pow+0x9aa>
 8008cb6:	4948      	ldr	r1, [pc, #288]	; (8008dd8 <__ieee754_pow+0x218>)
 8008cb8:	4632      	mov	r2, r6
 8008cba:	463b      	mov	r3, r7
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	f7f7 fd79 	bl	80007b4 <__aeabi_ddiv>
 8008cc2:	e7dd      	b.n	8008c80 <__ieee754_pow+0xc0>
 8008cc4:	f04f 0b02 	mov.w	fp, #2
 8008cc8:	e7c4      	b.n	8008c54 <__ieee754_pow+0x94>
 8008cca:	f04f 0b00 	mov.w	fp, #0
 8008cce:	e7c1      	b.n	8008c54 <__ieee754_pow+0x94>
 8008cd0:	f1b9 0f00 	cmp.w	r9, #0
 8008cd4:	dad2      	bge.n	8008c7c <__ieee754_pow+0xbc>
 8008cd6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008cda:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008cde:	e7cf      	b.n	8008c80 <__ieee754_pow+0xc0>
 8008ce0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008ce4:	d106      	bne.n	8008cf4 <__ieee754_pow+0x134>
 8008ce6:	4632      	mov	r2, r6
 8008ce8:	463b      	mov	r3, r7
 8008cea:	4610      	mov	r0, r2
 8008cec:	4619      	mov	r1, r3
 8008cee:	f7f7 fc37 	bl	8000560 <__aeabi_dmul>
 8008cf2:	e7c5      	b.n	8008c80 <__ieee754_pow+0xc0>
 8008cf4:	4b39      	ldr	r3, [pc, #228]	; (8008ddc <__ieee754_pow+0x21c>)
 8008cf6:	4599      	cmp	r9, r3
 8008cf8:	d10a      	bne.n	8008d10 <__ieee754_pow+0x150>
 8008cfa:	2d00      	cmp	r5, #0
 8008cfc:	db08      	blt.n	8008d10 <__ieee754_pow+0x150>
 8008cfe:	ec47 6b10 	vmov	d0, r6, r7
 8008d02:	b011      	add	sp, #68	; 0x44
 8008d04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d08:	f000 bc68 	b.w	80095dc <__ieee754_sqrt>
 8008d0c:	f04f 0b00 	mov.w	fp, #0
 8008d10:	ec47 6b10 	vmov	d0, r6, r7
 8008d14:	f000 fd12 	bl	800973c <fabs>
 8008d18:	ec51 0b10 	vmov	r0, r1, d0
 8008d1c:	f1ba 0f00 	cmp.w	sl, #0
 8008d20:	d127      	bne.n	8008d72 <__ieee754_pow+0x1b2>
 8008d22:	b124      	cbz	r4, 8008d2e <__ieee754_pow+0x16e>
 8008d24:	4b2c      	ldr	r3, [pc, #176]	; (8008dd8 <__ieee754_pow+0x218>)
 8008d26:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d121      	bne.n	8008d72 <__ieee754_pow+0x1b2>
 8008d2e:	f1b9 0f00 	cmp.w	r9, #0
 8008d32:	da05      	bge.n	8008d40 <__ieee754_pow+0x180>
 8008d34:	4602      	mov	r2, r0
 8008d36:	460b      	mov	r3, r1
 8008d38:	2000      	movs	r0, #0
 8008d3a:	4927      	ldr	r1, [pc, #156]	; (8008dd8 <__ieee754_pow+0x218>)
 8008d3c:	f7f7 fd3a 	bl	80007b4 <__aeabi_ddiv>
 8008d40:	2d00      	cmp	r5, #0
 8008d42:	da9d      	bge.n	8008c80 <__ieee754_pow+0xc0>
 8008d44:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008d48:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008d4c:	ea54 030b 	orrs.w	r3, r4, fp
 8008d50:	d108      	bne.n	8008d64 <__ieee754_pow+0x1a4>
 8008d52:	4602      	mov	r2, r0
 8008d54:	460b      	mov	r3, r1
 8008d56:	4610      	mov	r0, r2
 8008d58:	4619      	mov	r1, r3
 8008d5a:	f7f7 fa49 	bl	80001f0 <__aeabi_dsub>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	e7ac      	b.n	8008cbe <__ieee754_pow+0xfe>
 8008d64:	f1bb 0f01 	cmp.w	fp, #1
 8008d68:	d18a      	bne.n	8008c80 <__ieee754_pow+0xc0>
 8008d6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d6e:	4619      	mov	r1, r3
 8008d70:	e786      	b.n	8008c80 <__ieee754_pow+0xc0>
 8008d72:	0fed      	lsrs	r5, r5, #31
 8008d74:	1e6b      	subs	r3, r5, #1
 8008d76:	930d      	str	r3, [sp, #52]	; 0x34
 8008d78:	ea5b 0303 	orrs.w	r3, fp, r3
 8008d7c:	d102      	bne.n	8008d84 <__ieee754_pow+0x1c4>
 8008d7e:	4632      	mov	r2, r6
 8008d80:	463b      	mov	r3, r7
 8008d82:	e7e8      	b.n	8008d56 <__ieee754_pow+0x196>
 8008d84:	4b16      	ldr	r3, [pc, #88]	; (8008de0 <__ieee754_pow+0x220>)
 8008d86:	4598      	cmp	r8, r3
 8008d88:	f340 80fe 	ble.w	8008f88 <__ieee754_pow+0x3c8>
 8008d8c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008d90:	4598      	cmp	r8, r3
 8008d92:	dd0a      	ble.n	8008daa <__ieee754_pow+0x1ea>
 8008d94:	4b0f      	ldr	r3, [pc, #60]	; (8008dd4 <__ieee754_pow+0x214>)
 8008d96:	429c      	cmp	r4, r3
 8008d98:	dc0d      	bgt.n	8008db6 <__ieee754_pow+0x1f6>
 8008d9a:	f1b9 0f00 	cmp.w	r9, #0
 8008d9e:	f6bf af6d 	bge.w	8008c7c <__ieee754_pow+0xbc>
 8008da2:	a307      	add	r3, pc, #28	; (adr r3, 8008dc0 <__ieee754_pow+0x200>)
 8008da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da8:	e79f      	b.n	8008cea <__ieee754_pow+0x12a>
 8008daa:	4b0e      	ldr	r3, [pc, #56]	; (8008de4 <__ieee754_pow+0x224>)
 8008dac:	429c      	cmp	r4, r3
 8008dae:	ddf4      	ble.n	8008d9a <__ieee754_pow+0x1da>
 8008db0:	4b09      	ldr	r3, [pc, #36]	; (8008dd8 <__ieee754_pow+0x218>)
 8008db2:	429c      	cmp	r4, r3
 8008db4:	dd18      	ble.n	8008de8 <__ieee754_pow+0x228>
 8008db6:	f1b9 0f00 	cmp.w	r9, #0
 8008dba:	dcf2      	bgt.n	8008da2 <__ieee754_pow+0x1e2>
 8008dbc:	e75e      	b.n	8008c7c <__ieee754_pow+0xbc>
 8008dbe:	bf00      	nop
 8008dc0:	8800759c 	.word	0x8800759c
 8008dc4:	7e37e43c 	.word	0x7e37e43c
 8008dc8:	7ff00000 	.word	0x7ff00000
 8008dcc:	08009aea 	.word	0x08009aea
 8008dd0:	433fffff 	.word	0x433fffff
 8008dd4:	3fefffff 	.word	0x3fefffff
 8008dd8:	3ff00000 	.word	0x3ff00000
 8008ddc:	3fe00000 	.word	0x3fe00000
 8008de0:	41e00000 	.word	0x41e00000
 8008de4:	3feffffe 	.word	0x3feffffe
 8008de8:	2200      	movs	r2, #0
 8008dea:	4b63      	ldr	r3, [pc, #396]	; (8008f78 <__ieee754_pow+0x3b8>)
 8008dec:	f7f7 fa00 	bl	80001f0 <__aeabi_dsub>
 8008df0:	a355      	add	r3, pc, #340	; (adr r3, 8008f48 <__ieee754_pow+0x388>)
 8008df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df6:	4604      	mov	r4, r0
 8008df8:	460d      	mov	r5, r1
 8008dfa:	f7f7 fbb1 	bl	8000560 <__aeabi_dmul>
 8008dfe:	a354      	add	r3, pc, #336	; (adr r3, 8008f50 <__ieee754_pow+0x390>)
 8008e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e04:	4606      	mov	r6, r0
 8008e06:	460f      	mov	r7, r1
 8008e08:	4620      	mov	r0, r4
 8008e0a:	4629      	mov	r1, r5
 8008e0c:	f7f7 fba8 	bl	8000560 <__aeabi_dmul>
 8008e10:	2200      	movs	r2, #0
 8008e12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e16:	4b59      	ldr	r3, [pc, #356]	; (8008f7c <__ieee754_pow+0x3bc>)
 8008e18:	4620      	mov	r0, r4
 8008e1a:	4629      	mov	r1, r5
 8008e1c:	f7f7 fba0 	bl	8000560 <__aeabi_dmul>
 8008e20:	4602      	mov	r2, r0
 8008e22:	460b      	mov	r3, r1
 8008e24:	a14c      	add	r1, pc, #304	; (adr r1, 8008f58 <__ieee754_pow+0x398>)
 8008e26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e2a:	f7f7 f9e1 	bl	80001f0 <__aeabi_dsub>
 8008e2e:	4622      	mov	r2, r4
 8008e30:	462b      	mov	r3, r5
 8008e32:	f7f7 fb95 	bl	8000560 <__aeabi_dmul>
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	2000      	movs	r0, #0
 8008e3c:	4950      	ldr	r1, [pc, #320]	; (8008f80 <__ieee754_pow+0x3c0>)
 8008e3e:	f7f7 f9d7 	bl	80001f0 <__aeabi_dsub>
 8008e42:	4622      	mov	r2, r4
 8008e44:	462b      	mov	r3, r5
 8008e46:	4680      	mov	r8, r0
 8008e48:	4689      	mov	r9, r1
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	f7f7 fb87 	bl	8000560 <__aeabi_dmul>
 8008e52:	4602      	mov	r2, r0
 8008e54:	460b      	mov	r3, r1
 8008e56:	4640      	mov	r0, r8
 8008e58:	4649      	mov	r1, r9
 8008e5a:	f7f7 fb81 	bl	8000560 <__aeabi_dmul>
 8008e5e:	a340      	add	r3, pc, #256	; (adr r3, 8008f60 <__ieee754_pow+0x3a0>)
 8008e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e64:	f7f7 fb7c 	bl	8000560 <__aeabi_dmul>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e70:	f7f7 f9be 	bl	80001f0 <__aeabi_dsub>
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	4604      	mov	r4, r0
 8008e7a:	460d      	mov	r5, r1
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	4639      	mov	r1, r7
 8008e80:	f7f7 f9b8 	bl	80001f4 <__adddf3>
 8008e84:	2000      	movs	r0, #0
 8008e86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e8a:	4632      	mov	r2, r6
 8008e8c:	463b      	mov	r3, r7
 8008e8e:	f7f7 f9af 	bl	80001f0 <__aeabi_dsub>
 8008e92:	4602      	mov	r2, r0
 8008e94:	460b      	mov	r3, r1
 8008e96:	4620      	mov	r0, r4
 8008e98:	4629      	mov	r1, r5
 8008e9a:	f7f7 f9a9 	bl	80001f0 <__aeabi_dsub>
 8008e9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ea0:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	4606      	mov	r6, r0
 8008ea8:	460f      	mov	r7, r1
 8008eaa:	f040 81eb 	bne.w	8009284 <__ieee754_pow+0x6c4>
 8008eae:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008f68 <__ieee754_pow+0x3a8>
 8008eb2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008eb6:	2400      	movs	r4, #0
 8008eb8:	4622      	mov	r2, r4
 8008eba:	462b      	mov	r3, r5
 8008ebc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ec0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008ec4:	f7f7 f994 	bl	80001f0 <__aeabi_dsub>
 8008ec8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ecc:	f7f7 fb48 	bl	8000560 <__aeabi_dmul>
 8008ed0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ed4:	4680      	mov	r8, r0
 8008ed6:	4689      	mov	r9, r1
 8008ed8:	4630      	mov	r0, r6
 8008eda:	4639      	mov	r1, r7
 8008edc:	f7f7 fb40 	bl	8000560 <__aeabi_dmul>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4640      	mov	r0, r8
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	f7f7 f984 	bl	80001f4 <__adddf3>
 8008eec:	4622      	mov	r2, r4
 8008eee:	462b      	mov	r3, r5
 8008ef0:	4680      	mov	r8, r0
 8008ef2:	4689      	mov	r9, r1
 8008ef4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ef8:	f7f7 fb32 	bl	8000560 <__aeabi_dmul>
 8008efc:	460b      	mov	r3, r1
 8008efe:	4604      	mov	r4, r0
 8008f00:	460d      	mov	r5, r1
 8008f02:	4602      	mov	r2, r0
 8008f04:	4649      	mov	r1, r9
 8008f06:	4640      	mov	r0, r8
 8008f08:	e9cd 4500 	strd	r4, r5, [sp]
 8008f0c:	f7f7 f972 	bl	80001f4 <__adddf3>
 8008f10:	4b1c      	ldr	r3, [pc, #112]	; (8008f84 <__ieee754_pow+0x3c4>)
 8008f12:	4299      	cmp	r1, r3
 8008f14:	4606      	mov	r6, r0
 8008f16:	460f      	mov	r7, r1
 8008f18:	468b      	mov	fp, r1
 8008f1a:	f340 82f7 	ble.w	800950c <__ieee754_pow+0x94c>
 8008f1e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008f22:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008f26:	4303      	orrs	r3, r0
 8008f28:	f000 81ea 	beq.w	8009300 <__ieee754_pow+0x740>
 8008f2c:	a310      	add	r3, pc, #64	; (adr r3, 8008f70 <__ieee754_pow+0x3b0>)
 8008f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f36:	f7f7 fb13 	bl	8000560 <__aeabi_dmul>
 8008f3a:	a30d      	add	r3, pc, #52	; (adr r3, 8008f70 <__ieee754_pow+0x3b0>)
 8008f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f40:	e6d5      	b.n	8008cee <__ieee754_pow+0x12e>
 8008f42:	bf00      	nop
 8008f44:	f3af 8000 	nop.w
 8008f48:	60000000 	.word	0x60000000
 8008f4c:	3ff71547 	.word	0x3ff71547
 8008f50:	f85ddf44 	.word	0xf85ddf44
 8008f54:	3e54ae0b 	.word	0x3e54ae0b
 8008f58:	55555555 	.word	0x55555555
 8008f5c:	3fd55555 	.word	0x3fd55555
 8008f60:	652b82fe 	.word	0x652b82fe
 8008f64:	3ff71547 	.word	0x3ff71547
 8008f68:	00000000 	.word	0x00000000
 8008f6c:	bff00000 	.word	0xbff00000
 8008f70:	8800759c 	.word	0x8800759c
 8008f74:	7e37e43c 	.word	0x7e37e43c
 8008f78:	3ff00000 	.word	0x3ff00000
 8008f7c:	3fd00000 	.word	0x3fd00000
 8008f80:	3fe00000 	.word	0x3fe00000
 8008f84:	408fffff 	.word	0x408fffff
 8008f88:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008f8c:	f04f 0200 	mov.w	r2, #0
 8008f90:	da05      	bge.n	8008f9e <__ieee754_pow+0x3de>
 8008f92:	4bd3      	ldr	r3, [pc, #844]	; (80092e0 <__ieee754_pow+0x720>)
 8008f94:	f7f7 fae4 	bl	8000560 <__aeabi_dmul>
 8008f98:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008f9c:	460c      	mov	r4, r1
 8008f9e:	1523      	asrs	r3, r4, #20
 8008fa0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008fa4:	4413      	add	r3, r2
 8008fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fa8:	4bce      	ldr	r3, [pc, #824]	; (80092e4 <__ieee754_pow+0x724>)
 8008faa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008fae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008fb2:	429c      	cmp	r4, r3
 8008fb4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008fb8:	dd08      	ble.n	8008fcc <__ieee754_pow+0x40c>
 8008fba:	4bcb      	ldr	r3, [pc, #812]	; (80092e8 <__ieee754_pow+0x728>)
 8008fbc:	429c      	cmp	r4, r3
 8008fbe:	f340 815e 	ble.w	800927e <__ieee754_pow+0x6be>
 8008fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fc8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008fcc:	f04f 0a00 	mov.w	sl, #0
 8008fd0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008fd4:	930c      	str	r3, [sp, #48]	; 0x30
 8008fd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fd8:	4bc4      	ldr	r3, [pc, #784]	; (80092ec <__ieee754_pow+0x72c>)
 8008fda:	4413      	add	r3, r2
 8008fdc:	ed93 7b00 	vldr	d7, [r3]
 8008fe0:	4629      	mov	r1, r5
 8008fe2:	ec53 2b17 	vmov	r2, r3, d7
 8008fe6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008fea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008fee:	f7f7 f8ff 	bl	80001f0 <__aeabi_dsub>
 8008ff2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	460f      	mov	r7, r1
 8008ffa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ffe:	f7f7 f8f9 	bl	80001f4 <__adddf3>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	2000      	movs	r0, #0
 8009008:	49b9      	ldr	r1, [pc, #740]	; (80092f0 <__ieee754_pow+0x730>)
 800900a:	f7f7 fbd3 	bl	80007b4 <__aeabi_ddiv>
 800900e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009012:	4602      	mov	r2, r0
 8009014:	460b      	mov	r3, r1
 8009016:	4630      	mov	r0, r6
 8009018:	4639      	mov	r1, r7
 800901a:	f7f7 faa1 	bl	8000560 <__aeabi_dmul>
 800901e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009022:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009026:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800902a:	2300      	movs	r3, #0
 800902c:	9302      	str	r3, [sp, #8]
 800902e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009032:	106d      	asrs	r5, r5, #1
 8009034:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009038:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800903c:	2200      	movs	r2, #0
 800903e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009042:	4640      	mov	r0, r8
 8009044:	4649      	mov	r1, r9
 8009046:	4614      	mov	r4, r2
 8009048:	461d      	mov	r5, r3
 800904a:	f7f7 fa89 	bl	8000560 <__aeabi_dmul>
 800904e:	4602      	mov	r2, r0
 8009050:	460b      	mov	r3, r1
 8009052:	4630      	mov	r0, r6
 8009054:	4639      	mov	r1, r7
 8009056:	f7f7 f8cb 	bl	80001f0 <__aeabi_dsub>
 800905a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800905e:	4606      	mov	r6, r0
 8009060:	460f      	mov	r7, r1
 8009062:	4620      	mov	r0, r4
 8009064:	4629      	mov	r1, r5
 8009066:	f7f7 f8c3 	bl	80001f0 <__aeabi_dsub>
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009072:	f7f7 f8bd 	bl	80001f0 <__aeabi_dsub>
 8009076:	4642      	mov	r2, r8
 8009078:	464b      	mov	r3, r9
 800907a:	f7f7 fa71 	bl	8000560 <__aeabi_dmul>
 800907e:	4602      	mov	r2, r0
 8009080:	460b      	mov	r3, r1
 8009082:	4630      	mov	r0, r6
 8009084:	4639      	mov	r1, r7
 8009086:	f7f7 f8b3 	bl	80001f0 <__aeabi_dsub>
 800908a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800908e:	f7f7 fa67 	bl	8000560 <__aeabi_dmul>
 8009092:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009096:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800909a:	4610      	mov	r0, r2
 800909c:	4619      	mov	r1, r3
 800909e:	f7f7 fa5f 	bl	8000560 <__aeabi_dmul>
 80090a2:	a37b      	add	r3, pc, #492	; (adr r3, 8009290 <__ieee754_pow+0x6d0>)
 80090a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a8:	4604      	mov	r4, r0
 80090aa:	460d      	mov	r5, r1
 80090ac:	f7f7 fa58 	bl	8000560 <__aeabi_dmul>
 80090b0:	a379      	add	r3, pc, #484	; (adr r3, 8009298 <__ieee754_pow+0x6d8>)
 80090b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b6:	f7f7 f89d 	bl	80001f4 <__adddf3>
 80090ba:	4622      	mov	r2, r4
 80090bc:	462b      	mov	r3, r5
 80090be:	f7f7 fa4f 	bl	8000560 <__aeabi_dmul>
 80090c2:	a377      	add	r3, pc, #476	; (adr r3, 80092a0 <__ieee754_pow+0x6e0>)
 80090c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c8:	f7f7 f894 	bl	80001f4 <__adddf3>
 80090cc:	4622      	mov	r2, r4
 80090ce:	462b      	mov	r3, r5
 80090d0:	f7f7 fa46 	bl	8000560 <__aeabi_dmul>
 80090d4:	a374      	add	r3, pc, #464	; (adr r3, 80092a8 <__ieee754_pow+0x6e8>)
 80090d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090da:	f7f7 f88b 	bl	80001f4 <__adddf3>
 80090de:	4622      	mov	r2, r4
 80090e0:	462b      	mov	r3, r5
 80090e2:	f7f7 fa3d 	bl	8000560 <__aeabi_dmul>
 80090e6:	a372      	add	r3, pc, #456	; (adr r3, 80092b0 <__ieee754_pow+0x6f0>)
 80090e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ec:	f7f7 f882 	bl	80001f4 <__adddf3>
 80090f0:	4622      	mov	r2, r4
 80090f2:	462b      	mov	r3, r5
 80090f4:	f7f7 fa34 	bl	8000560 <__aeabi_dmul>
 80090f8:	a36f      	add	r3, pc, #444	; (adr r3, 80092b8 <__ieee754_pow+0x6f8>)
 80090fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fe:	f7f7 f879 	bl	80001f4 <__adddf3>
 8009102:	4622      	mov	r2, r4
 8009104:	4606      	mov	r6, r0
 8009106:	460f      	mov	r7, r1
 8009108:	462b      	mov	r3, r5
 800910a:	4620      	mov	r0, r4
 800910c:	4629      	mov	r1, r5
 800910e:	f7f7 fa27 	bl	8000560 <__aeabi_dmul>
 8009112:	4602      	mov	r2, r0
 8009114:	460b      	mov	r3, r1
 8009116:	4630      	mov	r0, r6
 8009118:	4639      	mov	r1, r7
 800911a:	f7f7 fa21 	bl	8000560 <__aeabi_dmul>
 800911e:	4642      	mov	r2, r8
 8009120:	4604      	mov	r4, r0
 8009122:	460d      	mov	r5, r1
 8009124:	464b      	mov	r3, r9
 8009126:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800912a:	f7f7 f863 	bl	80001f4 <__adddf3>
 800912e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009132:	f7f7 fa15 	bl	8000560 <__aeabi_dmul>
 8009136:	4622      	mov	r2, r4
 8009138:	462b      	mov	r3, r5
 800913a:	f7f7 f85b 	bl	80001f4 <__adddf3>
 800913e:	4642      	mov	r2, r8
 8009140:	4606      	mov	r6, r0
 8009142:	460f      	mov	r7, r1
 8009144:	464b      	mov	r3, r9
 8009146:	4640      	mov	r0, r8
 8009148:	4649      	mov	r1, r9
 800914a:	f7f7 fa09 	bl	8000560 <__aeabi_dmul>
 800914e:	2200      	movs	r2, #0
 8009150:	4b68      	ldr	r3, [pc, #416]	; (80092f4 <__ieee754_pow+0x734>)
 8009152:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009156:	f7f7 f84d 	bl	80001f4 <__adddf3>
 800915a:	4632      	mov	r2, r6
 800915c:	463b      	mov	r3, r7
 800915e:	f7f7 f849 	bl	80001f4 <__adddf3>
 8009162:	9802      	ldr	r0, [sp, #8]
 8009164:	460d      	mov	r5, r1
 8009166:	4604      	mov	r4, r0
 8009168:	4602      	mov	r2, r0
 800916a:	460b      	mov	r3, r1
 800916c:	4640      	mov	r0, r8
 800916e:	4649      	mov	r1, r9
 8009170:	f7f7 f9f6 	bl	8000560 <__aeabi_dmul>
 8009174:	2200      	movs	r2, #0
 8009176:	4680      	mov	r8, r0
 8009178:	4689      	mov	r9, r1
 800917a:	4b5e      	ldr	r3, [pc, #376]	; (80092f4 <__ieee754_pow+0x734>)
 800917c:	4620      	mov	r0, r4
 800917e:	4629      	mov	r1, r5
 8009180:	f7f7 f836 	bl	80001f0 <__aeabi_dsub>
 8009184:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009188:	f7f7 f832 	bl	80001f0 <__aeabi_dsub>
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	4630      	mov	r0, r6
 8009192:	4639      	mov	r1, r7
 8009194:	f7f7 f82c 	bl	80001f0 <__aeabi_dsub>
 8009198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800919c:	f7f7 f9e0 	bl	8000560 <__aeabi_dmul>
 80091a0:	4622      	mov	r2, r4
 80091a2:	4606      	mov	r6, r0
 80091a4:	460f      	mov	r7, r1
 80091a6:	462b      	mov	r3, r5
 80091a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091ac:	f7f7 f9d8 	bl	8000560 <__aeabi_dmul>
 80091b0:	4602      	mov	r2, r0
 80091b2:	460b      	mov	r3, r1
 80091b4:	4630      	mov	r0, r6
 80091b6:	4639      	mov	r1, r7
 80091b8:	f7f7 f81c 	bl	80001f4 <__adddf3>
 80091bc:	4606      	mov	r6, r0
 80091be:	460f      	mov	r7, r1
 80091c0:	4602      	mov	r2, r0
 80091c2:	460b      	mov	r3, r1
 80091c4:	4640      	mov	r0, r8
 80091c6:	4649      	mov	r1, r9
 80091c8:	f7f7 f814 	bl	80001f4 <__adddf3>
 80091cc:	9802      	ldr	r0, [sp, #8]
 80091ce:	a33c      	add	r3, pc, #240	; (adr r3, 80092c0 <__ieee754_pow+0x700>)
 80091d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d4:	4604      	mov	r4, r0
 80091d6:	460d      	mov	r5, r1
 80091d8:	f7f7 f9c2 	bl	8000560 <__aeabi_dmul>
 80091dc:	4642      	mov	r2, r8
 80091de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80091e2:	464b      	mov	r3, r9
 80091e4:	4620      	mov	r0, r4
 80091e6:	4629      	mov	r1, r5
 80091e8:	f7f7 f802 	bl	80001f0 <__aeabi_dsub>
 80091ec:	4602      	mov	r2, r0
 80091ee:	460b      	mov	r3, r1
 80091f0:	4630      	mov	r0, r6
 80091f2:	4639      	mov	r1, r7
 80091f4:	f7f6 fffc 	bl	80001f0 <__aeabi_dsub>
 80091f8:	a333      	add	r3, pc, #204	; (adr r3, 80092c8 <__ieee754_pow+0x708>)
 80091fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fe:	f7f7 f9af 	bl	8000560 <__aeabi_dmul>
 8009202:	a333      	add	r3, pc, #204	; (adr r3, 80092d0 <__ieee754_pow+0x710>)
 8009204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009208:	4606      	mov	r6, r0
 800920a:	460f      	mov	r7, r1
 800920c:	4620      	mov	r0, r4
 800920e:	4629      	mov	r1, r5
 8009210:	f7f7 f9a6 	bl	8000560 <__aeabi_dmul>
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	4630      	mov	r0, r6
 800921a:	4639      	mov	r1, r7
 800921c:	f7f6 ffea 	bl	80001f4 <__adddf3>
 8009220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009222:	4b35      	ldr	r3, [pc, #212]	; (80092f8 <__ieee754_pow+0x738>)
 8009224:	4413      	add	r3, r2
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	f7f6 ffe3 	bl	80001f4 <__adddf3>
 800922e:	4604      	mov	r4, r0
 8009230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009232:	460d      	mov	r5, r1
 8009234:	f7f7 f92a 	bl	800048c <__aeabi_i2d>
 8009238:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800923a:	4b30      	ldr	r3, [pc, #192]	; (80092fc <__ieee754_pow+0x73c>)
 800923c:	4413      	add	r3, r2
 800923e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009242:	4606      	mov	r6, r0
 8009244:	460f      	mov	r7, r1
 8009246:	4622      	mov	r2, r4
 8009248:	462b      	mov	r3, r5
 800924a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800924e:	f7f6 ffd1 	bl	80001f4 <__adddf3>
 8009252:	4642      	mov	r2, r8
 8009254:	464b      	mov	r3, r9
 8009256:	f7f6 ffcd 	bl	80001f4 <__adddf3>
 800925a:	4632      	mov	r2, r6
 800925c:	463b      	mov	r3, r7
 800925e:	f7f6 ffc9 	bl	80001f4 <__adddf3>
 8009262:	9802      	ldr	r0, [sp, #8]
 8009264:	4632      	mov	r2, r6
 8009266:	463b      	mov	r3, r7
 8009268:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800926c:	f7f6 ffc0 	bl	80001f0 <__aeabi_dsub>
 8009270:	4642      	mov	r2, r8
 8009272:	464b      	mov	r3, r9
 8009274:	f7f6 ffbc 	bl	80001f0 <__aeabi_dsub>
 8009278:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800927c:	e607      	b.n	8008e8e <__ieee754_pow+0x2ce>
 800927e:	f04f 0a01 	mov.w	sl, #1
 8009282:	e6a5      	b.n	8008fd0 <__ieee754_pow+0x410>
 8009284:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80092d8 <__ieee754_pow+0x718>
 8009288:	e613      	b.n	8008eb2 <__ieee754_pow+0x2f2>
 800928a:	bf00      	nop
 800928c:	f3af 8000 	nop.w
 8009290:	4a454eef 	.word	0x4a454eef
 8009294:	3fca7e28 	.word	0x3fca7e28
 8009298:	93c9db65 	.word	0x93c9db65
 800929c:	3fcd864a 	.word	0x3fcd864a
 80092a0:	a91d4101 	.word	0xa91d4101
 80092a4:	3fd17460 	.word	0x3fd17460
 80092a8:	518f264d 	.word	0x518f264d
 80092ac:	3fd55555 	.word	0x3fd55555
 80092b0:	db6fabff 	.word	0xdb6fabff
 80092b4:	3fdb6db6 	.word	0x3fdb6db6
 80092b8:	33333303 	.word	0x33333303
 80092bc:	3fe33333 	.word	0x3fe33333
 80092c0:	e0000000 	.word	0xe0000000
 80092c4:	3feec709 	.word	0x3feec709
 80092c8:	dc3a03fd 	.word	0xdc3a03fd
 80092cc:	3feec709 	.word	0x3feec709
 80092d0:	145b01f5 	.word	0x145b01f5
 80092d4:	be3e2fe0 	.word	0xbe3e2fe0
 80092d8:	00000000 	.word	0x00000000
 80092dc:	3ff00000 	.word	0x3ff00000
 80092e0:	43400000 	.word	0x43400000
 80092e4:	0003988e 	.word	0x0003988e
 80092e8:	000bb679 	.word	0x000bb679
 80092ec:	08009af0 	.word	0x08009af0
 80092f0:	3ff00000 	.word	0x3ff00000
 80092f4:	40080000 	.word	0x40080000
 80092f8:	08009b10 	.word	0x08009b10
 80092fc:	08009b00 	.word	0x08009b00
 8009300:	a3b4      	add	r3, pc, #720	; (adr r3, 80095d4 <__ieee754_pow+0xa14>)
 8009302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009306:	4640      	mov	r0, r8
 8009308:	4649      	mov	r1, r9
 800930a:	f7f6 ff73 	bl	80001f4 <__adddf3>
 800930e:	4622      	mov	r2, r4
 8009310:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009314:	462b      	mov	r3, r5
 8009316:	4630      	mov	r0, r6
 8009318:	4639      	mov	r1, r7
 800931a:	f7f6 ff69 	bl	80001f0 <__aeabi_dsub>
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009326:	f7f7 fbab 	bl	8000a80 <__aeabi_dcmpgt>
 800932a:	2800      	cmp	r0, #0
 800932c:	f47f adfe 	bne.w	8008f2c <__ieee754_pow+0x36c>
 8009330:	4aa3      	ldr	r2, [pc, #652]	; (80095c0 <__ieee754_pow+0xa00>)
 8009332:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009336:	4293      	cmp	r3, r2
 8009338:	f340 810a 	ble.w	8009550 <__ieee754_pow+0x990>
 800933c:	151b      	asrs	r3, r3, #20
 800933e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009342:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009346:	fa4a f303 	asr.w	r3, sl, r3
 800934a:	445b      	add	r3, fp
 800934c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009350:	4e9c      	ldr	r6, [pc, #624]	; (80095c4 <__ieee754_pow+0xa04>)
 8009352:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009356:	4116      	asrs	r6, r2
 8009358:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800935c:	2000      	movs	r0, #0
 800935e:	ea23 0106 	bic.w	r1, r3, r6
 8009362:	f1c2 0214 	rsb	r2, r2, #20
 8009366:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800936a:	fa4a fa02 	asr.w	sl, sl, r2
 800936e:	f1bb 0f00 	cmp.w	fp, #0
 8009372:	4602      	mov	r2, r0
 8009374:	460b      	mov	r3, r1
 8009376:	4620      	mov	r0, r4
 8009378:	4629      	mov	r1, r5
 800937a:	bfb8      	it	lt
 800937c:	f1ca 0a00 	rsblt	sl, sl, #0
 8009380:	f7f6 ff36 	bl	80001f0 <__aeabi_dsub>
 8009384:	e9cd 0100 	strd	r0, r1, [sp]
 8009388:	4642      	mov	r2, r8
 800938a:	464b      	mov	r3, r9
 800938c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009390:	f7f6 ff30 	bl	80001f4 <__adddf3>
 8009394:	2000      	movs	r0, #0
 8009396:	a378      	add	r3, pc, #480	; (adr r3, 8009578 <__ieee754_pow+0x9b8>)
 8009398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939c:	4604      	mov	r4, r0
 800939e:	460d      	mov	r5, r1
 80093a0:	f7f7 f8de 	bl	8000560 <__aeabi_dmul>
 80093a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093a8:	4606      	mov	r6, r0
 80093aa:	460f      	mov	r7, r1
 80093ac:	4620      	mov	r0, r4
 80093ae:	4629      	mov	r1, r5
 80093b0:	f7f6 ff1e 	bl	80001f0 <__aeabi_dsub>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4640      	mov	r0, r8
 80093ba:	4649      	mov	r1, r9
 80093bc:	f7f6 ff18 	bl	80001f0 <__aeabi_dsub>
 80093c0:	a36f      	add	r3, pc, #444	; (adr r3, 8009580 <__ieee754_pow+0x9c0>)
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	f7f7 f8cb 	bl	8000560 <__aeabi_dmul>
 80093ca:	a36f      	add	r3, pc, #444	; (adr r3, 8009588 <__ieee754_pow+0x9c8>)
 80093cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d0:	4680      	mov	r8, r0
 80093d2:	4689      	mov	r9, r1
 80093d4:	4620      	mov	r0, r4
 80093d6:	4629      	mov	r1, r5
 80093d8:	f7f7 f8c2 	bl	8000560 <__aeabi_dmul>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	4640      	mov	r0, r8
 80093e2:	4649      	mov	r1, r9
 80093e4:	f7f6 ff06 	bl	80001f4 <__adddf3>
 80093e8:	4604      	mov	r4, r0
 80093ea:	460d      	mov	r5, r1
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4630      	mov	r0, r6
 80093f2:	4639      	mov	r1, r7
 80093f4:	f7f6 fefe 	bl	80001f4 <__adddf3>
 80093f8:	4632      	mov	r2, r6
 80093fa:	463b      	mov	r3, r7
 80093fc:	4680      	mov	r8, r0
 80093fe:	4689      	mov	r9, r1
 8009400:	f7f6 fef6 	bl	80001f0 <__aeabi_dsub>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	4620      	mov	r0, r4
 800940a:	4629      	mov	r1, r5
 800940c:	f7f6 fef0 	bl	80001f0 <__aeabi_dsub>
 8009410:	4642      	mov	r2, r8
 8009412:	4606      	mov	r6, r0
 8009414:	460f      	mov	r7, r1
 8009416:	464b      	mov	r3, r9
 8009418:	4640      	mov	r0, r8
 800941a:	4649      	mov	r1, r9
 800941c:	f7f7 f8a0 	bl	8000560 <__aeabi_dmul>
 8009420:	a35b      	add	r3, pc, #364	; (adr r3, 8009590 <__ieee754_pow+0x9d0>)
 8009422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009426:	4604      	mov	r4, r0
 8009428:	460d      	mov	r5, r1
 800942a:	f7f7 f899 	bl	8000560 <__aeabi_dmul>
 800942e:	a35a      	add	r3, pc, #360	; (adr r3, 8009598 <__ieee754_pow+0x9d8>)
 8009430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009434:	f7f6 fedc 	bl	80001f0 <__aeabi_dsub>
 8009438:	4622      	mov	r2, r4
 800943a:	462b      	mov	r3, r5
 800943c:	f7f7 f890 	bl	8000560 <__aeabi_dmul>
 8009440:	a357      	add	r3, pc, #348	; (adr r3, 80095a0 <__ieee754_pow+0x9e0>)
 8009442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009446:	f7f6 fed5 	bl	80001f4 <__adddf3>
 800944a:	4622      	mov	r2, r4
 800944c:	462b      	mov	r3, r5
 800944e:	f7f7 f887 	bl	8000560 <__aeabi_dmul>
 8009452:	a355      	add	r3, pc, #340	; (adr r3, 80095a8 <__ieee754_pow+0x9e8>)
 8009454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009458:	f7f6 feca 	bl	80001f0 <__aeabi_dsub>
 800945c:	4622      	mov	r2, r4
 800945e:	462b      	mov	r3, r5
 8009460:	f7f7 f87e 	bl	8000560 <__aeabi_dmul>
 8009464:	a352      	add	r3, pc, #328	; (adr r3, 80095b0 <__ieee754_pow+0x9f0>)
 8009466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946a:	f7f6 fec3 	bl	80001f4 <__adddf3>
 800946e:	4622      	mov	r2, r4
 8009470:	462b      	mov	r3, r5
 8009472:	f7f7 f875 	bl	8000560 <__aeabi_dmul>
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	4640      	mov	r0, r8
 800947c:	4649      	mov	r1, r9
 800947e:	f7f6 feb7 	bl	80001f0 <__aeabi_dsub>
 8009482:	4604      	mov	r4, r0
 8009484:	460d      	mov	r5, r1
 8009486:	4602      	mov	r2, r0
 8009488:	460b      	mov	r3, r1
 800948a:	4640      	mov	r0, r8
 800948c:	4649      	mov	r1, r9
 800948e:	f7f7 f867 	bl	8000560 <__aeabi_dmul>
 8009492:	2200      	movs	r2, #0
 8009494:	e9cd 0100 	strd	r0, r1, [sp]
 8009498:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800949c:	4620      	mov	r0, r4
 800949e:	4629      	mov	r1, r5
 80094a0:	f7f6 fea6 	bl	80001f0 <__aeabi_dsub>
 80094a4:	4602      	mov	r2, r0
 80094a6:	460b      	mov	r3, r1
 80094a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094ac:	f7f7 f982 	bl	80007b4 <__aeabi_ddiv>
 80094b0:	4632      	mov	r2, r6
 80094b2:	4604      	mov	r4, r0
 80094b4:	460d      	mov	r5, r1
 80094b6:	463b      	mov	r3, r7
 80094b8:	4640      	mov	r0, r8
 80094ba:	4649      	mov	r1, r9
 80094bc:	f7f7 f850 	bl	8000560 <__aeabi_dmul>
 80094c0:	4632      	mov	r2, r6
 80094c2:	463b      	mov	r3, r7
 80094c4:	f7f6 fe96 	bl	80001f4 <__adddf3>
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	4620      	mov	r0, r4
 80094ce:	4629      	mov	r1, r5
 80094d0:	f7f6 fe8e 	bl	80001f0 <__aeabi_dsub>
 80094d4:	4642      	mov	r2, r8
 80094d6:	464b      	mov	r3, r9
 80094d8:	f7f6 fe8a 	bl	80001f0 <__aeabi_dsub>
 80094dc:	4602      	mov	r2, r0
 80094de:	460b      	mov	r3, r1
 80094e0:	2000      	movs	r0, #0
 80094e2:	4939      	ldr	r1, [pc, #228]	; (80095c8 <__ieee754_pow+0xa08>)
 80094e4:	f7f6 fe84 	bl	80001f0 <__aeabi_dsub>
 80094e8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80094ec:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80094f0:	4602      	mov	r2, r0
 80094f2:	460b      	mov	r3, r1
 80094f4:	da2f      	bge.n	8009556 <__ieee754_pow+0x996>
 80094f6:	4650      	mov	r0, sl
 80094f8:	ec43 2b10 	vmov	d0, r2, r3
 80094fc:	f000 f9c0 	bl	8009880 <scalbn>
 8009500:	ec51 0b10 	vmov	r0, r1, d0
 8009504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009508:	f7ff bbf1 	b.w	8008cee <__ieee754_pow+0x12e>
 800950c:	4b2f      	ldr	r3, [pc, #188]	; (80095cc <__ieee754_pow+0xa0c>)
 800950e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009512:	429e      	cmp	r6, r3
 8009514:	f77f af0c 	ble.w	8009330 <__ieee754_pow+0x770>
 8009518:	4b2d      	ldr	r3, [pc, #180]	; (80095d0 <__ieee754_pow+0xa10>)
 800951a:	440b      	add	r3, r1
 800951c:	4303      	orrs	r3, r0
 800951e:	d00b      	beq.n	8009538 <__ieee754_pow+0x978>
 8009520:	a325      	add	r3, pc, #148	; (adr r3, 80095b8 <__ieee754_pow+0x9f8>)
 8009522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800952a:	f7f7 f819 	bl	8000560 <__aeabi_dmul>
 800952e:	a322      	add	r3, pc, #136	; (adr r3, 80095b8 <__ieee754_pow+0x9f8>)
 8009530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009534:	f7ff bbdb 	b.w	8008cee <__ieee754_pow+0x12e>
 8009538:	4622      	mov	r2, r4
 800953a:	462b      	mov	r3, r5
 800953c:	f7f6 fe58 	bl	80001f0 <__aeabi_dsub>
 8009540:	4642      	mov	r2, r8
 8009542:	464b      	mov	r3, r9
 8009544:	f7f7 fa92 	bl	8000a6c <__aeabi_dcmpge>
 8009548:	2800      	cmp	r0, #0
 800954a:	f43f aef1 	beq.w	8009330 <__ieee754_pow+0x770>
 800954e:	e7e7      	b.n	8009520 <__ieee754_pow+0x960>
 8009550:	f04f 0a00 	mov.w	sl, #0
 8009554:	e718      	b.n	8009388 <__ieee754_pow+0x7c8>
 8009556:	4621      	mov	r1, r4
 8009558:	e7d4      	b.n	8009504 <__ieee754_pow+0x944>
 800955a:	2000      	movs	r0, #0
 800955c:	491a      	ldr	r1, [pc, #104]	; (80095c8 <__ieee754_pow+0xa08>)
 800955e:	f7ff bb8f 	b.w	8008c80 <__ieee754_pow+0xc0>
 8009562:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009566:	f7ff bb8b 	b.w	8008c80 <__ieee754_pow+0xc0>
 800956a:	4630      	mov	r0, r6
 800956c:	4639      	mov	r1, r7
 800956e:	f7ff bb87 	b.w	8008c80 <__ieee754_pow+0xc0>
 8009572:	4693      	mov	fp, r2
 8009574:	f7ff bb98 	b.w	8008ca8 <__ieee754_pow+0xe8>
 8009578:	00000000 	.word	0x00000000
 800957c:	3fe62e43 	.word	0x3fe62e43
 8009580:	fefa39ef 	.word	0xfefa39ef
 8009584:	3fe62e42 	.word	0x3fe62e42
 8009588:	0ca86c39 	.word	0x0ca86c39
 800958c:	be205c61 	.word	0xbe205c61
 8009590:	72bea4d0 	.word	0x72bea4d0
 8009594:	3e663769 	.word	0x3e663769
 8009598:	c5d26bf1 	.word	0xc5d26bf1
 800959c:	3ebbbd41 	.word	0x3ebbbd41
 80095a0:	af25de2c 	.word	0xaf25de2c
 80095a4:	3f11566a 	.word	0x3f11566a
 80095a8:	16bebd93 	.word	0x16bebd93
 80095ac:	3f66c16c 	.word	0x3f66c16c
 80095b0:	5555553e 	.word	0x5555553e
 80095b4:	3fc55555 	.word	0x3fc55555
 80095b8:	c2f8f359 	.word	0xc2f8f359
 80095bc:	01a56e1f 	.word	0x01a56e1f
 80095c0:	3fe00000 	.word	0x3fe00000
 80095c4:	000fffff 	.word	0x000fffff
 80095c8:	3ff00000 	.word	0x3ff00000
 80095cc:	4090cbff 	.word	0x4090cbff
 80095d0:	3f6f3400 	.word	0x3f6f3400
 80095d4:	652b82fe 	.word	0x652b82fe
 80095d8:	3c971547 	.word	0x3c971547

080095dc <__ieee754_sqrt>:
 80095dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095e0:	4955      	ldr	r1, [pc, #340]	; (8009738 <__ieee754_sqrt+0x15c>)
 80095e2:	ec55 4b10 	vmov	r4, r5, d0
 80095e6:	43a9      	bics	r1, r5
 80095e8:	462b      	mov	r3, r5
 80095ea:	462a      	mov	r2, r5
 80095ec:	d112      	bne.n	8009614 <__ieee754_sqrt+0x38>
 80095ee:	ee10 2a10 	vmov	r2, s0
 80095f2:	ee10 0a10 	vmov	r0, s0
 80095f6:	4629      	mov	r1, r5
 80095f8:	f7f6 ffb2 	bl	8000560 <__aeabi_dmul>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	4620      	mov	r0, r4
 8009602:	4629      	mov	r1, r5
 8009604:	f7f6 fdf6 	bl	80001f4 <__adddf3>
 8009608:	4604      	mov	r4, r0
 800960a:	460d      	mov	r5, r1
 800960c:	ec45 4b10 	vmov	d0, r4, r5
 8009610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009614:	2d00      	cmp	r5, #0
 8009616:	ee10 0a10 	vmov	r0, s0
 800961a:	4621      	mov	r1, r4
 800961c:	dc0f      	bgt.n	800963e <__ieee754_sqrt+0x62>
 800961e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009622:	4330      	orrs	r0, r6
 8009624:	d0f2      	beq.n	800960c <__ieee754_sqrt+0x30>
 8009626:	b155      	cbz	r5, 800963e <__ieee754_sqrt+0x62>
 8009628:	ee10 2a10 	vmov	r2, s0
 800962c:	4620      	mov	r0, r4
 800962e:	4629      	mov	r1, r5
 8009630:	f7f6 fdde 	bl	80001f0 <__aeabi_dsub>
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	f7f7 f8bc 	bl	80007b4 <__aeabi_ddiv>
 800963c:	e7e4      	b.n	8009608 <__ieee754_sqrt+0x2c>
 800963e:	151b      	asrs	r3, r3, #20
 8009640:	d073      	beq.n	800972a <__ieee754_sqrt+0x14e>
 8009642:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009646:	07dd      	lsls	r5, r3, #31
 8009648:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800964c:	bf48      	it	mi
 800964e:	0fc8      	lsrmi	r0, r1, #31
 8009650:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009654:	bf44      	itt	mi
 8009656:	0049      	lslmi	r1, r1, #1
 8009658:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800965c:	2500      	movs	r5, #0
 800965e:	1058      	asrs	r0, r3, #1
 8009660:	0fcb      	lsrs	r3, r1, #31
 8009662:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009666:	0049      	lsls	r1, r1, #1
 8009668:	2316      	movs	r3, #22
 800966a:	462c      	mov	r4, r5
 800966c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009670:	19a7      	adds	r7, r4, r6
 8009672:	4297      	cmp	r7, r2
 8009674:	bfde      	ittt	le
 8009676:	19bc      	addle	r4, r7, r6
 8009678:	1bd2      	suble	r2, r2, r7
 800967a:	19ad      	addle	r5, r5, r6
 800967c:	0fcf      	lsrs	r7, r1, #31
 800967e:	3b01      	subs	r3, #1
 8009680:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8009684:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009688:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800968c:	d1f0      	bne.n	8009670 <__ieee754_sqrt+0x94>
 800968e:	f04f 0c20 	mov.w	ip, #32
 8009692:	469e      	mov	lr, r3
 8009694:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009698:	42a2      	cmp	r2, r4
 800969a:	eb06 070e 	add.w	r7, r6, lr
 800969e:	dc02      	bgt.n	80096a6 <__ieee754_sqrt+0xca>
 80096a0:	d112      	bne.n	80096c8 <__ieee754_sqrt+0xec>
 80096a2:	428f      	cmp	r7, r1
 80096a4:	d810      	bhi.n	80096c8 <__ieee754_sqrt+0xec>
 80096a6:	2f00      	cmp	r7, #0
 80096a8:	eb07 0e06 	add.w	lr, r7, r6
 80096ac:	da42      	bge.n	8009734 <__ieee754_sqrt+0x158>
 80096ae:	f1be 0f00 	cmp.w	lr, #0
 80096b2:	db3f      	blt.n	8009734 <__ieee754_sqrt+0x158>
 80096b4:	f104 0801 	add.w	r8, r4, #1
 80096b8:	1b12      	subs	r2, r2, r4
 80096ba:	428f      	cmp	r7, r1
 80096bc:	bf88      	it	hi
 80096be:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80096c2:	1bc9      	subs	r1, r1, r7
 80096c4:	4433      	add	r3, r6
 80096c6:	4644      	mov	r4, r8
 80096c8:	0052      	lsls	r2, r2, #1
 80096ca:	f1bc 0c01 	subs.w	ip, ip, #1
 80096ce:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80096d2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80096d6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80096da:	d1dd      	bne.n	8009698 <__ieee754_sqrt+0xbc>
 80096dc:	430a      	orrs	r2, r1
 80096de:	d006      	beq.n	80096ee <__ieee754_sqrt+0x112>
 80096e0:	1c5c      	adds	r4, r3, #1
 80096e2:	bf13      	iteet	ne
 80096e4:	3301      	addne	r3, #1
 80096e6:	3501      	addeq	r5, #1
 80096e8:	4663      	moveq	r3, ip
 80096ea:	f023 0301 	bicne.w	r3, r3, #1
 80096ee:	106a      	asrs	r2, r5, #1
 80096f0:	085b      	lsrs	r3, r3, #1
 80096f2:	07e9      	lsls	r1, r5, #31
 80096f4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80096f8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80096fc:	bf48      	it	mi
 80096fe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009702:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009706:	461c      	mov	r4, r3
 8009708:	e780      	b.n	800960c <__ieee754_sqrt+0x30>
 800970a:	0aca      	lsrs	r2, r1, #11
 800970c:	3815      	subs	r0, #21
 800970e:	0549      	lsls	r1, r1, #21
 8009710:	2a00      	cmp	r2, #0
 8009712:	d0fa      	beq.n	800970a <__ieee754_sqrt+0x12e>
 8009714:	02d6      	lsls	r6, r2, #11
 8009716:	d50a      	bpl.n	800972e <__ieee754_sqrt+0x152>
 8009718:	f1c3 0420 	rsb	r4, r3, #32
 800971c:	fa21 f404 	lsr.w	r4, r1, r4
 8009720:	1e5d      	subs	r5, r3, #1
 8009722:	4099      	lsls	r1, r3
 8009724:	4322      	orrs	r2, r4
 8009726:	1b43      	subs	r3, r0, r5
 8009728:	e78b      	b.n	8009642 <__ieee754_sqrt+0x66>
 800972a:	4618      	mov	r0, r3
 800972c:	e7f0      	b.n	8009710 <__ieee754_sqrt+0x134>
 800972e:	0052      	lsls	r2, r2, #1
 8009730:	3301      	adds	r3, #1
 8009732:	e7ef      	b.n	8009714 <__ieee754_sqrt+0x138>
 8009734:	46a0      	mov	r8, r4
 8009736:	e7bf      	b.n	80096b8 <__ieee754_sqrt+0xdc>
 8009738:	7ff00000 	.word	0x7ff00000

0800973c <fabs>:
 800973c:	ec51 0b10 	vmov	r0, r1, d0
 8009740:	ee10 2a10 	vmov	r2, s0
 8009744:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009748:	ec43 2b10 	vmov	d0, r2, r3
 800974c:	4770      	bx	lr

0800974e <finite>:
 800974e:	ee10 3a90 	vmov	r3, s1
 8009752:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8009756:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800975a:	0fc0      	lsrs	r0, r0, #31
 800975c:	4770      	bx	lr

0800975e <matherr>:
 800975e:	2000      	movs	r0, #0
 8009760:	4770      	bx	lr
 8009762:	0000      	movs	r0, r0
 8009764:	0000      	movs	r0, r0
	...

08009768 <nan>:
 8009768:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009770 <nan+0x8>
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	00000000 	.word	0x00000000
 8009774:	7ff80000 	.word	0x7ff80000

08009778 <rint>:
 8009778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800977a:	ec51 0b10 	vmov	r0, r1, d0
 800977e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009782:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009786:	2e13      	cmp	r6, #19
 8009788:	460b      	mov	r3, r1
 800978a:	ee10 4a10 	vmov	r4, s0
 800978e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009792:	dc56      	bgt.n	8009842 <rint+0xca>
 8009794:	2e00      	cmp	r6, #0
 8009796:	da2b      	bge.n	80097f0 <rint+0x78>
 8009798:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800979c:	4302      	orrs	r2, r0
 800979e:	d023      	beq.n	80097e8 <rint+0x70>
 80097a0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80097a4:	4302      	orrs	r2, r0
 80097a6:	4254      	negs	r4, r2
 80097a8:	4314      	orrs	r4, r2
 80097aa:	0c4b      	lsrs	r3, r1, #17
 80097ac:	0b24      	lsrs	r4, r4, #12
 80097ae:	045b      	lsls	r3, r3, #17
 80097b0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80097b4:	ea44 0103 	orr.w	r1, r4, r3
 80097b8:	460b      	mov	r3, r1
 80097ba:	492f      	ldr	r1, [pc, #188]	; (8009878 <rint+0x100>)
 80097bc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80097c0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80097c4:	4602      	mov	r2, r0
 80097c6:	4639      	mov	r1, r7
 80097c8:	4630      	mov	r0, r6
 80097ca:	f7f6 fd13 	bl	80001f4 <__adddf3>
 80097ce:	e9cd 0100 	strd	r0, r1, [sp]
 80097d2:	463b      	mov	r3, r7
 80097d4:	4632      	mov	r2, r6
 80097d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097da:	f7f6 fd09 	bl	80001f0 <__aeabi_dsub>
 80097de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80097e2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80097e6:	4639      	mov	r1, r7
 80097e8:	ec41 0b10 	vmov	d0, r0, r1
 80097ec:	b003      	add	sp, #12
 80097ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097f0:	4a22      	ldr	r2, [pc, #136]	; (800987c <rint+0x104>)
 80097f2:	4132      	asrs	r2, r6
 80097f4:	ea01 0702 	and.w	r7, r1, r2
 80097f8:	4307      	orrs	r7, r0
 80097fa:	d0f5      	beq.n	80097e8 <rint+0x70>
 80097fc:	0852      	lsrs	r2, r2, #1
 80097fe:	4011      	ands	r1, r2
 8009800:	430c      	orrs	r4, r1
 8009802:	d00b      	beq.n	800981c <rint+0xa4>
 8009804:	ea23 0202 	bic.w	r2, r3, r2
 8009808:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800980c:	2e13      	cmp	r6, #19
 800980e:	fa43 f306 	asr.w	r3, r3, r6
 8009812:	bf0c      	ite	eq
 8009814:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009818:	2400      	movne	r4, #0
 800981a:	4313      	orrs	r3, r2
 800981c:	4916      	ldr	r1, [pc, #88]	; (8009878 <rint+0x100>)
 800981e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009822:	4622      	mov	r2, r4
 8009824:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009828:	4620      	mov	r0, r4
 800982a:	4629      	mov	r1, r5
 800982c:	f7f6 fce2 	bl	80001f4 <__adddf3>
 8009830:	e9cd 0100 	strd	r0, r1, [sp]
 8009834:	4622      	mov	r2, r4
 8009836:	462b      	mov	r3, r5
 8009838:	e9dd 0100 	ldrd	r0, r1, [sp]
 800983c:	f7f6 fcd8 	bl	80001f0 <__aeabi_dsub>
 8009840:	e7d2      	b.n	80097e8 <rint+0x70>
 8009842:	2e33      	cmp	r6, #51	; 0x33
 8009844:	dd07      	ble.n	8009856 <rint+0xde>
 8009846:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800984a:	d1cd      	bne.n	80097e8 <rint+0x70>
 800984c:	ee10 2a10 	vmov	r2, s0
 8009850:	f7f6 fcd0 	bl	80001f4 <__adddf3>
 8009854:	e7c8      	b.n	80097e8 <rint+0x70>
 8009856:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800985a:	f04f 32ff 	mov.w	r2, #4294967295
 800985e:	40f2      	lsrs	r2, r6
 8009860:	4210      	tst	r0, r2
 8009862:	d0c1      	beq.n	80097e8 <rint+0x70>
 8009864:	0852      	lsrs	r2, r2, #1
 8009866:	4210      	tst	r0, r2
 8009868:	bf1f      	itttt	ne
 800986a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800986e:	ea20 0202 	bicne.w	r2, r0, r2
 8009872:	4134      	asrne	r4, r6
 8009874:	4314      	orrne	r4, r2
 8009876:	e7d1      	b.n	800981c <rint+0xa4>
 8009878:	08009b20 	.word	0x08009b20
 800987c:	000fffff 	.word	0x000fffff

08009880 <scalbn>:
 8009880:	b570      	push	{r4, r5, r6, lr}
 8009882:	ec55 4b10 	vmov	r4, r5, d0
 8009886:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800988a:	4606      	mov	r6, r0
 800988c:	462b      	mov	r3, r5
 800988e:	b9aa      	cbnz	r2, 80098bc <scalbn+0x3c>
 8009890:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009894:	4323      	orrs	r3, r4
 8009896:	d03b      	beq.n	8009910 <scalbn+0x90>
 8009898:	4b31      	ldr	r3, [pc, #196]	; (8009960 <scalbn+0xe0>)
 800989a:	4629      	mov	r1, r5
 800989c:	2200      	movs	r2, #0
 800989e:	ee10 0a10 	vmov	r0, s0
 80098a2:	f7f6 fe5d 	bl	8000560 <__aeabi_dmul>
 80098a6:	4b2f      	ldr	r3, [pc, #188]	; (8009964 <scalbn+0xe4>)
 80098a8:	429e      	cmp	r6, r3
 80098aa:	4604      	mov	r4, r0
 80098ac:	460d      	mov	r5, r1
 80098ae:	da12      	bge.n	80098d6 <scalbn+0x56>
 80098b0:	a327      	add	r3, pc, #156	; (adr r3, 8009950 <scalbn+0xd0>)
 80098b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b6:	f7f6 fe53 	bl	8000560 <__aeabi_dmul>
 80098ba:	e009      	b.n	80098d0 <scalbn+0x50>
 80098bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80098c0:	428a      	cmp	r2, r1
 80098c2:	d10c      	bne.n	80098de <scalbn+0x5e>
 80098c4:	ee10 2a10 	vmov	r2, s0
 80098c8:	4620      	mov	r0, r4
 80098ca:	4629      	mov	r1, r5
 80098cc:	f7f6 fc92 	bl	80001f4 <__adddf3>
 80098d0:	4604      	mov	r4, r0
 80098d2:	460d      	mov	r5, r1
 80098d4:	e01c      	b.n	8009910 <scalbn+0x90>
 80098d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80098da:	460b      	mov	r3, r1
 80098dc:	3a36      	subs	r2, #54	; 0x36
 80098de:	4432      	add	r2, r6
 80098e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80098e4:	428a      	cmp	r2, r1
 80098e6:	dd0b      	ble.n	8009900 <scalbn+0x80>
 80098e8:	ec45 4b11 	vmov	d1, r4, r5
 80098ec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009958 <scalbn+0xd8>
 80098f0:	f000 f83c 	bl	800996c <copysign>
 80098f4:	a318      	add	r3, pc, #96	; (adr r3, 8009958 <scalbn+0xd8>)
 80098f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fa:	ec51 0b10 	vmov	r0, r1, d0
 80098fe:	e7da      	b.n	80098b6 <scalbn+0x36>
 8009900:	2a00      	cmp	r2, #0
 8009902:	dd08      	ble.n	8009916 <scalbn+0x96>
 8009904:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009908:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800990c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009910:	ec45 4b10 	vmov	d0, r4, r5
 8009914:	bd70      	pop	{r4, r5, r6, pc}
 8009916:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800991a:	da0d      	bge.n	8009938 <scalbn+0xb8>
 800991c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009920:	429e      	cmp	r6, r3
 8009922:	ec45 4b11 	vmov	d1, r4, r5
 8009926:	dce1      	bgt.n	80098ec <scalbn+0x6c>
 8009928:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009950 <scalbn+0xd0>
 800992c:	f000 f81e 	bl	800996c <copysign>
 8009930:	a307      	add	r3, pc, #28	; (adr r3, 8009950 <scalbn+0xd0>)
 8009932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009936:	e7e0      	b.n	80098fa <scalbn+0x7a>
 8009938:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800993c:	3236      	adds	r2, #54	; 0x36
 800993e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009942:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009946:	4620      	mov	r0, r4
 8009948:	4629      	mov	r1, r5
 800994a:	2200      	movs	r2, #0
 800994c:	4b06      	ldr	r3, [pc, #24]	; (8009968 <scalbn+0xe8>)
 800994e:	e7b2      	b.n	80098b6 <scalbn+0x36>
 8009950:	c2f8f359 	.word	0xc2f8f359
 8009954:	01a56e1f 	.word	0x01a56e1f
 8009958:	8800759c 	.word	0x8800759c
 800995c:	7e37e43c 	.word	0x7e37e43c
 8009960:	43500000 	.word	0x43500000
 8009964:	ffff3cb0 	.word	0xffff3cb0
 8009968:	3c900000 	.word	0x3c900000

0800996c <copysign>:
 800996c:	ec51 0b10 	vmov	r0, r1, d0
 8009970:	ee11 0a90 	vmov	r0, s3
 8009974:	ee10 2a10 	vmov	r2, s0
 8009978:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800997c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009980:	ea41 0300 	orr.w	r3, r1, r0
 8009984:	ec43 2b10 	vmov	d0, r2, r3
 8009988:	4770      	bx	lr
	...

0800998c <_init>:
 800998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998e:	bf00      	nop
 8009990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009992:	bc08      	pop	{r3}
 8009994:	469e      	mov	lr, r3
 8009996:	4770      	bx	lr

08009998 <_fini>:
 8009998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999a:	bf00      	nop
 800999c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800999e:	bc08      	pop	{r3}
 80099a0:	469e      	mov	lr, r3
 80099a2:	4770      	bx	lr
